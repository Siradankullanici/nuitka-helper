------------------------------ [modulecode_Crypto.Cipher.ARC4] ------------------------------
0
[1, None, None]
drop
key_size
Incorrect ARC4 key length (%d bytes)
VoidPointer
_state
_raw_arc4_lib
ARC4_stream_init
c_uint8_ptr
c_size_t
address_of
Error %d while creating the ARC4 cipher
SmartPointer
get
ARC4_stream_destroy
encrypt
b'\x00'
1
block_size
Initialize an ARC4 cipher object

        See also `new()` at the module level.
create_string_buffer
ARC4_stream_encrypt
Error %d while encrypting with RC4
get_raw_buffer
Encrypt a piece of data.

        :param plaintext: The data to encrypt, of any size.
        :type plaintext: bytes, bytearray, memoryview
        :returns: the encrypted byte string, of equal length as the
          plaintext.
        
replace
('enc', 'dec')
Decrypt a piece of data.

        :param ciphertext: The data to decrypt, of any size.
        :type ciphertext: bytes, bytearray, memoryview
        :returns: the decrypted byte string, of equal length as the
          ciphertext.
        
ARC4Cipher
Create a new ARC4 cipher.

    :param key:
        The secret key to use in the symmetric cipher.
        Its length must be in the range ``[1..256]``.
        The recommended length is 16 bytes.
    :type key: bytes, bytearray, memoryview

    :Keyword Arguments:
        *   *drop* (``integer``) --
            The amount of bytes to discard from the initial part of the keystream.
            In fact, such part has been found to be distinguishable from random
            data (while it shouldn't) and also correlated to key.

            The recommended value is 3072_ bytes. The default value is 0.

    :Return: an `ARC4Cipher` object

    .. _3072: http://eprint.iacr.org/2002/067.pdf
    
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr')
load_pycryptodome_raw_lib
('Crypto.Cipher._ARC4', '\n                    int ARC4_stream_encrypt(void *rc4State, const uint8_t in[],\n                                            uint8_t out[], size_t len);\n                    int ARC4_stream_init(uint8_t *key, size_t keylen,\n                                         void **pRc4State);\n                    int ARC4_stream_destroy(void *rc4State);\n                    ')
Crypto.Cipher.ARC4
__module__
ARC4 cipher object. Do not create it directly. Use
    :func:`Crypto.Cipher.ARC4.new` instead.
    
__qualname__
__init__
ARC4Cipher.__init__
ARC4Cipher.encrypt
decrypt
ARC4Cipher.decrypt
()
new
(1, 257, 1)
Crypto\Cipher\ARC4.py
<module Crypto.Cipher.ARC4>
('self', 'key', 'args', 'kwargs', 'ndrop', 'result')
('self', 'ciphertext', 'e')
('self', 'plaintext', 'ciphertext', 'result')
('key', 'args', 'kwargs')


------------------------------ [modulecode_Crypto.Cipher._EKSBlowfish] ------------------------------
pop
('key',)
('salt',)
('cost',)
Missing EKSBlowfish parameter: 
('invert', True)
key_size
Incorrect EKSBlowfish key length (%d bytes)
_raw_blowfish_lib
EKSBlowfish_start_operation
EKSBlowfish_stop_operation
VoidPointer
c_uint8_ptr
c_size_t
c_uint
address_of
Error %X while instantiating the EKSBlowfish cipher
SmartPointer
get
This method instantiates and returns a smart pointer to
    a low-level base cipher. It will absorb named parameters in
    the process.
salt
cost
invert
_create_cipher
sys
modules
Crypto.Cipher._EKSBlowfish
Create a new EKSBlowfish cipher
    
    Args:

      key (bytes, bytearray, memoryview):
        The secret key to use in the symmetric cipher.
        Its length can vary from 0 to 72 bytes.

      mode (one of the supported ``MODE_*`` constants):
        The chaining mode to use for encryption or decryption.

      salt (bytes, bytearray, memoryview):
        The salt that bcrypt uses to thwart rainbow table attacks

      cost (integer):
        The complexity factor in bcrypt

      invert (bool):
        If ``False``, in the inner loop use ``ExpandKey`` first over the salt
        and then over the key, as defined in
        the `original bcrypt specification <https://www.usenix.org/legacy/events/usenix99/provos/provos_html/node4.html>`_.
        If ``True``, reverse the order, as in the first implementation of
        `bcrypt` in OpenBSD.

    :Return: an EKSBlowfish object
    
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Cipher
('_create_cipher',)
0
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'c_uint')
load_pycryptodome_raw_lib
('Crypto.Cipher._raw_eksblowfish', '\n        int EKSBlowfish_start_operation(const uint8_t key[],\n                                        size_t key_len,\n                                        const uint8_t salt[16],\n                                        size_t salt_len,\n                                        unsigned cost,\n                                        unsigned invert,\n                                        void **pResult);\n        int EKSBlowfish_encrypt(const void *state,\n                                const uint8_t *in,\n                                uint8_t *out,\n                                size_t data_len);\n        int EKSBlowfish_decrypt(const void *state,\n                                const uint8_t *in,\n                                uint8_t *out,\n                                size_t data_len);\n        int EKSBlowfish_stop_operation(void *state);\n        ')
_create_base_cipher
new
1
MODE_ECB
8
block_size
(0, 73, 1)
Crypto\Cipher\_EKSBlowfish.py
<module Crypto.Cipher._EKSBlowfish>
('dict_parameters', 'key', 'salt', 'cost', 'e', 'invert', 'start_operation', 'stop_operation', 'void_p', 'result')
('key', 'mode', 'salt', 'cost', 'invert', 'kwargs')


------------------------------ [modulecode_Crypto.Cipher._mode_cbc] ------------------------------
VoidPointer
_state
raw_cbc_lib
CBC_start_operation
get
c_uint8_ptr
c_size_t
address_of
Error %d while instantiating the CBC mode
SmartPointer
CBC_stop_operation
release
block_size
_copy_bytes
iv
IV
encrypt
decrypt
_next
Create a new block cipher, configured in CBC mode.

        :Parameters:
          block_cipher : C pointer
            A smart pointer to the low-level block cipher instance.

          iv : bytes/bytearray/memoryview
            The initialization vector to use for encryption or decryption.
            It is as long as the cipher block.

            **The IV must be unpredictable**. Ideally it is picked randomly.

            Reusing the *IV* for encryptions performed with the same key
            compromises confidentiality.
        
encrypt() cannot be called after decrypt()
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
CBC_encrypt
plaintext
3
Data must be padded to %d byte boundary in CBC mode
Error %d while encrypting in CBC mode
output
get_raw_buffer
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        That also means that you cannot reuse an object for encrypting
        or decrypting other data with the same key.

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            Its lenght must be multiple of the cipher block size.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext is returned as ``bytes``.
          Otherwise, ``None``.
        
decrypt() cannot be called after encrypt()
CBC_decrypt
ciphertext
Error %d while decrypting in CBC mode
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            Its length must be multiple of the cipher block size.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext is returned as ``bytes``.
          Otherwise, ``None``.
        
_create_base_cipher
pop
('IV', None)
('iv', None)
(None, None)
get_random_bytes
You must either use 'iv' or 'IV', not both
Incorrect IV length (it must be %d bytes long)
Unknown parameters for CBC: %s
CbcMode
Instantiate a cipher object that performs CBC encryption/decryption.

    :Parameters:
      factory : module
        The underlying block cipher, a module from ``Crypto.Cipher``.

    :Keywords:
      iv : bytes/bytearray/memoryview
        The IV to use for CBC.

      IV : bytes/bytearray/memoryview
        Alias for ``iv``.

    Any other keyword will be passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present).
    

Ciphertext Block Chaining (CBC) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util.py3compat
('_copy_bytes',)
0
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_writeable_buffer')
load_pycryptodome_raw_lib
Crypto.Random
('get_random_bytes',)
('Crypto.Cipher._raw_cbc', '\n                int CBC_start_operation(void *cipher,\n                                        const uint8_t iv[],\n                                        size_t iv_len,\n                                        void **pResult);\n                int CBC_encrypt(void *cbcState,\n                                const uint8_t *in,\n                                uint8_t *out,\n                                size_t data_len);\n                int CBC_decrypt(void *cbcState,\n                                const uint8_t *in,\n                                uint8_t *out,\n                                size_t data_len);\n                int CBC_stop_operation(void *state);\n                ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_cbc
__module__
*Cipher-Block Chaining (CBC)*.

    Each of the ciphertext blocks depends on the current
    and all previous plaintext blocks.

    An Initialization Vector (*IV*) is required.

    See `NIST SP800-38A`_ , Section 6.2 .

    .. _`NIST SP800-38A` : http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

    :undocumented: __init__
    
__qualname__
__init__
CbcMode.__init__
(None,)
CbcMode.encrypt
CbcMode.decrypt
__orig_bases__
_create_cbc_cipher
Crypto\Cipher\_mode_cbc.py
<module Crypto.Cipher._mode_cbc>
('__class__',)
('self', 'block_cipher', 'iv', 'result')
('factory', 'kwargs', 'cipher_state', 'iv', 'IV')
('self', 'ciphertext', 'output', 'plaintext', 'result')
('self', 'plaintext', 'output', 'ciphertext', 'result')


------------------------------ [modulecode_Crypto.Cipher._mode_ccm] ------------------------------
Enum
()
Crypto.Cipher._mode_ccm
block_size
_copy_bytes
nonce
_factory
_key
_mac_len
_msg_len
_assoc_len
_cipher_params
_mac_tag
16
CCM mode is only available for ciphers that operate on 128 bits blocks
(4, 6, 8, 10, 12, 14, 16)
Parameter 'mac_len' must be even and in the range 4..16 (not %d)
Length of parameter 'nonce' must be in the range 7..13 bytes
new
MODE_CBC
{'iv': b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'}
_mac
MacStatus
NOT_STARTED
_mac_status
_t
['update', 'encrypt', 'decrypt', 'digest', 'verify']
_next
0
_cumul_assoc_len
_cumul_msg_len
_cache
MODE_CTR
struct
pack
B
_cipher
encrypt
(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',)
_s_0
_start_mac
64
8
2
long_to_bytes
b''
65280
4294967296
b'\xff\xfe'
4
b'\xff\xff'
insert
1
PROCESSING_AUTH_DATA
_update
b'\x00'
update
update() can only be called immediately after initialization
Associated data is too long
Protect associated data

        If there is any associated data, the caller has to invoke
        this function one or more times, before using
        ``decrypt`` or ``encrypt``.

        By *associated data* it is meant any data (e.g. packet headers) that
        will not be encrypted and will be transmitted in the clear.
        However, the receiver is still able to detect any modification to it.
        In CCM, the *associated data* is also called
        *additional authenticated data* (AAD).

        If there is no associated data, this method must not be called.

        The caller may split associated data in segments of any size, and
        invoke this method multiple times, each time with the next segment.

        :Parameters:
          assoc_data : bytes/bytearray/memoryview
            A piece of associated data. There are no restrictions on its size.
        
is_writeable_buffer
append
assoc_data_pt
min
[-16, None, None]
Update the MAC with associated data or plaintext
           (without FSM checks)
encrypt() can only be called after initialization or an update()
digest
Associated data is too short
plaintext
Message is too long
_pad_cache_and_update
PROCESSING_PLAINTEXT
('output',)
Encrypt data with the key set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        This method can be called only **once** if ``msg_len`` was
        not passed at initialization.

        If ``msg_len`` was given, the data to encrypt can be broken
        up in two or more pieces and `encrypt` can be called
        multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext as ``bytes``.
          Otherwise, ``None``.
        
decrypt
decrypt() can only be called after initialization or an update()
verify
ciphertext
Decrypt data with the key set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        This method can be called only **once** if ``msg_len`` was
        not passed at initialization.

        If ``msg_len`` was given, the data to decrypt can be
        broken up in two or more pieces and `decrypt` can be
        called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext as ``bytes``.
          Otherwise, ``None``.
        
digest() cannot be called when decrypting or validating a message
_digest
Compute the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method returns the MAC that shall be sent to the receiver,
        together with the ciphertext.

        :Return: the MAC, as a byte string.
        
Message is too short
strxor

%02x
bord
Compute the *printable* MAC tag.

        This method is like `digest`.

        :Return: the MAC, as a hexadecimal string.
        
verify() cannot be called when encrypting a message
get_random_bytes
(16,)
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Validate the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method checks if the decrypted message is indeed valid
        (that is, if the key is correct) and it has not been
        tampered with while in transit.

        :Parameters:
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
unhexlify
Validate the *printable* MAC tag.

        This method is like `verify`.

        :Parameters:
          hex_mac_tag : string
            This is the *printable* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
Perform encrypt() and digest() in one step.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
            a tuple with two items:

            - the ciphertext, as ``bytes``
            - the MAC tag, as ``bytes``

            The first item becomes ``None`` when the ``output`` parameter
            specified a location for the result.
        
Perform decrypt() and verify() in one step.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return: the plaintext as ``bytes`` or ``None`` when the ``output``
            parameter specified a location for the result.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
key
Missing parameter: 
pop
('nonce', None)
(11,)
mac_len
('msg_len', None)
('assoc_len', None)
CcmMode
Create a new block cipher, configured in CCM mode.

    :Parameters:
      factory : module
        A symmetric cipher module from `Crypto.Cipher` (like
        `Crypto.Cipher.AES`).

    :Keywords:
      key : bytes/bytearray/memoryview
        The secret key to use in the symmetric cipher.

      nonce : bytes/bytearray/memoryview
        A value that must never be reused for any other encryption.

        Its length must be in the range ``[7..13]``.
        11 or 12 bytes are reasonable values in general. Bear in
        mind that with CCM there is a trade-off between nonce length and
        maximum message size.

        If not specified, a 11 byte long random string is used.

      mac_len : integer
        Length of the MAC, in bytes. It must be even and in
        the range ``[4..16]``. The default is 16.

      msg_len : integer
        Length of the message to (de)cipher.
        If not specified, ``encrypt`` or ``decrypt`` may only be called once.

      assoc_len : integer
        Length of the associated data.
        If not specified, all data is internally buffered.
    

Counter with CBC-MAC (CCM) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
binascii
('unhexlify',)
Crypto.Util.py3compat
('byte_string', 'bord', '_copy_bytes')
byte_string
Crypto.Util._raw_api
('is_writeable_buffer',)
Crypto.Util.strxor
('strxor',)
Crypto.Util.number
('long_to_bytes',)
Crypto.Hash
('BLAKE2s',)
Crypto.Random
('get_random_bytes',)
enum
(0, 1, 2)
('NOT_STARTED', 'PROCESSING_AUTH_DATA', 'PROCESSING_PLAINTEXT')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
__module__
Counter with CBC-MAC (CCM).

    This is an Authenticated Encryption with Associated Data (`AEAD`_) mode.
    It provides both confidentiality and authenticity.

    The header of the message may be left in the clear, if needed, and it will
    still be subject to authentication. The decryption step tells the receiver
    if the message comes from a source that really knowns the secret key.
    Additionally, decryption detects if any part of the message - including the
    header - has been modified or corrupted.

    This mode requires a nonce. The nonce shall never repeat for two
    different messages encrypted with the same key, but it does not need
    to be random.
    Note that there is a trade-off between the size of the nonce and the
    maximum size of a single message you can encrypt.

    It is important to use a large nonce if the key is reused across several
    messages and the nonce is chosen randomly.

    It is acceptable to us a short nonce if the key is only used a few times or
    if the nonce is taken from a counter.

    The following table shows the trade-off when the nonce is chosen at
    random. The column on the left shows how many messages it takes
    for the keystream to repeat **on average**. In practice, you will want to
    stop using the key way before that.

    +--------------------+---------------+-------------------+
    | Avg. # of messages |    nonce      |     Max. message  |
    | before keystream   |    size       |     size          |
    | repeats            |    (bytes)    |     (bytes)       |
    +====================+===============+===================+
    |       2^52         |      13       |        64K        |
    +--------------------+---------------+-------------------+
    |       2^48         |      12       |        16M        |
    +--------------------+---------------+-------------------+
    |       2^44         |      11       |         4G        |
    +--------------------+---------------+-------------------+
    |       2^40         |      10       |         1T        |
    +--------------------+---------------+-------------------+
    |       2^36         |       9       |        64P        |
    +--------------------+---------------+-------------------+
    |       2^32         |       8       |        16E        |
    +--------------------+---------------+-------------------+

    This mode is only available for ciphers that operate on 128 bits blocks
    (e.g. AES but not TDES).

    See `NIST SP800-38C`_ or RFC3610_.

    .. _`NIST SP800-38C`: http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C.pdf
    .. _RFC3610: https://tools.ietf.org/html/rfc3610
    .. _AEAD: http://blog.cryptographyengineering.com/2012/05/how-to-choose-authenticated-encryption.html

    :undocumented: __init__
    
__qualname__
__init__
CcmMode.__init__
CcmMode._start_mac
CcmMode._pad_cache_and_update
CcmMode.update
(b'',)
CcmMode._update
(None,)
CcmMode.encrypt
CcmMode.decrypt
CcmMode.digest
CcmMode._digest
hexdigest
CcmMode.hexdigest
CcmMode.verify
hexverify
CcmMode.hexverify
encrypt_and_digest
CcmMode.encrypt_and_digest
decrypt_and_verify
CcmMode.decrypt_and_verify
__orig_bases__
_create_ccm_cipher
Crypto\Cipher\_mode_ccm.py
<module Crypto.Cipher._mode_ccm>
('__class__',)
('self', 'factory', 'key', 'nonce', 'mac_len', 'msg_len', 'assoc_len', 'cipher_params', 'q')
('factory', 'kwargs', 'key', 'e', 'nonce', 'mac_len', 'msg_len', 'assoc_len', 'cipher_params')
('self',)
('self', 'len_cache')
('self', 'q', 'flags', 'b_0', 'assoc_len_encoded', 'enc_size', 'first_data_to_mac')
('self', 'assoc_data_pt', 'filler', 'update_len')
('self', 'ciphertext', 'output', 'plaintext')
('self', 'ciphertext', 'received_mac_tag', 'output', 'plaintext')
('self', 'plaintext', 'output')
('enums',)
('self', 'hex_mac_tag')
('self', 'assoc_data')
('self', 'received_mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Cipher._mode_cfb] ------------------------------
VoidPointer
_state
raw_cfb_lib
CFB_start_operation
get
c_uint8_ptr
c_size_t
address_of
Error %d while instantiating the CFB mode
SmartPointer
CFB_stop_operation
release
block_size
_copy_bytes
iv
IV
encrypt
decrypt
_next
Create a new block cipher, configured in CFB mode.

        :Parameters:
          block_cipher : C pointer
            A smart pointer to the low-level block cipher instance.

          iv : bytes/bytearray/memoryview
            The initialization vector to use for encryption or decryption.
            It is as long as the cipher block.

            **The IV must be unpredictable**. Ideally it is picked randomly.

            Reusing the *IV* for encryptions performed with the same key
            compromises confidentiality.

          segment_size : integer
            The number of bytes the plaintext and ciphertext are segmented in.
        
encrypt() cannot be called after decrypt()
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
CFB_encrypt
plaintext
Error %d while encrypting in CFB mode
output
get_raw_buffer
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext is returned as ``bytes``.
          Otherwise, ``None``.
        
decrypt() cannot be called after encrypt()
CFB_decrypt
ciphertext
Error %d while decrypting in CFB mode
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext is returned as ``bytes``.
          Otherwise, ``None``.
        
_create_base_cipher
pop
('IV', None)
('iv', None)
(None, None)
get_random_bytes
You must either use 'iv' or 'IV', not both
Incorrect IV length (it must be %d bytes long)
('segment_size', 8)
8
too many values to unpack (expected 2)
0
'segment_size' must be positive and multiple of 8 bits
Unknown parameters for CFB: %s
CfbMode
Instantiate a cipher object that performs CFB encryption/decryption.

    :Parameters:
      factory : module
        The underlying block cipher, a module from ``Crypto.Cipher``.

    :Keywords:
      iv : bytes/bytearray/memoryview
        The IV to use for CFB.

      IV : bytes/bytearray/memoryview
        Alias for ``iv``.

      segment_size : integer
        The number of bit the plaintext and ciphertext are segmented in.
        If not present, the default is 8.

    Any other keyword will be passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present).
    

Counter Feedback (CFB) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util.py3compat
('_copy_bytes',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_writeable_buffer')
load_pycryptodome_raw_lib
Crypto.Random
('get_random_bytes',)
('Crypto.Cipher._raw_cfb', '\n                    int CFB_start_operation(void *cipher,\n                                            const uint8_t iv[],\n                                            size_t iv_len,\n                                            size_t segment_len, /* In bytes */\n                                            void **pResult);\n                    int CFB_encrypt(void *cfbState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int CFB_decrypt(void *cfbState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int CFB_stop_operation(void *state);')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_cfb
__module__
*Cipher FeedBack (CFB)*.

    This mode is similar to CFB, but it transforms
    the underlying block cipher into a stream cipher.

    Plaintext and ciphertext are processed in *segments*
    of **s** bits. The mode is therefore sometimes
    labelled **s**-bit CFB.

    An Initialization Vector (*IV*) is required.

    See `NIST SP800-38A`_ , Section 6.3.

    .. _`NIST SP800-38A` : http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

    :undocumented: __init__
    
__qualname__
__init__
CfbMode.__init__
(None,)
CfbMode.encrypt
CfbMode.decrypt
__orig_bases__
_create_cfb_cipher
Crypto\Cipher\_mode_cfb.py
<module Crypto.Cipher._mode_cfb>
('__class__',)
('self', 'block_cipher', 'iv', 'segment_size', 'result')
('factory', 'kwargs', 'cipher_state', 'iv', 'IV', 'segment_size_bytes', 'rem')
('self', 'ciphertext', 'output', 'plaintext', 'result')
('self', 'plaintext', 'output', 'ciphertext', 'result')


------------------------------ [modulecode_Crypto.Cipher._mode_ctr] ------------------------------
_copy_bytes
nonce
VoidPointer
self
_state
raw_ctr_lib
CTR_start_operation
get
c_uint8_ptr
c_size_t
address_of
Error %X while instantiating the CTR mode
SmartPointer
CTR_stop_operation
release
block_size
encrypt
decrypt
_next
Create a new block cipher, configured in CTR mode.

        :Parameters:
          block_cipher : C pointer
            A smart pointer to the low-level block cipher instance.

          initial_counter_block : bytes/bytearray/memoryview
            The initial plaintext to use to generate the key stream.

            It is as large as the cipher block, and it embeds
            the initial value of the counter.

            This value must not be reused.
            It shall contain a nonce or a random component.
            Reusing the *initial counter block* for encryptions
            performed with the same key compromises confidentiality.

          prefix_len : integer
            The amount of bytes at the beginning of the counter block
            that never change.

          counter_len : integer
            The length in bytes of the counter embedded in the counter
            block.

          little_endian : boolean
            True if the counter in the counter block is an integer encoded
            in little endian mode. If False, it is big endian.
        
encrypt() cannot be called after decrypt()
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
CTR_encrypt
plaintext
393218
The counter has wrapped around in CTR mode
Error %X while encrypting in CTR mode
output
get_raw_buffer
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext is returned as ``bytes``.
          Otherwise, ``None``.
        
decrypt() cannot be called after encrypt()
CTR_decrypt
ciphertext
Error %X while decrypting in CTR mode
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext is returned as ``bytes``.
          Otherwise, ``None``.
        
_create_base_cipher
pop
('counter', None)
('nonce', None)
('initial_value', None)
Invalid parameters for CTR mode: %s
(None, None)
'counter' and 'nonce'/'initial_value' are mutually exclusive
16
Impossible to create a safe nonce for short block sizes
get_random_bytes
2
Nonce is too long
0
is_native_int
1
8
Initial counter value is too large
long_to_bytes
Incorrect length for counter byte string (%d bytes, expected %d)
CtrMode
counter_len
prefix
suffix
initial_value
little_endian
Incorrect counter object (use Crypto.Util.Counter.new)
words
append
struct
pack
B
255
b'\x00'
max
reverse
b''
Size of the counter block (%d bytes) must match block size (%d)
Instantiate a cipher object that performs CTR encryption/decryption.

    :Parameters:
      factory : module
        The underlying block cipher, a module from ``Crypto.Cipher``.

    :Keywords:
      nonce : bytes/bytearray/memoryview
        The fixed part at the beginning of the counter block - the rest is
        the counter number that gets increased when processing the next block.
        The nonce must be such that no two messages are encrypted under the
        same key and the same nonce.

        The nonce must be shorter than the block size (it can have
        zero length; the counter is then as long as the block).

        If this parameter is not present, a random nonce will be created with
        length equal to half the block size. No random nonce shorter than
        64 bits will be created though - you must really think through all
        security consequences of using such a short block size.

      initial_value : posive integer or bytes/bytearray/memoryview
        The initial value for the counter. If not present, the cipher will
        start counting from 0. The value is incremented by one for each block.
        The counter number is encoded in big endian mode.

      counter : object
        Instance of ``Crypto.Util.Counter``, which allows full customization
        of the counter block. This parameter is incompatible to both ``nonce``
        and ``initial_value``.

    Any other keyword will be passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present).
    

Counter (CTR) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_writeable_buffer')
load_pycryptodome_raw_lib
Crypto.Random
('get_random_bytes',)
Crypto.Util.py3compat
('_copy_bytes', 'is_native_int')
Crypto.Util.number
('long_to_bytes',)
('Crypto.Cipher._raw_ctr', '\n                    int CTR_start_operation(void *cipher,\n                                            uint8_t   initialCounterBlock[],\n                                            size_t    initialCounterBlock_len,\n                                            size_t    prefix_len,\n                                            unsigned  counter_len,\n                                            unsigned  littleEndian,\n                                            void **pResult);\n                    int CTR_encrypt(void *ctrState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int CTR_decrypt(void *ctrState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int CTR_stop_operation(void *ctrState);')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_ctr
__module__
*CounTeR (CTR)* mode.

    This mode is very similar to ECB, in that
    encryption of one block is done independently of all other blocks.

    Unlike ECB, the block *position* contributes to the encryption
    and no information leaks about symbol frequency.

    Each message block is associated to a *counter* which
    must be unique across all messages that get encrypted
    with the same key (not just within the same message).
    The counter is as big as the block size.

    Counters can be generated in several ways. The most
    straightword one is to choose an *initial counter block*
    (which can be made public, similarly to the *IV* for the
    other modes) and increment its lowest **m** bits by one
    (modulo *2^m*) for each block. In most cases, **m** is
    chosen to be half the block size.

    See `NIST SP800-38A`_, Section 6.5 (for the mode) and
    Appendix B (for how to manage the *initial counter block*).

    .. _`NIST SP800-38A` : http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

    :undocumented: __init__
    
__qualname__
__init__
CtrMode.__init__
(None,)
CtrMode.encrypt
CtrMode.decrypt
__orig_bases__
_create_ctr_cipher
Crypto\Cipher\_mode_ctr.py
<module Crypto.Cipher._mode_ctr>
('__class__',)
('self', 'block_cipher', 'initial_counter_block', 'prefix_len', 'counter_len', 'little_endian', 'result')
('factory', 'kwargs', 'cipher_state', 'counter', 'nonce', 'initial_value', 'counter_len', 'initial_counter_block', '_counter', 'prefix', 'suffix', 'little_endian', 'words')
('self', 'ciphertext', 'output', 'plaintext', 'result')
('self', 'plaintext', 'output', 'ciphertext', 'result')


------------------------------ [modulecode_Crypto.Cipher._mode_eax] ------------------------------
block_size
_copy_bytes
nonce
_mac_len
_mac_tag
['update', 'encrypt', 'decrypt', 'digest', 'verify']
_next
2
'mac_len' must be at least 2 and not larger than %d
Nonce cannot be empty in EAX mode
is_buffer
nonce must be bytes, bytearray or memoryview
(0, 3, 1)
CMAC
new
key
b'\x00'
self
1
struct
pack
B
factory
cipher_params
('ciphermod', 'cipher_params')
_omac
0
update
_signer
bytes_to_long
digest
MODE_CTR
initial_value
b''
_cipher
EAX cipher mode
update() can only be called immediately after initialization
Protect associated data

        If there is any associated data, the caller has to invoke
        this function one or more times, before using
        ``decrypt`` or ``encrypt``.

        By *associated data* it is meant any data (e.g. packet headers) that
        will not be encrypted and will be transmitted in the clear.
        However, the receiver is still able to detect any modification to it.

        If there is no associated data, this method must not be called.

        The caller may split associated data in segments of any size, and
        invoke this method multiple times, each time with the next segment.

        :Parameters:
          assoc_data : bytes/bytearray/memoryview
            A piece of associated data. There are no restrictions on its size.
        
encrypt
encrypt() can only be called after initialization or an update()
('output',)
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext as ``bytes``.
          Otherwise, ``None``.
        
decrypt
decrypt() can only be called after initialization or an update()
verify
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext as ``bytes``.
          Otherwise, ``None``.
        
digest() cannot be called when decrypting or validating a message
strxor
tag
Compute the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method returns the MAC that shall be sent to the receiver,
        together with the ciphertext.

        :Return: the MAC, as a byte string.
        

%02x
bord
Compute the *printable* MAC tag.

        This method is like `digest`.

        :Return: the MAC, as a hexadecimal string.
        
verify() cannot be called when encrypting a message
get_random_bytes
(16,)
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Validate the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method checks if the decrypted message is indeed valid
        (that is, if the key is correct) and it has not been
        tampered with while in transit.

        :Parameters:
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Raises MacMismatchError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
unhexlify
Validate the *printable* MAC tag.

        This method is like `verify`.

        :Parameters:
          hex_mac_tag : string
            This is the *printable* MAC, as received from the sender.
        :Raises MacMismatchError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
Perform encrypt() and digest() in one step.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
            a tuple with two items:

            - the ciphertext, as ``bytes``
            - the MAC tag, as ``bytes``

            The first item becomes ``None`` when the ``output`` parameter
            specified a location for the result.
        
Perform decrypt() and verify() in one step.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return: the plaintext as ``bytes`` or ``None`` when the ``output``
            parameter specified a location for the result.
        :Raises MacMismatchError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
pop
('nonce', None)
mac_len
Missing parameter: 
EaxMode
Create a new block cipher, configured in EAX mode.

    :Parameters:
      factory : module
        A symmetric cipher module from `Crypto.Cipher` (like
        `Crypto.Cipher.AES`).

    :Keywords:
      key : bytes/bytearray/memoryview
        The secret key to use in the symmetric cipher.

      nonce : bytes/bytearray/memoryview
        A value that must never be reused for any other encryption.
        There are no restrictions on its length, but it is recommended to use
        at least 16 bytes.

        The nonce shall never repeat for two different messages encrypted with
        the same key, but it does not need to be random.

        If not specified, a 16 byte long random string is used.

      mac_len : integer
        Length of the MAC, in bytes. It must be no larger than the cipher
        block bytes (which is the default).
    

EAX mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
binascii
('unhexlify',)
Crypto.Util.py3compat
('byte_string', 'bord', '_copy_bytes')
byte_string
Crypto.Util._raw_api
('is_buffer',)
Crypto.Util.strxor
('strxor',)
Crypto.Util.number
('long_to_bytes', 'bytes_to_long')
long_to_bytes
Crypto.Hash
('CMAC', 'BLAKE2s')
Crypto.Random
('get_random_bytes',)
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_eax
__module__
*EAX* mode.

    This is an Authenticated Encryption with Associated Data
    (`AEAD`_) mode. It provides both confidentiality and authenticity.

    The header of the message may be left in the clear, if needed,
    and it will still be subject to authentication.

    The decryption step tells the receiver if the message comes
    from a source that really knowns the secret key.
    Additionally, decryption detects if any part of the message -
    including the header - has been modified or corrupted.

    This mode requires a *nonce*.

    This mode is only available for ciphers that operate on 64 or
    128 bits blocks.

    There are no official standards defining EAX.
    The implementation is based on `a proposal`__ that
    was presented to NIST.

    .. _AEAD: http://blog.cryptographyengineering.com/2012/05/how-to-choose-authenticated-encryption.html
    .. __: http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/eax/eax-spec.pdf

    :undocumented: __init__
    
__qualname__
__init__
EaxMode.__init__
EaxMode.update
(None,)
EaxMode.encrypt
EaxMode.decrypt
EaxMode.digest
hexdigest
EaxMode.hexdigest
EaxMode.verify
hexverify
EaxMode.hexverify
encrypt_and_digest
EaxMode.encrypt_and_digest
decrypt_and_verify
EaxMode.decrypt_and_verify
__orig_bases__
_create_eax_cipher
Crypto\Cipher\_mode_eax.py
<module Crypto.Cipher._mode_eax>
('__class__',)
('self', 'factory', 'key', 'nonce', 'mac_len', 'cipher_params', 'counter_int')
('factory', 'kwargs', 'key', 'nonce', 'mac_len', 'e')
('self', 'ciphertext', 'output')
('self', 'ciphertext', 'received_mac_tag', 'output', 'pt')
('self', 'tag', 'i')
('self', 'plaintext', 'output', 'ct')
('self', 'plaintext', 'output')
('self',)
('self', 'hex_mac_tag')
('self', 'assoc_data')
('self', 'received_mac_tag', 'tag', 'i', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Cipher._mode_ecb] ------------------------------
block_size
VoidPointer
_state
raw_ecb_lib
ECB_start_operation
get
address_of
Error %d while instantiating the ECB mode
SmartPointer
ECB_stop_operation
release
Create a new block cipher, configured in ECB mode.

        :Parameters:
          block_cipher : C pointer
            A smart pointer to the low-level block cipher instance.
        
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
ECB_encrypt
c_uint8_ptr
plaintext
c_size_t
3
Data must be aligned to block boundary in ECB mode
Error %d while encrypting in ECB mode
output
get_raw_buffer
Encrypt data with the key set at initialization.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            The length must be multiple of the cipher block length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext is returned as ``bytes``.
          Otherwise, ``None``.
        
ECB_decrypt
ciphertext
Error %d while decrypting in ECB mode
Decrypt data with the key set at initialization.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            The length must be multiple of the cipher block length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext is returned as ``bytes``.
          Otherwise, ``None``.
        
_create_base_cipher
Unknown parameters for ECB: %s
EcbMode
Instantiate a cipher object that performs ECB encryption/decryption.

    :Parameters:
      factory : module
        The underlying block cipher, a module from ``Crypto.Cipher``.

    All keywords are passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present

Electronic Code Book (ECB) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_writeable_buffer')
0
load_pycryptodome_raw_lib
('Crypto.Cipher._raw_ecb', '\n                    int ECB_start_operation(void *cipher,\n                                            void **pResult);\n                    int ECB_encrypt(void *ecbState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int ECB_decrypt(void *ecbState,\n                                    const uint8_t *in,\n                                    uint8_t *out,\n                                    size_t data_len);\n                    int ECB_stop_operation(void *state);\n                    ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_ecb
__module__
*Electronic Code Book (ECB)*.

    This is the simplest encryption mode. Each of the plaintext blocks
    is directly encrypted into a ciphertext block, independently of
    any other block.

    This mode is dangerous because it exposes frequency of symbols
    in your plaintext. Other modes (e.g. *CBC*) should be used instead.

    See `NIST SP800-38A`_ , Section 6.1.

    .. _`NIST SP800-38A` : http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

    :undocumented: __init__
    
__qualname__
__init__
EcbMode.__init__
(None,)
encrypt
EcbMode.encrypt
decrypt
EcbMode.decrypt
__orig_bases__
_create_ecb_cipher
Crypto\Cipher\_mode_ecb.py
<module Crypto.Cipher._mode_ecb>
('__class__',)
('self', 'block_cipher', 'result')
('factory', 'kwargs', 'cipher_state')
('self', 'ciphertext', 'output', 'plaintext', 'result')
('self', 'plaintext', 'output', 'ciphertext', 'result')


------------------------------ [modulecode_Crypto.Cipher._mode_gcm] ------------------------------
collections
('namedtuple',)
0
namedtuple
('_GHash_Imp', ('ghash', 'ghash_expand', 'ghash_destroy'))
('ghash', 'ghash_expand', 'ghash_destroy')
_
postfix
_ghash_api_template
replace
('%imp%', 'portable')
load_pycryptodome_raw_lib
Crypto.Hash._ghash_portable
_build_impl
portable
_cpu_features
have_clmul
('%imp%', 'clmul')
Crypto.Hash._ghash_clmul
clmul
Return None if CLMUL implementation is not available
ghash_c
VoidPointer
_exp_key
ghash_expand
c_uint8_ptr
address_of
Error %d while expanding the GHASH key
SmartPointer
get
ghash_destroy
create_string_buffer
(16,)
_last_y
16
ghash
c_size_t
Error %d while updating GHASH
get_raw_buffer
Enum
()
Crypto.Cipher._mode_gcm
block_size
GCM mode is only available for ciphers that operate on 128 bits blocks
Nonce cannot be empty
is_buffer
Nonce must be bytes, bytearray or memoryview
18446744073709551615
Nonce exceeds maximum length
_copy_bytes
nonce
_factory
_key
_tag
_mac_len
4
Parameter 'mac_len' must be in the range 4..16
['update', 'encrypt', 'decrypt', 'digest', 'verify']
_next
_no_more_assoc_data
_auth_len
_msg_len
new
MODE_ECB
encrypt
(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',)
b'\x00\x00\x00\x01'
b'\x00'
long_to_bytes
8
_GHASH
update
digest
[None, 12, None]
bytes_to_long
1
4294967295
MODE_CTR
initial_value
_cipher
hash_subkey
_signer
b''
_tag_cipher
_cache
MacStatus
PROCESSING_AUTH_DATA
_status
update() can only be called immediately after initialization
_update
Additional Authenticated Data exceeds maximum length
Protect associated data

        If there is any associated data, the caller has to invoke
        this function one or more times, before using
        ``decrypt`` or ``encrypt``.

        By *associated data* it is meant any data (e.g. packet headers) that
        will not be encrypted and will be transmitted in the clear.
        However, the receiver is still able to detect any modification to it.
        In GCM, the *associated data* is also called
        *additional authenticated data* (AAD).

        If there is no associated data, this method must not be called.

        The caller may split associated data in segments of any size, and
        invoke this method multiple times, each time with the next segment.

        :Parameters:
          assoc_data : bytes/bytearray/memoryview
            A piece of associated data. There are no restrictions on its size.
        
min
encrypt() can only be called after initialization or an update()
('output',)
_pad_cache_and_update
PROCESSING_CIPHERTEXT
549755813632
Plaintext exceeds maximum length
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext as ``bytes``.
          Otherwise, ``None``.
        
decrypt
decrypt() can only be called after initialization or an update()
verify
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext as ``bytes``.
          Otherwise, ``None``.
        
digest() cannot be called when decrypting or validating a message
_compute_mac
Compute the *binary* MAC tag in an AEAD mode.

        The caller invokes this function at the very end.

        This method returns the MAC that shall be sent to the receiver,
        together with the ciphertext.

        :Return: the MAC, as a byte string.
        
Compute MAC without any FSM checks.

%02x
bord
Compute the *printable* MAC tag.

        This method is like `digest`.

        :Return: the MAC, as a hexadecimal string.
        
verify() cannot be called when encrypting a message
get_random_bytes
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Validate the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method checks if the decrypted message is indeed valid
        (that is, if the key is correct) and it has not been
        tampered with while in transit.

        :Parameters:
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
unhexlify
Validate the *printable* MAC tag.

        This method is like `verify`.

        :Parameters:
          hex_mac_tag : string
            This is the *printable* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
Perform encrypt() and digest() in one step.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
            a tuple with two items:

            - the ciphertext, as ``bytes``
            - the MAC tag, as ``bytes``

            The first item becomes ``None`` when the ``output`` parameter
            specified a location for the result.
        
Perform decrypt() and verify() in one step.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
          received_mac_tag : byte string
            This is the *binary* MAC, as received from the sender.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return: the plaintext as ``bytes`` or ``None`` when the ``output``
            parameter specified a location for the result.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
key
Missing parameter:
pop
('nonce', None)
('mac_len', 16)
('use_clmul', True)
_ghash_clmul
_ghash_portable
GcmMode
Create a new block cipher, configured in Galois Counter Mode (GCM).

    :Parameters:
      factory : module
        A block cipher module, taken from `Crypto.Cipher`.
        The cipher must have block length of 16 bytes.
        GCM has been only defined for `Crypto.Cipher.AES`.

    :Keywords:
      key : bytes/bytearray/memoryview
        The secret key to use in the symmetric cipher.
        It must be 16 (e.g. *AES-128*), 24 (e.g. *AES-192*)
        or 32 (e.g. *AES-256*) bytes long.

      nonce : bytes/bytearray/memoryview
        A value that must never be reused for any other encryption.

        There are no restrictions on its length,
        but it is recommended to use at least 16 bytes.

        The nonce shall never repeat for two
        different messages encrypted with the same key,
        but it does not need to be random.

        If not provided, a 16 byte nonce will be randomly created.

      mac_len : integer
        Length of the MAC, in bytes.
        It must be no larger than 16 bytes (which is the default).
    

Galois/Counter Mode (GCM).

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
binascii
('unhexlify',)
Crypto.Util.py3compat
('bord', '_copy_bytes')
Crypto.Util._raw_api
('is_buffer',)
Crypto.Util.number
('long_to_bytes', 'bytes_to_long')
Crypto.Hash
('BLAKE2s',)
Crypto.Random
('get_random_bytes',)
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr')
Crypto.Util
('_cpu_features',)

    int ghash_%imp%(uint8_t y_out[16],
                    const uint8_t block_data[],
                    size_t len,
                    const uint8_t y_in[16],
                    const void *exp_key);
    int ghash_expand_%imp%(const uint8_t h[16],
                           void **ghash_tables);
    int ghash_destroy_%imp%(void *ghash_tables);

_get_ghash_portable
_get_ghash_clmul
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
__module__
GHASH function defined in NIST SP 800-38D, Algorithm 2.

    If X_1, X_2, .. X_m are the blocks of input data, the function
    computes:

       X_1*H^{m} + X_2*H^{m-1} + ... + X_m*H

    in the Galois field GF(2^256) using the reducing polynomial
    (x^128 + x^7 + x^2 + x + 1).
    
__qualname__
__init__
_GHASH.__init__
_GHASH.update
_GHASH.digest
__orig_bases__
enum
(1, 2)
('PROCESSING_AUTH_DATA', 'PROCESSING_CIPHERTEXT')
Galois Counter Mode (GCM).

    This is an Authenticated Encryption with Associated Data (`AEAD`_) mode.
    It provides both confidentiality and authenticity.

    The header of the message may be left in the clear, if needed, and it will
    still be subject to authentication. The decryption step tells the receiver
    if the message comes from a source that really knowns the secret key.
    Additionally, decryption detects if any part of the message - including the
    header - has been modified or corrupted.

    This mode requires a *nonce*.

    This mode is only available for ciphers that operate on 128 bits blocks
    (e.g. AES but not TDES).

    See `NIST SP800-38D`_.

    .. _`NIST SP800-38D`: http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf
    .. _AEAD: http://blog.cryptographyengineering.com/2012/05/how-to-choose-authenticated-encryption.html

    :undocumented: __init__
    
GcmMode.__init__
GcmMode.update
GcmMode._update
GcmMode._pad_cache_and_update
(None,)
GcmMode.encrypt
GcmMode.decrypt
GcmMode.digest
GcmMode._compute_mac
hexdigest
GcmMode.hexdigest
GcmMode.verify
hexverify
GcmMode.hexverify
encrypt_and_digest
GcmMode.encrypt_and_digest
decrypt_and_verify
GcmMode.decrypt_and_verify
_create_gcm_cipher
Crypto\Cipher\_mode_gcm.py
<module Crypto.Cipher._mode_gcm>
('__class__',)
('self', 'factory', 'key', 'nonce', 'mac_len', 'cipher_params', 'ghash_c', 'hash_subkey', 'j0', 'fill', 'ghash_in', 'nonce_ctr', 'iv_ctr')
('self', 'subkey', 'ghash_c', 'result')
('lib', 'postfix', 'namedtuple', 'funcs', 'GHASH_Imp', 'imp_funcs', 'params')
('self', 's_tag')
('factory', 'kwargs', 'key', 'e', 'nonce', 'mac_len', 'use_clmul', 'ghash_c')
('api', 'lib', 'result')
('self', 'len_cache')
('self', 'data', 'filler', 'update_len')
('self', 'ciphertext', 'output')
('self', 'ciphertext', 'received_mac_tag', 'output', 'plaintext')
('self',)
('self', 'plaintext', 'output', 'ciphertext')
('self', 'plaintext', 'output')
('enums',)
('self', 'hex_mac_tag')
('self', 'assoc_data')
('self', 'block_data', 'result')
('self', 'received_mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Cipher._mode_ocb] ------------------------------
block_size
16
OCB mode is only available for ciphers that operate on 128 bits blocks
_copy_bytes
nonce
(1, 16, 1)
Nonce must be at most 15 bytes long
is_buffer
Nonce must be bytes, bytearray or memoryview
_mac_len
8
MAC tag must be between 8 and 16 bytes long
_mac_tag
b''
_cache_A
_cache_P
['update', 'encrypt', 'decrypt', 'digest', 'verify']
_next
key
128
bchr
1
b'\x00'
b'\x01'
bord
15
63
192
new
MODE_ECB
encrypt
struct
pack
15sB
[None, 15, None]
strxor
[None, 8, None]
[1, 9, None]
long_to_bytes
bytes_to_long
64
24
[8, None, None]
_create_base_cipher
Unknown keywords: 
VoidPointer
_state
_raw_ocb_lib
OCB_start_operation
get
c_size_t
address_of
Error %d while instantiating the OCB mode
SmartPointer
OCB_stop_operation
release
OCB_update
c_uint8_ptr
Error %d while computing MAC in OCB mode
update
update() can only be called immediately after initialization
['encrypt', 'decrypt', 'digest', 'verify', 'update']
min
too many values to unpack (expected 2)
_update
Process the associated data.

        If there is any associated data, the caller has to invoke
        this method one or more times, before using
        ``decrypt`` or ``encrypt``.

        By *associated data* it is meant any data (e.g. packet headers) that
        will not be encrypted and will be transmitted in the clear.
        However, the receiver shall still able to detect modifications.

        If there is no associated data, this method must not be called.

        The caller may split associated data in segments of any size, and
        invoke this method multiple times, each time with the next segment.

        :Parameters:
          assoc_data : bytes/bytearray/memoryview
            A piece of associated data.
        
create_string_buffer
Error %d while %sing in OCB mode
get_raw_buffer
_transcrypt_aligned
trans_func
trans_desc
encrypt() can only be called after initialization or an update()
digest
_transcrypt
OCB_encrypt
Encrypt the next piece of plaintext.

        After the entire plaintext has been passed (but before `digest`),
        you **must** call this method one last time with no arguments to collect
        the final piece of ciphertext.

        If possible, use the method `encrypt_and_digest` instead.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The next piece of data to encrypt or ``None`` to signify
            that encryption has finished and that any remaining ciphertext
            has to be produced.
        :Return:
            the ciphertext, as a byte string.
            Its length may not match the length of the *plaintext*.
        
decrypt
decrypt() can only be called after initialization or an update()
verify
OCB_decrypt
Decrypt the next piece of ciphertext.

        After the entire ciphertext has been passed (but before `verify`),
        you **must** call this method one last time with no arguments to collect
        the remaining piece of plaintext.

        If possible, use the method `decrypt_and_verify` instead.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The next piece of data to decrypt or ``None`` to signify
            that decryption has finished and that any remaining plaintext
            has to be produced.
        :Return:
            the plaintext, as a byte string.
            Its length may not match the length of the *ciphertext*.
        
(16,)
OCB_digest
Error %d while computing digest in OCB mode
digest() cannot be called now for this cipher
_compute_mac_tag
Compute the *binary* MAC tag.

        Call this method after the final `encrypt` (the one with no arguments)
        to obtain the MAC tag.

        The MAC tag is needed by the receiver to determine authenticity
        of the message.

        :Return: the MAC, as a byte string.
        

%02x
Compute the *printable* MAC tag.

        This method is like `digest`.

        :Return: the MAC, as a hexadecimal string.
        
verify() cannot be called now for this cipher
get_random_bytes
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Validate the *binary* MAC tag.

        Call this method after the final `decrypt` (the one with no arguments)
        to check if the message is authentic and valid.

        :Parameters:
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
unhexlify
Validate the *printable* MAC tag.

        This method is like `verify`.

        :Parameters:
          hex_mac_tag : string
            This is the *printable* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
Encrypt the message and create the MAC tag in one step.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The entire message to encrypt.
        :Return:
            a tuple with two byte strings:

            - the encrypted data
            - the MAC
        
Decrypted the message and verify its authenticity in one step.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The entire message to decrypt.
          received_mac_tag : byte string
            This is the *binary* MAC, as received from the sender.

        :Return: the decrypted data (byte string).
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
(15,)
pop
('mac_len', 16)
Keyword missing: 
OcbMode
Create a new block cipher, configured in OCB mode.

    :Parameters:
      factory : module
        A symmetric cipher module from `Crypto.Cipher`
        (like `Crypto.Cipher.AES`).

    :Keywords:
      nonce : bytes/bytearray/memoryview
        A  value that must never be reused for any other encryption.
        Its length can vary from 1 to 15 bytes.
        If not specified, a random 15 bytes long nonce is generated.

      mac_len : integer
        Length of the MAC, in bytes.
        It must be in the range ``[8..16]``.
        The default is 16 (128 bits).

    Any other keyword will be passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present).
    

Offset Codebook (OCB) mode.

OCB is Authenticated Encryption with Associated Data (AEAD) cipher mode
designed by Prof. Phillip Rogaway and specified in `RFC7253`_.

The algorithm provides both authenticity and privacy, it is very efficient,
it uses only one key and it can be used in online mode (so that encryption
or decryption can start before the end of the message is available).

This module implements the third and last variant of OCB (OCB3) and it only
works in combination with a 128-bit block symmetric cipher, like AES.

OCB is patented in US but `free licenses`_ exist for software implementations
meant for non-military purposes.

Example:
    >>> from Crypto.Cipher import AES
    >>> from Crypto.Random import get_random_bytes
    >>>
    >>> key = get_random_bytes(32)
    >>> cipher = AES.new(key, AES.MODE_OCB)
    >>> plaintext = b"Attack at dawn"
    >>> ciphertext, mac = cipher.encrypt_and_digest(plaintext)
    >>> # Deliver cipher.nonce, ciphertext and mac
    ...
    >>> cipher = AES.new(key, AES.MODE_OCB, nonce=nonce)
    >>> try:
    >>>     plaintext = cipher.decrypt_and_verify(ciphertext, mac)
    >>> except ValueError:
    >>>     print "Invalid message"
    >>> else:
    >>>     print plaintext

:undocumented: __package__

.. _RFC7253: http://www.rfc-editor.org/info/rfc7253
.. _free licenses: http://web.cs.ucdavis.edu/~rogaway/ocb/license.htm

__doc__
__file__
__spec__
origin
has_location
__cached__
0
binascii
('unhexlify',)
Crypto.Util.py3compat
('bord', '_copy_bytes', 'bchr')
Crypto.Util.number
('long_to_bytes', 'bytes_to_long')
Crypto.Util.strxor
('strxor',)
Crypto.Hash
('BLAKE2s',)
Crypto.Random
('get_random_bytes',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_buffer')
load_pycryptodome_raw_lib
('Crypto.Cipher._raw_ocb', '\n                                    int OCB_start_operation(void *cipher,\n                                        const uint8_t *offset_0,\n                                        size_t offset_0_len,\n                                        void **pState);\n                                    int OCB_encrypt(void *state,\n                                        const uint8_t *in,\n                                        uint8_t *out,\n                                        size_t data_len);\n                                    int OCB_decrypt(void *state,\n                                        const uint8_t *in,\n                                        uint8_t *out,\n                                        size_t data_len);\n                                    int OCB_update(void *state,\n                                        const uint8_t *in,\n                                        size_t data_len);\n                                    int OCB_digest(void *state,\n                                        uint8_t *tag,\n                                        size_t tag_len);\n                                    int OCB_stop_operation(void *state);\n                                    ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_ocb
__module__
Offset Codebook (OCB) mode.

    :undocumented: __init__
    
__qualname__
__init__
OcbMode.__init__
OcbMode._update
OcbMode.update
OcbMode._transcrypt_aligned
OcbMode._transcrypt
(None,)
OcbMode.encrypt
OcbMode.decrypt
OcbMode._compute_mac_tag
OcbMode.digest
hexdigest
OcbMode.hexdigest
OcbMode.verify
hexverify
OcbMode.hexverify
encrypt_and_digest
OcbMode.encrypt_and_digest
decrypt_and_verify
OcbMode.decrypt_and_verify
__orig_bases__
_create_ocb_cipher
Crypto\Cipher\_mode_ocb.py
<module Crypto.Cipher._mode_ocb>
('__class__',)
('self', 'factory', 'nonce', 'mac_len', 'cipher_params', 'params_without_key', 'key', 'taglen_mod128', 'bottom_bits', 'top_bits', 'ktop_cipher', 'ktop', 'stretch', 'offset_0', 'raw_cipher', 'result')
('self', 'mac_tag', 'result')
('factory', 'kwargs', 'nonce', 'mac_len', 'e')
('self', 'in_data', 'trans_func', 'trans_desc', 'out_data', 'prefix', 'filler', 'trans_len', 'result')
('self', 'in_data', 'in_data_len', 'trans_func', 'trans_desc', 'out_data', 'result')
('self', 'assoc_data', 'assoc_data_len', 'result')
('self', 'ciphertext')
('self', 'ciphertext', 'received_mac_tag', 'plaintext')
('self',)
('self', 'plaintext')
('self', 'hex_mac_tag')
('self', 'assoc_data', 'filler', 'seg', 'update_len')
('self', 'received_mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Cipher._mode_ofb] ------------------------------
VoidPointer
_state
raw_ofb_lib
OFB_start_operation
get
c_uint8_ptr
c_size_t
address_of
Error %d while instantiating the OFB mode
SmartPointer
OFB_stop_operation
release
block_size
_copy_bytes
iv
IV
encrypt
decrypt
_next
Create a new block cipher, configured in OFB mode.

        :Parameters:
          block_cipher : C pointer
            A smart pointer to the low-level block cipher instance.

          iv : bytes/bytearray/memoryview
            The initialization vector to use for encryption or decryption.
            It is as long as the cipher block.

            **The IV must be a nonce, to to be reused for any other
            message**. It shall be a nonce or a random value.

            Reusing the *IV* for encryptions performed with the same key
            compromises confidentiality.
        
encrypt() cannot be called after decrypt()
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
OFB_encrypt
plaintext
Error %d while encrypting in OFB mode
output
get_raw_buffer
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
          If ``output`` is ``None``, the ciphertext is returned as ``bytes``.
          Otherwise, ``None``.
        
decrypt() cannot be called after encrypt()
OFB_decrypt
ciphertext
Error %d while decrypting in OFB mode
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext is written to.
            If ``None``, the plaintext is returned.
        :Return:
          If ``output`` is ``None``, the plaintext is returned as ``bytes``.
          Otherwise, ``None``.
        
_create_base_cipher
pop
('IV', None)
('iv', None)
(None, None)
get_random_bytes
You must either use 'iv' or 'IV', not both
Incorrect IV length (it must be %d bytes long)
Unknown parameters for OFB: %s
OfbMode
Instantiate a cipher object that performs OFB encryption/decryption.

    :Parameters:
      factory : module
        The underlying block cipher, a module from ``Crypto.Cipher``.

    :Keywords:
      iv : bytes/bytearray/memoryview
        The IV to use for OFB.

      IV : bytes/bytearray/memoryview
        Alias for ``iv``.

    Any other keyword will be passed to the underlying block cipher.
    See the relevant documentation for details (at least ``key`` will need
    to be present).
    

Output Feedback (CFB) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util.py3compat
('_copy_bytes',)
0
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'create_string_buffer', 'get_raw_buffer', 'SmartPointer', 'c_size_t', 'c_uint8_ptr', 'is_writeable_buffer')
load_pycryptodome_raw_lib
Crypto.Random
('get_random_bytes',)
('Crypto.Cipher._raw_ofb', '\n                        int OFB_start_operation(void *cipher,\n                                                const uint8_t iv[],\n                                                size_t iv_len,\n                                                void **pResult);\n                        int OFB_encrypt(void *ofbState,\n                                        const uint8_t *in,\n                                        uint8_t *out,\n                                        size_t data_len);\n                        int OFB_decrypt(void *ofbState,\n                                        const uint8_t *in,\n                                        uint8_t *out,\n                                        size_t data_len);\n                        int OFB_stop_operation(void *state);\n                        ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_ofb
__module__
*Output FeedBack (OFB)*.

    This mode is very similar to CBC, but it
    transforms the underlying block cipher into a stream cipher.

    The keystream is the iterated block encryption of the
    previous ciphertext block.

    An Initialization Vector (*IV*) is required.

    See `NIST SP800-38A`_ , Section 6.4.

    .. _`NIST SP800-38A` : http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf

    :undocumented: __init__
    
__qualname__
__init__
OfbMode.__init__
(None,)
OfbMode.encrypt
OfbMode.decrypt
__orig_bases__
_create_ofb_cipher
Crypto\Cipher\_mode_ofb.py
<module Crypto.Cipher._mode_ofb>
('__class__',)
('self', 'block_cipher', 'iv', 'result')
('factory', 'kwargs', 'cipher_state', 'iv', 'IV')
('self', 'ciphertext', 'output', 'plaintext', 'result')
('self', 'plaintext', 'output', 'ciphertext', 'result')


------------------------------ [modulecode_Crypto.Cipher._mode_openpgp] ------------------------------
block_size
_done_first_block
new
MODE_CFB
IV
b'\x00'
segment_size
8
_copy_bytes
encrypt
[-2, None, None]
_encrypted_IV
2
decrypt
[None, -2, None]
Length of IV must be %d or %d bytes for MODE_OPENPGP
iv
_cipher
Encrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have encrypted a message
        you cannot encrypt (or decrypt) another message using the same
        object.

        The data to encrypt can be broken up in two or
        more pieces and `encrypt` can be called multiple times.

        That is, the statement:

            >>> c.encrypt(a) + c.encrypt(b)

        is equivalent to:

             >>> c.encrypt(a+b)

        This function does not add any padding to the plaintext.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.

        :Return:
            the encrypted data, as a byte string.
            It is as long as *plaintext* with one exception:
            when encrypting the first message chunk,
            the encypted IV is prepended to the returned ciphertext.
        
Decrypt data with the key and the parameters set at initialization.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        The data to decrypt can be broken up in two or
        more pieces and `decrypt` can be called multiple times.

        That is, the statement:

            >>> c.decrypt(a) + c.decrypt(b)

        is equivalent to:

             >>> c.decrypt(a+b)

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.

        :Return: the decrypted data (byte string).
        
pop
('iv', None)
(None, None)
get_random_bytes
You must either use 'iv' or 'IV', not both
('key',)
Missing component: 
OpenPgpMode
factory
Create a new block cipher, configured in OpenPGP mode.

    :Parameters:
      factory : module
        The module.

    :Keywords:
      key : bytes/bytearray/memoryview
        The secret key to use in the symmetric cipher.

      IV : bytes/bytearray/memoryview
        The initialization vector to use for encryption or decryption.

        For encryption, the IV must be as long as the cipher block size.

        For decryption, it must be 2 bytes longer (it is actually the
        *encrypted* IV which was prefixed to the ciphertext).
    

OpenPGP mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
Crypto.Util.py3compat
('_copy_bytes',)
0
Crypto.Random
('get_random_bytes',)
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_openpgp
__module__
OpenPGP mode.

    This mode is a variant of CFB, and it is only used in PGP and
    OpenPGP_ applications. If in doubt, use another mode.

    An Initialization Vector (*IV*) is required.

    Unlike CFB, the *encrypted* IV (not the IV itself) is
    transmitted to the receiver.

    The IV is a random data block. For legacy reasons, two of its bytes are
    duplicated to act as a checksum for the correctness of the key, which is now
    known to be insecure and is ignored. The encrypted IV is therefore 2 bytes
    longer than the clean IV.

    .. _OpenPGP: http://tools.ietf.org/html/rfc4880

    :undocumented: __init__
    
__qualname__
__init__
OpenPgpMode.__init__
OpenPgpMode.encrypt
OpenPgpMode.decrypt
__orig_bases__
_create_openpgp_cipher
Crypto\Cipher\_mode_openpgp.py
<module Crypto.Cipher._mode_openpgp>
('__class__',)
('self', 'factory', 'key', 'iv', 'cipher_params', 'IV_cipher')
('factory', 'kwargs', 'iv', 'IV', 'key', 'e')
('self', 'ciphertext')
('self', 'plaintext', 'res')


------------------------------ [modulecode_Crypto.Cipher._mode_siv] ------------------------------
block_size
_factory
_cipher_params
(32, 48, 64)
Incorrect key length (%d bytes)
is_buffer
When provided, the nonce must be bytes, bytearray or memoryview
When provided, the nonce must be non-empty
_copy_bytes
nonce
2
_mac_tag
_S2V
('ciphermod', 'cipher_params')
_kdf
_subkey_cipher
new
MODE_ECB
['update', 'encrypt', 'decrypt', 'digest', 'verify']
_next
bytes_to_long
340282366920938463454151235392765951999
MODE_CTR
initial_value
b''
Create a new CTR cipher from V in SIV mode
update
update() can only be called immediately after initialization
Protect one associated data component

        For SIV, the associated data is a sequence (*vector*) of non-empty
        byte strings (*components*).

        This method consumes the next component. It must be called
        once for each of the components that constitue the associated data.

        Note that the components have clear boundaries, so that:

            >>> cipher.update(b"builtin")
            >>> cipher.update(b"securely")

        is not equivalent to:

            >>> cipher.update(b"built")
            >>> cipher.update(b"insecurely")

        If there is no associated data, this method must not be called.

        :Parameters:
          component : bytes/bytearray/memoryview
            The next associated data component.
        
encrypt() not allowed for SIV mode. Use encrypt_and_digest() instead.

        For SIV, encryption and MAC authentication must take place at the same
        point. This method shall not be used.

        Use `encrypt_and_digest` instead.
        
decrypt() not allowed for SIV mode. Use decrypt_and_verify() instead.

        For SIV, decryption and verification must take place at the same
        point. This method shall not be used.

        Use `decrypt_and_verify` instead.
        
digest
digest() cannot be called when decrypting or validating a message
derive
Compute the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method returns the MAC that shall be sent to the receiver,
        together with the ciphertext.

        :Return: the MAC, as a byte string.
        

%02x
bord
Compute the *printable* MAC tag.

        This method is like `digest`.

        :Return: the MAC, as a hexadecimal string.
        
verify
verify() cannot be called when encrypting a message
get_random_bytes
(16,)
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Validate the *binary* MAC tag.

        The caller invokes this function at the very end.

        This method checks if the decrypted message is indeed valid
        (that is, if the key is correct) and it has not been
        tampered with while in transit.

        :Parameters:
          received_mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
unhexlify
Validate the *printable* MAC tag.

        This method is like `verify`.

        :Parameters:
          hex_mac_tag : string
            This is the *printable* MAC, as received from the sender.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
encrypt
encrypt() can only be called after initialization or an update()
_create_ctr_cipher
('output',)
Perform encrypt() and digest() in one step.

        :Parameters:
          plaintext : bytes/bytearray/memoryview
            The piece of data to encrypt.
        :Keywords:
          output : bytearray/memoryview
            The location where the ciphertext must be written to.
            If ``None``, the ciphertext is returned.
        :Return:
            a tuple with two items:

            - the ciphertext, as ``bytes``
            - the MAC tag, as ``bytes``

            The first item becomes ``None`` when the ``output`` parameter
            specified a location for the result.
        
decrypt
decrypt() can only be called after initialization or an update()
_cipher
Perform decryption and verification in one step.

        A cipher object is stateful: once you have decrypted a message
        you cannot decrypt (or encrypt) another message with the same
        object.

        You cannot reuse an object for encrypting
        or decrypting other data with the same key.

        This function does not remove any padding from the plaintext.

        :Parameters:
          ciphertext : bytes/bytearray/memoryview
            The piece of data to decrypt.
            It can be of any length.
          mac_tag : bytes/bytearray/memoryview
            This is the *binary* MAC, as received from the sender.
        :Keywords:
          output : bytearray/memoryview
            The location where the plaintext must be written to.
            If ``None``, the plaintext is returned.
        :Return: the plaintext as ``bytes`` or ``None`` when the ``output``
            parameter specified a location for the result.
        :Raises ValueError:
            if the MAC does not match. The message has been tampered with
            or the key is incorrect.
        
key
Missing parameter: 
pop
('nonce', None)
SivMode
Create a new block cipher, configured in
    Synthetic Initializaton Vector (SIV) mode.

    :Parameters:

      factory : object
        A symmetric cipher module from `Crypto.Cipher`
        (like `Crypto.Cipher.AES`).

    :Keywords:

      key : bytes/bytearray/memoryview
        The secret key to use in the symmetric cipher.
        It must be 32, 48 or 64 bytes long.
        If AES is the chosen cipher, the variants *AES-128*,
        *AES-192* and or *AES-256* will be used internally.

      nonce : bytes/bytearray/memoryview
        For deterministic encryption, it is not present.

        Otherwise, it is a value that must never be reused
        for encrypting message under this key.

        There are no restrictions on its length,
        but it is recommended to use at least 16 bytes.
    

Synthetic Initialization Vector (SIV) mode.

__doc__
__file__
__spec__
origin
has_location
__cached__
__all__
binascii
('hexlify', 'unhexlify')
0
hexlify
Crypto.Util.py3compat
('bord', '_copy_bytes')
Crypto.Util._raw_api
('is_buffer',)
Crypto.Util.number
('long_to_bytes', 'bytes_to_long')
long_to_bytes
Crypto.Protocol.KDF
('_S2V',)
Crypto.Hash
('BLAKE2s',)
Crypto.Random
('get_random_bytes',)
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Cipher._mode_siv
__module__
Synthetic Initialization Vector (SIV).

    This is an Authenticated Encryption with Associated Data (`AEAD`_) mode.
    It provides both confidentiality and authenticity.

    The header of the message may be left in the clear, if needed, and it will
    still be subject to authentication. The decryption step tells the receiver
    if the message comes from a source that really knowns the secret key.
    Additionally, decryption detects if any part of the message - including the
    header - has been modified or corrupted.

    Unlike other AEAD modes such as CCM, EAX or GCM, accidental reuse of a
    nonce is not catastrophic for the confidentiality of the message. The only
    effect is that an attacker can tell when the same plaintext (and same
    associated data) is protected with the same key.

    The length of the MAC is fixed to the block size of the underlying cipher.
    The key size is twice the length of the key of the underlying cipher.

    This mode is only available for AES ciphers.

    +--------------------+---------------+-------------------+
    |      Cipher        | SIV MAC size  |   SIV key length  |
    |                    |    (bytes)    |     (bytes)       |
    +====================+===============+===================+
    |    AES-128         |      16       |        32         |
    +--------------------+---------------+-------------------+
    |    AES-192         |      16       |        48         |
    +--------------------+---------------+-------------------+
    |    AES-256         |      16       |        64         |
    +--------------------+---------------+-------------------+

    See `RFC5297`_ and the `original paper`__.

    .. _RFC5297: https://tools.ietf.org/html/rfc5297
    .. _AEAD: http://blog.cryptographyengineering.com/2012/05/how-to-choose-authenticated-encryption.html
    .. __: http://www.cs.ucdavis.edu/~rogaway/papers/keywrap.pdf

    :undocumented: __init__
    
__qualname__
__init__
SivMode.__init__
SivMode._create_ctr_cipher
SivMode.update
SivMode.encrypt
SivMode.decrypt
SivMode.digest
hexdigest
SivMode.hexdigest
SivMode.verify
hexverify
SivMode.hexverify
(None,)
encrypt_and_digest
SivMode.encrypt_and_digest
decrypt_and_verify
SivMode.decrypt_and_verify
__orig_bases__
_create_siv_cipher
Crypto\Cipher\_mode_siv.py
<module Crypto.Cipher._mode_siv>
('__class__',)
('self', 'factory', 'key', 'nonce', 'kwargs', 'subkey_size')
('self', 'v', 'v_int', 'q')
('factory', 'kwargs', 'key', 'e', 'nonce')
('self', 'ciphertext')
('self', 'ciphertext', 'mac_tag', 'output', 'plaintext')
('self',)
('self', 'plaintext')
('self', 'plaintext', 'output', 'cipher')
('self', 'hex_mac_tag')
('self', 'component')
('self', 'received_mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Cipher] ------------------------------
key
_modes
pop
('add_aes_modes', False)
_extra_modes
modes
Mode not supported
(8, 9, 10, 11, 12)
Too many arguments for this mode
0
nonce
(2, 3, 5, 7)
IV
6
1
IV is not meaningful for the ECB mode
__doc__
__file__
path
dirname
join
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
Cipher
('NUITKA_PACKAGE_Crypto_Cipher', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
os
Crypto.Cipher._mode_ecb
('_create_ecb_cipher',)
_create_ecb_cipher
Crypto.Cipher._mode_cbc
('_create_cbc_cipher',)
_create_cbc_cipher
Crypto.Cipher._mode_cfb
('_create_cfb_cipher',)
_create_cfb_cipher
Crypto.Cipher._mode_ofb
('_create_ofb_cipher',)
_create_ofb_cipher
Crypto.Cipher._mode_ctr
('_create_ctr_cipher',)
_create_ctr_cipher
Crypto.Cipher._mode_openpgp
('_create_openpgp_cipher',)
_create_openpgp_cipher
Crypto.Cipher._mode_ccm
('_create_ccm_cipher',)
_create_ccm_cipher
Crypto.Cipher._mode_eax
('_create_eax_cipher',)
_create_eax_cipher
Crypto.Cipher._mode_siv
('_create_siv_cipher',)
_create_siv_cipher
Crypto.Cipher._mode_gcm
('_create_gcm_cipher',)
_create_gcm_cipher
Crypto.Cipher._mode_ocb
('_create_ocb_cipher',)
_create_ocb_cipher
2
3
5
7
9
8
10
11
12
_create_cipher
Crypto\Cipher\__init__.py
<module Crypto.Cipher>
('factory', 'key', 'mode', 'args', 'kwargs', 'modes')


------------------------------ [modulecode_Crypto.Hash.BLAKE2s] ------------------------------
digest_size
_update_after_digest
_digest_done
(16, 20, 28, 32)
1.3.6.1.4.1.1722.12.2.2.
oid
VoidPointer
_raw_blake2s_lib
blake2s_init
address_of
c_uint8_ptr
c_size_t
Error %d while instantiating BLAKE2s
SmartPointer
get
blake2s_destroy
_state
update
You can only call 'digest' or 'hexdigest' on this object
blake2s_update
Error %d while hashing BLAKE2s data
Continue hashing of a message by consuming the next chunk of data.

        Args:
            data (byte string/byte array/memoryview): The next chunk of the message being hashed.
        
create_string_buffer
(32,)
blake2s_digest
Error %d while creating BLAKE2s digest
get_raw_buffer
Return the **binary** (non-printable) digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        

digest
%02x
bord
Return the **printable** digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
get_random_bytes
(16,)
new
160
('digest_bits', 'key', 'data')
MAC check failed
Verify that a given **binary** MAC (computed by another party)
        is valid.

        Args:
          mac_tag (byte string/byte array/memoryview): the expected MAC of the message.

        Raises:
            ValueError: if the MAC does not match. It means that the message
                has been tampered with or that the MAC key is incorrect.
        
verify
unhexlify
tobytes
Verify that a given **printable** MAC (computed by another party)
        is valid.

        Args:
            hex_mac_tag (string): the expected MAC of the message, as a hexadecimal string.

        Raises:
            ValueError: if the MAC does not match. It means that the message
                has been tampered with or that the MAC key is incorrect.
        
digest_bytes
digest_bits
kwargs
Return a new instance of a BLAKE2s hash object.
        See :func:`new`.
        
data
pop
('update_after_digest', False)
('digest_bytes', None)
('digest_bits', None)
Only one digest parameter must be provided
(None, None)
32
1
'digest_bytes' not in range 1..32
8
256
'digest_bits' not in range 8..256, with steps of 8
('key', b'')
BLAKE2s key cannot exceed 32 bytes
Unknown parameters: 
BLAKE2s_Hash
Create a new hash object.

    Args:
        data (byte string/byte array/memoryview):
            Optional. The very first chunk of the message to hash.
            It is equivalent to an early call to :meth:`BLAKE2s_Hash.update`.
        digest_bytes (integer):
            Optional. The size of the digest, in bytes (1 to 32). Default is 32.
        digest_bits (integer):
            Optional and alternative to ``digest_bytes``.
            The size of the digest, in bits (8 to 256, in steps of 8).
            Default is 256.
        key (byte string):
            Optional. The key to use to compute the MAC (1 to 64 bytes).
            If not specified, no key will be used.
        update_after_digest (boolean):
            Optional. By default, a hash object cannot be updated anymore after
            the digest is computed. When this flag is ``True``, such check
            is no longer enforced.

    Returns:
        A :class:`BLAKE2s_Hash` hash object
    
__doc__
__file__
__spec__
origin
has_location
__cached__
binascii
('unhexlify',)
0
Crypto.Util.py3compat
('bord', 'tobytes')
Crypto.Random
('get_random_bytes',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'SmartPointer', 'create_string_buffer', 'get_raw_buffer', 'c_size_t', 'c_uint8_ptr')
load_pycryptodome_raw_lib
('Crypto.Hash._BLAKE2s', '\n                        int blake2s_init(void **state,\n                                         const uint8_t *key,\n                                         size_t key_size,\n                                         size_t digest_size);\n                        int blake2s_destroy(void *state);\n                        int blake2s_update(void *state,\n                                           const uint8_t *buf,\n                                           size_t len);\n                        int blake2s_digest(const void *state,\n                                           uint8_t digest[32]);\n                        int blake2s_copy(const void *src, void *dst);\n                        ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.BLAKE2s
__module__
A BLAKE2s hash object.
    Do not instantiate directly. Use the :func:`new` function.

    :ivar oid: ASN.1 Object ID
    :vartype oid: string

    :ivar block_size: the size in bytes of the internal message block,
                      input to the compression function
    :vartype block_size: integer

    :ivar digest_size: the size in bytes of the resulting hash
    :vartype digest_size: integer
    
__qualname__
block_size
__init__
BLAKE2s_Hash.__init__
BLAKE2s_Hash.update
BLAKE2s_Hash.digest
hexdigest
BLAKE2s_Hash.hexdigest
BLAKE2s_Hash.verify
hexverify
BLAKE2s_Hash.hexverify
BLAKE2s_Hash.new
__orig_bases__
Crypto\Hash\BLAKE2s.py
<module Crypto.Hash.BLAKE2s>
('__class__',)
('self', 'data', 'key', 'digest_bytes', 'update_after_digest', 'state', 'result')
('self', 'bfr', 'result')
('self',)
('self', 'hex_mac_tag')
('kwargs', 'data', 'update_after_digest', 'digest_bytes', 'digest_bits', 'key')
('self', 'kwargs')
('self', 'data', 'result')
('self', 'mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Hash.CMAC] ------------------------------
bytes_to_long
1
long_to_bytes
digest_size
_copy_bytes
_key
_factory
_cipher_params
block_size
_block_size
_mac_tag
_update_after_digest
8
27
16777216
_max_size
16
135
4503599627370496
CMAC requires a cipher with a block size of 8 or 16 bytes, not %d
b'\x00'
new
MODE_ECB
_ecb
encrypt
bord
0
128
_shift_bytes
_k1
_k2
MODE_CBC
_cbc
_cache
_cache_n
_last_ct
_last_pt
_data_size
update
update() cannot be called after digest() or verify()
min
_update
msg
bs
Authenticate the next chunk of message.

        Args:
            data (byte string/byte array/memoryview): The next chunk of data
        
2
strxor
Update a block aligned to the block boundary
__new__
CMAC
copy
[None, None, None]
Return a copy ("clone") of the CMAC object.

        The copy will have the same internal state as the original CMAC
        object.
        This can be used to efficiently compute the MAC tag of byte
        strings that share a common initial substring.

        :return: An :class:`CMAC`
        
MAC is unsafe for this message
b'\x80'
Return the **binary** (non-printable) MAC tag of the message
        that has been authenticated so far.

        :return: The MAC tag, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        

digest
%02x
Return the **printable** MAC tag of the message authenticated so far.

        :return: The MAC tag, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
get_random_bytes
(16,)
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Verify that a given **binary** MAC (computed by another party)
        is valid.

        Args:
          mac_tag (byte string/byte array/memoryview): the expected MAC of the message.

        Raises:
            ValueError: if the MAC does not match. It means that the message
                has been tampered with or that the MAC key is incorrect.
        
verify
unhexlify
tobytes
ciphermod must be specified (try AES)
4
MAC tag length must be at least 4 bytes long
ciphermod
MAC tag length cannot be larger than a cipher block (%d) bytes
Create a new MAC object.

    Args:
        key (byte string/byte array/memoryview):
            key for the CMAC object.
            The key must be valid for the underlying cipher algorithm.
            For instance, it must be 16 bytes long for AES-128.
        ciphermod (module):
            A cipher module from :mod:`Crypto.Cipher`.
            The cipher's block size has to be 128 bits,
            like :mod:`Crypto.Cipher.AES`, to reduce the probability
            of collisions.
        msg (byte string/byte array/memoryview):
            Optional. The very first chunk of the message to authenticate.
            It is equivalent to an early call to `CMAC.update`. Optional.
        cipher_params (dict):
            Optional. A set of parameters to use when instantiating a cipher
            object.
        mac_len (integer):
            Length of the MAC, in bytes.
            It must be at least 4 bytes long.
            The default (and recommended) length matches the size of a cipher block.
        update_after_digest (boolean):
            Optional. By default, a hash object cannot be updated anymore after
            the digest is computed. When this flag is ``True``, such check
            is no longer enforced.
    Returns:
        A :class:`CMAC` object
    
__doc__
__file__
__spec__
origin
has_location
__cached__
binascii
('unhexlify',)
Crypto.Hash
('BLAKE2s',)
Crypto.Util.strxor
('strxor',)
Crypto.Util.number
('long_to_bytes', 'bytes_to_long')
Crypto.Util.py3compat
('bord', 'tobytes', '_copy_bytes')
Crypto.Random
('get_random_bytes',)
(0,)
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.CMAC
__module__
A CMAC hash object.
    Do not instantiate directly. Use the :func:`new` function.

    :ivar digest_size: the size in bytes of the resulting MAC tag
    :vartype digest_size: integer
    
__qualname__
__init__
CMAC.__init__
CMAC.update
CMAC._update
CMAC.copy
CMAC.digest
hexdigest
CMAC.hexdigest
CMAC.verify
hexverify
CMAC.hexverify
__orig_bases__
(None, None, None, None, False)
Crypto\Hash\CMAC.py
<module Crypto.Hash.CMAC>
('__class__',)
('self', 'key', 'msg', 'ciphermod', 'cipher_params', 'mac_len', 'update_after_digest', 'bs', 'const_Rb', 'zero_block', 'L')
('bs', 'xor_lsb', 'num')
('self', 'data_block', 'bs', 'ct', 'second_last')
('self', 'obj')
('self', 'bs', 'pt', 'partial')
('self',)
('self', 'hex_mac_tag')
('key', 'msg', 'ciphermod', 'cipher_params', 'mac_len', 'update_after_digest')
('self', 'msg', 'bs', 'filler', 'remain')
('self', 'mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Hash.HMAC] ------------------------------
MD5
b''
digest_size
_digestmod
tobytes
block_size
b'\x00'
new
digest
Hash type incompatible to HMAC
strxor
b'6'
_inner
update
b'\\'
_outer
Authenticate the next chunk of message.

        Args:
            data (byte string/byte array/memoryview): The next chunk of data
        
_pbkdf2_hmac_assist
Carry out the expensive inner loop for PBKDF2-HMAC
HMAC
(b'fake key',)
('digestmod',)
copy
Return a copy ("clone") of the HMAC object.

        The copy will have the same internal state as the original HMAC
        object.
        This can be used to efficiently compute the MAC tag of byte
        strings that share a common initial substring.

        :return: An :class:`HMAC`
        
Return the **binary** (non-printable) MAC tag of the message
        authenticated so far.

        :return: The MAC tag digest, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        
get_random_bytes
(16,)
BLAKE2s
160
('digest_bits', 'key', 'data')
MAC check failed
Verify that a given **binary** MAC (computed by another party)
        is valid.

        Args:
          mac_tag (byte string/byte string/memoryview): the expected MAC of the message.

        Raises:
            ValueError: if the MAC does not match. It means that the message
                has been tampered with or that the MAC key is incorrect.
        

%02x
bord
Return the **printable** MAC tag of the message authenticated so far.

        :return: The MAC tag, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
verify
unhexlify
Verify that a given **printable** MAC (computed by another party)
        is valid.

        Args:
            hex_mac_tag (string): the expected MAC of the message,
                as a hexadecimal string.

        Raises:
            ValueError: if the MAC does not match. It means that the message
                has been tampered with or that the MAC key is incorrect.
        
Create a new MAC object.

    Args:
        key (bytes/bytearray/memoryview):
            key for the MAC object.
            It must be long enough to match the expected security level of the
            MAC.
        msg (bytes/bytearray/memoryview):
            Optional. The very first chunk of the message to authenticate.
            It is equivalent to an early call to :meth:`HMAC.update`.
        digestmod (module):
            The hash to use to implement the HMAC.
            Default is :mod:`Crypto.Hash.MD5`.

    Returns:
        An :class:`HMAC` object
    
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util.py3compat
('bord', 'tobytes')
0
binascii
('unhexlify',)
Crypto.Hash
('MD5',)
('BLAKE2s',)
Crypto.Util.strxor
('strxor',)
Crypto.Random
('get_random_bytes',)
__all__
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.HMAC
__module__
An HMAC hash object.
    Do not instantiate directly. Use the :func:`new` function.

    :ivar digest_size: the size in bytes of the resulting MAC tag
    :vartype digest_size: integer
    
__qualname__
(b'', None)
__init__
HMAC.__init__
HMAC.update
HMAC._pbkdf2_hmac_assist
HMAC.copy
HMAC.digest
HMAC.verify
hexdigest
HMAC.hexdigest
hexverify
HMAC.hexverify
__orig_bases__
Crypto\Hash\HMAC.py
<module Crypto.Hash.HMAC>
('__class__',)
('self', 'key', 'msg', 'digestmod', 'key_0', 'hash_k', 'key_0_ipad', 'key_0_opad')
('self', 'first_digest', 'iterations', 'result')
('self', 'new_hmac')
('self', 'frozen_outer_hash')
('self',)
('self', 'hex_mac_tag')
('key', 'msg', 'digestmod')
('self', 'msg')
('self', 'mac_tag', 'secret', 'mac1', 'mac2')

------------------------------ [modulecode_Crypto.Hash.MD5] ------------------------------
VoidPointer
_raw_md5_lib
MD5_init
address_of
ValueError
Error %d while instantiating MD5
SmartPointer
get
MD5_destroy
_state
update
MD5_update
c_uint8_ptr
c_size_t
len
Continue hashing of a message by consuming the next chunk of data.

        Args:
            data (byte string/byte array/memoryview): The next chunk of the message being hashed.
        
create_string_buffer
digest_size
MD5_digest
get_raw_buffer
Return the **binary** (non-printable) digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        

digest
%02x
bord
Return the **printable** digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
MD5Hash
MD5_copy
Error %d while copying MD5
Return a copy ("clone") of the hash object.

        The copy will have the same internal state as the original hash
        object.
        This can be used to efficiently compute the digests of strings that
        share a common initial substring.

        :return: A hash object of the same type
        
Create a fresh SHA-1 hash object.
new
Create a new hash object.

    :parameter data:
        Optional. The very first chunk of the message to hash.
        It is equivalent to an early call to :meth:`MD5Hash.update`.
    :type data: byte string/byte array/memoryview

    :Return: A :class:`MD5Hash` hash object
    
0
MD5_pbkdf2_hmac_assist
Error %d with PBKDF2-HMAC assis for MD5
Compute the expensive inner loop in PBKDF-HMAC.
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util.py3compat
('*',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'SmartPointer', 'create_string_buffer', 'get_raw_buffer', 'c_size_t', 'c_uint8_ptr')
load_pycryptodome_raw_lib
('Crypto.Hash._MD5', '\n                        #define MD5_DIGEST_SIZE 16\n\n                        int MD5_init(void **shaState);\n                        int MD5_destroy(void *shaState);\n                        int MD5_update(void *hs,\n                                          const uint8_t *buf,\n                                          size_t len);\n                        int MD5_digest(const void *shaState,\n                                          uint8_t digest[MD5_DIGEST_SIZE]);\n                        int MD5_copy(const void *src, void *dst);\n\n                        int MD5_pbkdf2_hmac_assist(const void *inner,\n                                            const void *outer,\n                                            const uint8_t first_digest[MD5_DIGEST_SIZE],\n                                            uint8_t final_digest[MD5_DIGEST_SIZE],\n                                            size_t iterations);\n                        ')
object
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.MD5
__module__
A MD5 hash object.
    Do not instantiate directly.
    Use the :func:`new` function.

    :ivar oid: ASN.1 Object ID
    :vartype oid: string

    :ivar block_size: the size in bytes of the internal message block,
                      input to the compression function
    :vartype block_size: integer

    :ivar digest_size: the size in bytes of the resulting hash
    :vartype digest_size: integer
    
__qualname__
16
64
block_size
1.2.840.113549.2.5
oid
(None,)
__init__
MD5Hash.__init__
MD5Hash.update
MD5Hash.digest
hexdigest
MD5Hash.hexdigest
copy
MD5Hash.copy
MD5Hash.new
__orig_bases__
_pbkdf2_hmac_assist
Crypto\Hash\MD5.py
<module Crypto.Hash.MD5>
('__class__',)
('self', 'data', 'state', 'result')
('inner', 'outer', 'first_digest', 'iterations', 'bfr', 'result')
('self', 'clone', 'result')
('self', 'bfr', 'result')
('self',)
('data',)
('self', 'data')
('self', 'data', 'result')

------------------------------ [modulecode_Crypto.Hash.SHA1] ------------------------------
VoidPointer
_raw_sha1_lib
SHA1_init
address_of
ValueError
Error %d while instantiating SHA1
SmartPointer
get
SHA1_destroy
_state
update
SHA1_update
c_uint8_ptr
c_size_t
len
Continue hashing of a message by consuming the next chunk of data.

        Args:
            data (byte string/byte array/memoryview): The next chunk of the message being hashed.
        
create_string_buffer
digest_size
SHA1_digest
get_raw_buffer
Return the **binary** (non-printable) digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        

digest
%02x
bord
Return the **printable** digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
SHA1Hash
SHA1_copy
Error %d while copying SHA1
Return a copy ("clone") of the hash object.

        The copy will have the same internal state as the original hash
        object.
        This can be used to efficiently compute the digests of strings that
        share a common initial substring.

        :return: A hash object of the same type
        
Create a fresh SHA-1 hash object.
new
Create a new hash object.

    :parameter data:
        Optional. The very first chunk of the message to hash.
        It is equivalent to an early call to :meth:`SHA1Hash.update`.
    :type data: byte string/byte array/memoryview

    :Return: A :class:`SHA1Hash` hash object
    
0
SHA1_pbkdf2_hmac_assist
Error %d with PBKDF2-HMAC assis for SHA1
Compute the expensive inner loop in PBKDF-HMAC.
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util.py3compat
('*',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'SmartPointer', 'create_string_buffer', 'get_raw_buffer', 'c_size_t', 'c_uint8_ptr')
load_pycryptodome_raw_lib
('Crypto.Hash._SHA1', '\n                        #define SHA1_DIGEST_SIZE 20\n\n                        int SHA1_init(void **shaState);\n                        int SHA1_destroy(void *shaState);\n                        int SHA1_update(void *hs,\n                                          const uint8_t *buf,\n                                          size_t len);\n                        int SHA1_digest(const void *shaState,\n                                          uint8_t digest[SHA1_DIGEST_SIZE]);\n                        int SHA1_copy(const void *src, void *dst);\n\n                        int SHA1_pbkdf2_hmac_assist(const void *inner,\n                                            const void *outer,\n                                            const uint8_t first_digest[SHA1_DIGEST_SIZE],\n                                            uint8_t final_digest[SHA1_DIGEST_SIZE],\n                                            size_t iterations);\n                        ')
object
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.SHA1
__module__
A SHA-1 hash object.
    Do not instantiate directly.
    Use the :func:`new` function.

    :ivar oid: ASN.1 Object ID
    :vartype oid: string

    :ivar block_size: the size in bytes of the internal message block,
                      input to the compression function
    :vartype block_size: integer

    :ivar digest_size: the size in bytes of the resulting hash
    :vartype digest_size: integer
    
__qualname__
20
64
block_size
1.3.14.3.2.26
oid
(None,)
__init__
SHA1Hash.__init__
SHA1Hash.update
SHA1Hash.digest
hexdigest
SHA1Hash.hexdigest
copy
SHA1Hash.copy
SHA1Hash.new
__orig_bases__
_pbkdf2_hmac_assist
Crypto\Hash\SHA1.py
<module Crypto.Hash.SHA1>
('__class__',)
('self', 'data', 'state', 'result')
('inner', 'outer', 'first_digest', 'iterations', 'bfr', 'result')
('self', 'clone', 'result')
('self', 'bfr', 'result')
('self',)
('data',)
('self', 'data')
('self', 'data', 'result')

------------------------------ [modulecode_Crypto.Hash.SHA256] ------------------------------
VoidPointer
_raw_sha256_lib
SHA256_init
address_of
Error %d while instantiating SHA256
SmartPointer
get
SHA256_destroy
_state
update
SHA256_update
c_uint8_ptr
c_size_t
Error %d while hashing data with SHA256
Continue hashing of a message by consuming the next chunk of data.

        Args:
            data (byte string/byte array/memoryview): The next chunk of the message being hashed.
        
create_string_buffer
digest_size
SHA256_digest
Error %d while making SHA256 digest
get_raw_buffer
Return the **binary** (non-printable) digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Binary form.
        :rtype: byte string
        

digest
%02x
bord
Return the **printable** digest of the message that has been hashed so far.

        :return: The hash digest, computed over the data processed so far.
                 Hexadecimal encoded.
        :rtype: string
        
SHA256Hash
SHA256_copy
Error %d while copying SHA256
Return a copy ("clone") of the hash object.

        The copy will have the same internal state as the original hash
        object.
        This can be used to efficiently compute the digests of strings that
        share a common initial substring.

        :return: A hash object of the same type
        
Create a fresh SHA-256 hash object.
new
Create a new hash object.

    :parameter data:
        Optional. The very first chunk of the message to hash.
        It is equivalent to an early call to :meth:`SHA256Hash.update`.
    :type data: byte string/byte array/memoryview

    :Return: A :class:`SHA256Hash` hash object
    
0
SHA256_pbkdf2_hmac_assist
Error %d with PBKDF2-HMAC assist for SHA256
Compute the expensive inner loop in PBKDF-HMAC.
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util.py3compat
('bord',)
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'VoidPointer', 'SmartPointer', 'create_string_buffer', 'get_raw_buffer', 'c_size_t', 'c_uint8_ptr')
load_pycryptodome_raw_lib
('Crypto.Hash._SHA256', '\n                        int SHA256_init(void **shaState);\n                        int SHA256_destroy(void *shaState);\n                        int SHA256_update(void *hs,\n                                          const uint8_t *buf,\n                                          size_t len);\n                        int SHA256_digest(const void *shaState,\n                                          uint8_t *digest,\n                                          size_t digest_size);\n                        int SHA256_copy(const void *src, void *dst);\n\n                        int SHA256_pbkdf2_hmac_assist(const void *inner,\n                                            const void *outer,\n                                            const uint8_t *first_digest,\n                                            uint8_t *final_digest,\n                                            size_t iterations,\n                                            size_t digest_size);\n                        ')
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Hash.SHA256
__module__
A SHA-256 hash object.
    Do not instantiate directly. Use the :func:`new` function.

    :ivar oid: ASN.1 Object ID
    :vartype oid: string

    :ivar block_size: the size in bytes of the internal message block,
                      input to the compression function
    :vartype block_size: integer

    :ivar digest_size: the size in bytes of the resulting hash
    :vartype digest_size: integer
    
__qualname__
32
64
block_size
2.16.840.1.101.3.4.2.1
oid
(None,)
__init__
SHA256Hash.__init__
SHA256Hash.update
SHA256Hash.digest
hexdigest
SHA256Hash.hexdigest
copy
SHA256Hash.copy
SHA256Hash.new
__orig_bases__
_pbkdf2_hmac_assist
Crypto\Hash\SHA256.py
<module Crypto.Hash.SHA256>
('__class__',)
('self', 'data', 'state', 'result')
('inner', 'outer', 'first_digest', 'iterations', 'bfr', 'result')
('self', 'clone', 'result')
('self', 'bfr', 'result')
('self',)
('data',)
('self', 'data')
('self', 'data', 'result')

------------------------------ [modulecode_Crypto.Hash] ------------------------------
__doc__
__file__
path
dirname
join
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
Hash
('NUITKA_PACKAGE_Crypto_Hash', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
['HMAC', 'MD2', 'MD4', 'MD5', 'RIPEMD160', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'CMAC', 'Poly1305', 'cSHAKE128', 'cSHAKE256', 'KMAC128', 'KMAC256', 'TupleHash128', 'TupleHash256', 'KangarooTwelve']
__all__
Crypto\Hash\__init__.py
<module Crypto.Hash>


------------------------------ [modulecode_Crypto.Protocol.KDF] ------------------------------
SHA1
tobytes
new
digest_size
Selected hash algorithm has a too short digest (%d bytes).
Salt is not 8 bytes long (%d bytes instead).
iter_range
1
pHash
digest
Derive one key from a password (or passphrase).

    This function performs key derivation according to an old version of
    the PKCS#5 standard (v1.5) or `RFC2898
    <https://www.ietf.org/rfc/rfc2898.txt>`_.

    Args:
     password (string):
        The secret password to generate the key from.
     salt (byte string):
        An 8 byte string to use for better protection from dictionary attacks.
        This value does not need to be kept secret, but it should be randomly
        chosen for each derivation.
     dkLen (integer):
        The length of the desired key. The default is 16 bytes, suitable for
        instance for :mod:`Crypto.Cipher.AES`.
     count (integer):
        The number of iterations to carry out. The recommendation is 1000 or
        more.
     hashAlgo (module):
        The hash algorithm to use, as a module or an object from the :mod:`Crypto.Hash` package.
        The digest length must be no shorter than ``dkLen``.
        The default algorithm is :mod:`Crypto.Hash.SHA1`.

    Return:
        A byte string of length ``dkLen`` that can be used as key.
    
'prf' and 'hmac_hash_module' are mutually exlusive
hmac_hash_module
_pbkdf2_hmac_assist
<lambda>
PBKDF2.<locals>.<lambda>
link
PBKDF2.<locals>.link
b''
key
prf
password
salt
struct
pack
>I
i
2
reduce
strxor
HMAC
copy
update
count
Derive one or more keys from a password (or passphrase).

    This function performs key derivation according to the PKCS#5 standard (v2.0).

    Args:
     password (string or byte string):
        The secret password to generate the key from.

        Strings will be encoded as ISO 8859-1 (also known as Latin-1),
        which does not allow any characters with codepoints > 255.
     salt (string or byte string):
        A (byte) string to use for better protection from dictionary attacks.
        This value does not need to be kept secret, but it should be randomly
        chosen for each derivation. It is recommended to use at least 16 bytes.

        Strings will be encoded as ISO 8859-1 (also known as Latin-1),
        which does not allow any characters with codepoints > 255.
     dkLen (integer):
        The cumulative length of the keys to produce.

        Due to a flaw in the PBKDF2 design, you should not request more bytes
        than the ``prf`` can output. For instance, ``dkLen`` should not exceed
        20 bytes in combination with ``HMAC-SHA1``.
     count (integer):
        The number of iterations to carry out. The higher the value, the slower
        and the more secure the function becomes.

        You should find the maximum number of iterations that keeps the
        key derivation still acceptable on the slowest hardware you must support.

        Although the default value is 1000, **it is recommended to use at least
        1000000 (1 million) iterations**.
     prf (callable):
        A pseudorandom function. It must be a function that returns a
        pseudorandom byte string from two parameters: a secret and a salt.
        The slower the algorithm, the more secure the derivation function.
        If not specified, **HMAC-SHA1** is used.
     hmac_hash_module (module):
        A module from ``Crypto.Hash`` implementing a Merkle-Damgard cryptographic
        hash, which PBKDF2 must use in combination with HMAC.
        This parameter is mutually exclusive with ``prf``.

    Return:
        A byte string of length ``dkLen`` that can be used as key material.
        If you want multiple keys, just break up this string into segments of the desired length.
    
too many values to unpack (expected 2)
0
s
<genexpr>
PBKDF2.<locals>.<genexpr>
_copy_bytes
_key
_ciphermod
b'\x00'
block_size
_last_string
_cache
8
_n_updates
_cipher_params
Initialize the S2V PRF.

        :Parameters:
          key : byte string
            A secret that can be used as key for CMACs
            based on ciphers from ``ciphermod``.
          ciphermod : module
            A block cipher module from `Crypto.Cipher`.
          cipher_params : dictionary
            A set of extra parameters to use to create a cipher instance.
        
_S2V
Create a new S2V PRF.

        :Parameters:
          key : byte string
            A secret that can be used as key for CMACs
            based on ciphers from ``ciphermod``.
          ciphermod : module
            A block cipher module from `Crypto.Cipher`.
        
bytes_to_long
bord
128
135
long_to_bytes
Too many components passed to S2V
CMAC
('msg', 'ciphermod', 'cipher_params')
_double
Pass the next component of the vector.

        The maximum number of components you can pass is equal to the block
        length of the cipher (in bits) minus 1.

        :Parameters:
          item : byte string
            The next component of the vector.
        :Raise TypeError: when the limit on the number of components has been reached.
        
[None, -16, None]
[-16, None, None]
b'\x80'
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
[None, 16, None]
"Derive a secret from the vector of components.

        :Return: a byte string, as long as the block length of the cipher.
        
255
Too much secret data to derive
('digestmod',)
tlen
prk
t
-1
context
B
n
hashmod
append
key_len
Derive one or more keys from a master secret using
    the HMAC-based KDF defined in RFC5869_.

    Args:
     master (byte string):
        The unguessable value used by the KDF to generate the other keys.
        It must be a high-entropy secret, though not necessarily uniform.
        It must not be a password.
     key_len (integer):
        The length in bytes of every derived key.
     salt (byte string):
        A non-secret, reusable value that strengthens the randomness
        extraction step.
        Ideally, it is as long as the digest size of the chosen hash.
        If empty, a string of zeroes in used.
     hashmod (module):
        A cryptographic hash algorithm from :mod:`Crypto.Hash`.
        :mod:`Crypto.Hash.SHA512` is a good choice.
     num_keys (integer):
        The number of keys to derive. Every key is :data:`key_len` bytes long.
        The maximum cumulative length of all keys is
        255 times the digest size.
     context (byte string):
        Optional identifier describing what the keys are used for.

    Return:
        A byte string or a tuple of byte strings.

    .. _RFC5869: http://tools.ietf.org/html/rfc5869
    
bit_size
N must be a power of 2
4294967296
N is too big
137438953440
p or r are too big
scrypt.<locals>.<lambda>
PBKDF2
('prf',)
_raw_scrypt_lib
scryptROMix
_raw_salsa20_lib
Salsa20_8_core
r
create_string_buffer
c_size_t
N
core
Error %X while running scrypt
data_out
get_raw_buffer
Derive one or more keys from a passphrase.

    Args:
     password (string):
        The secret pass phrase to generate the keys from.
     salt (string):
        A string to use for better protection from dictionary attacks.
        This value does not need to be kept secret,
        but it should be randomly chosen for each derivation.
        It is recommended to be at least 16 bytes long.
     key_len (integer):
        The length in bytes of each derived key.
     N (integer):
        CPU/Memory cost parameter. It must be a power of 2 and less
        than :math:`2^{32}`.
     r (integer):
        Block size parameter.
     p (integer):
        Parallelization parameter.
        It must be no greater than :math:`(2^{32}-1)/(4r)`.
     num_keys (integer):
        The number of keys to derive. Every key is :data:`key_len` bytes long.
        By default, only 1 key is generated.
        The maximum cumulative length of all keys is :math:`(2^{32}-1)*32`
        (that is, 128TB).

    A good choice of parameters *(N, r , p)* was suggested
    by Colin Percival in his `presentation in 2009`__:

    - *( 2\u00b9\u2074, 8, 1 )* for interactive logins (\u2264100ms)
    - *( 2\u00b2\u2070, 8, 1 )* for file encryption (\u22645s)

    Return:
        A byte string or a tuple of byte strings.

    .. __: http://www.tarsnap.com/scrypt/scrypt-slides.pdf
    
SHA256
[2, None, None]
zfill
(8,)
bits
bstr
6
[None, -1, None]
result
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789

tostr
find
(6,)
4
Incorrect length
[None, -4, None]
[None, -2, None]
bchr
Crypto.Cipher
('_EKSBlowfish',)
_EKSBlowfish
The password is too long. It must be 72 bytes at most.
31
bcrypt cost factor must be in the range 4..31
MODE_ECB
(0, 64, 1)
cipher
encrypt
ctext
utf-8
(0,)
The password contains the zero byte
get_random_bytes
(16,)
bcrypt salt must be 16 bytes long
_bcrypt_hash
b'OrpheanBeholderScryDoubt'
b'$'
(2,)
_bcrypt_encode
b'$2a'
Hash a password into a key, using the OpenBSD bcrypt protocol.

    Args:
      password (byte string or string):
        The secret password or pass phrase.
        It must be at most 72 bytes long.
        It must not contain the zero byte.
        Unicode strings will be encoded as UTF-8.
      cost (integer):
        The exponential factor that makes it slower to compute the hash.
        It must be in the range 4 to 31.
        A value of at least 12 is recommended.
      salt (byte string):
        Optional. Random byte string to thwarts dictionary and rainbow table
        attacks. It must be 16 bytes long.
        If not passed, a random value is generated.

    Return (byte string):
        The bcrypt hash

    Raises:
        ValueError: if password is longer than 72 bytes or if it contains the zero byte

   
Incorrect length of the bcrypt hash: %d bytes instead of 60
[None, 4, None]
b'$2a$'
Unsupported prefix
re
compile
(b'\\$2a\\$([0-9][0-9])\\$([A-Za-z0-9./]{22,22})([A-Za-z0-9./]{31,31})',)
match
Incorrect bcrypt hash format
group
(1,)
Incorrect cost
_bcrypt_decode
bcrypt
BLAKE2s
160
('digest_bits', 'key', 'data')
Incorrect bcrypt hash
Verify if the provided password matches the given bcrypt hash.

    Args:
      password (byte string or string):
        The secret password or pass phrase to test.
        It must be at most 72 bytes long.
        It must not contain the zero byte.
        Unicode strings will be encoded as UTF-8.
      bcrypt_hash (byte string, bytearray):
        The reference bcrypt hash the password needs to be checked against.

    Raises:
        ValueError: if the password does not match
    
(b'\x00',)
Null byte found in label
Null byte found in context
dk
label
key_len_enc
master
4294967295
Overflow in SP800 108 counter
Derive one or more keys from a master secret using
    a pseudorandom function in Counter Mode, as specified in
    `NIST SP 800-108r1 <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-108r1.pdf>`_.

    Args:
     master (byte string):
        The secret value used by the KDF to derive the other keys.
        It must not be a password.
        The length on the secret must be consistent with the input expected by
        the :data:`prf` function.
     key_len (integer):
        The length in bytes of each derived key.
     prf (function):
        A pseudorandom function that takes two byte strings as parameters:
        the secret and an input. It returns another byte string.
     num_keys (integer):
        The number of keys to derive. Every key is :data:`key_len` bytes long.
        By default, only 1 key is derived.
     label (byte string):
        Optional description of the purpose of the derived keys.
        It must not contain zero bytes.
     context (byte string):
        Optional information pertaining to
        the protocol that uses the keys, such as the identity of the
        participants, nonces, session IDs, etc.
        It must not contain zero bytes.

    Return:
        - a byte string (if ``num_keys`` is not specified), or
        - a tuple of byte strings (if ``num_key`` is specified).
    
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util.py3compat
('tobytes', 'bord', '_copy_bytes', 'iter_range', 'tostr', 'bchr', 'bstr')
Crypto.Hash
('SHA1', 'SHA256', 'HMAC', 'CMAC', 'BLAKE2s')
Crypto.Util.strxor
('strxor',)
Crypto.Random
('get_random_bytes',)
Crypto.Util.number
('size', 'long_to_bytes', 'bytes_to_long')
size
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'create_string_buffer', 'get_raw_buffer', 'c_size_t')
load_pycryptodome_raw_lib
('Crypto.Cipher._Salsa20', '\n                    int Salsa20_8_core(const uint8_t *x, const uint8_t *y,\n                                       uint8_t *out);\n                    ')
('Crypto.Protocol._scrypt', '\n                    typedef int (core_t)(const uint8_t [64], const uint8_t [64], uint8_t [64]);\n                    int scryptROMix(const uint8_t *data_in, uint8_t *data_out,\n                           size_t data_len, unsigned N, core_t *core);\n                    ')
(1000, None)
PBKDF1
(16, 1000, None, None)
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Protocol.KDF
__module__
String-to-vector PRF as defined in `RFC5297`_.

    This class implements a pseudorandom function family
    based on CMAC that takes as input a vector of strings.

    .. _RFC5297: http://tools.ietf.org/html/rfc5297
    
__qualname__
(None,)
__init__
_S2V.__init__
staticmethod
_S2V.new
_S2V._double
_S2V.update
derive
_S2V.derive
__orig_bases__
(1, None)
HKDF
scrypt
bcrypt_check
(None, b'', b'')
SP800_108_Counter
Crypto\Protocol\KDF.py
('.0', 'j', 'link', 's')
('p', 's')
('p', 's', 'hmac_hash_module')
('hmac_hash_module',)
<module Crypto.Protocol.KDF>
('master', 'key_len', 'salt', 'hashmod', 'num_keys', 'context', 'output_len', 'hmac', 'prk', 't', 'n', 'tlen', 'derived_output', 'kol')
('password', 'salt', 'dkLen', 'count', 'hashAlgo', 'pHash', 'digest', 'i')
('password', 'salt', 'dkLen', 'count', 'prf', 'hmac_hash_module', 'link', 'key', 'i', 's', 'base', 'first_digest')
('master', 'key_len', 'prf', 'num_keys', 'label', 'context', 'key_len_enc', 'output_len', 'i', 'dk', 'info', 'kol')
('__class__',)
('self', 'key', 'ciphermod', 'cipher_params')
('data', 's', 'bits', 'c', 'idx', 'bits6', 'modulo4', 'bits8', 'result', 'g')
('data', 's', 'bits', 'c', 'bits_c', 'bits6', 'result', 'g', 'idx')
('password', 'cost', 'salt', 'constant', 'invert', '_EKSBlowfish', 'cipher', 'ctext', '_')
('self', 'bs', 'doubled')
('password', 'cost', 'salt', 'ctext', 'cost_enc', 'salt_enc', 'hash_enc')
('password', 'bcrypt_hash', 'p', 'r', 'cost', 'salt', 'bcrypt_hash2', 'secret', 'mac1', 'mac2')
('self', 'final', 'padded', 'mac')
('s', 'prf', 'password')
('password', 'prf')
('key', 'ciphermod')
('password', 'salt', 'key_len', 'N', 'r', 'p', 'num_keys', 'prf_hmac_sha256', 'stage_1', 'scryptROMix', 'core', 'data_out', 'flow', 'idx', 'buffer_out', 'result', 'dk', 'kol')
('self', 'item', 'mac')

------------------------------ [modulecode_Crypto.Protocol] ------------------------------
__doc__
__file__
path
dirname
join
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
Protocol
('NUITKA_PACKAGE_Crypto_Protocol', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
KDF
SecretSharing
__all__
Crypto\Protocol\__init__.py
<module Crypto.Protocol>


------------------------------ [modulecode_Crypto.Random] ------------------------------
urandom
Return a random byte string of the desired size.
_UrandomRNG
Return a file-like object that outputs cryptographically random bytes.
__doc__
__file__
path
dirname
join
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
Random
('NUITKA_PACKAGE_Crypto_Random', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
new
get_random_bytes
__all__
0
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Random
__module__
__qualname__
read
_UrandomRNG.read
Method provided for backward compatibility only.
flush
_UrandomRNG.flush
reinit
_UrandomRNG.reinit
close
_UrandomRNG.close
__orig_bases__
atfork
Crypto\Random\__init__.py
<module Crypto.Random>
('__class__',)
('self',)
('args', 'kwargs')
('self', 'n')


------------------------------ [modulecode_Crypto.Util._cpu_features] ------------------------------
_raw_cpuid_lib
have_aes_ni
have_clmul
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util._raw_api
('load_pycryptodome_raw_lib',)
0
load_pycryptodome_raw_lib
('Crypto.Util._cpuid_c', '\n                                           int have_aes_ni(void);\n                                           int have_clmul(void);\n                                           ')
Crypto\Util\_cpu_features.py
<module Crypto.Util._cpu_features>


------------------------------ [modulecode_Crypto.Util._file_system] ------------------------------
0
Crypto
Only available for modules under 'Crypto'
[1, None, None]
split
abspath
__file__
too many values to unpack (expected 2)
join
..
Return the complete file name for the module

    dir_comps : list of string
        The list of directory names in the PyCryptodome package.
        The first element must be "Crypto".

    filename : string
        The filename (inclusing extension) in the target directory.
    
__doc__
__spec__
origin
has_location
__cached__
os
pycryptodome_filename
Crypto\Util\_file_system.py
<module Crypto.Util._file_system>
('dir_comps', 'filename', 'util_lib', '_', 'root_lib')


------------------------------ [modulecode_Crypto.Util._raw_api] ------------------------------
ffi
RTLD_DEEPBIND
os
getenv
('PYCRYPTODOME_DISABLE_DEEPBIND',)
dlopen
cdef
Load a shared library and return a handle to it.

        @name,  either an absolute path or the name of a library
                in the system search path.

        @cdecl, the C function declarations.
        
Convert a Python integer to unsigned long
Convert a Python integer to size_t
max
new
uint8_t[]
[None, None, None]
Size must be specified once only
result
Allocate the given amount of bytes (initially set to 0)
string
Convert a C string into a Python byte sequence
buffer
Convert a C buffer into a Python byte sequence
_buffer_type
cast
uint8_t_type
from_buffer
byte_string
_Array
Object type %s cannot be passed to C code
('void *[1]',)
_pp
0
VoidPointer_cffi
256
ctypes
c_ubyte
cached_architecture
platform
architecture
too many values to unpack (expected 2)
.
startswith
('Win',)
find_library
Cannot load library '%s'
CDLL
value
raw
_py_object
_Py_buffer
_PyObject_GetBuffer
byref
_PyBUF_SIMPLE
len
from_address
buf
_PyBuffer_Release
c_void_p
_p
VoidPointer_ctypes
_raw_pointer
_destructor
split
('.',)
[None, -1, None]
-1
extension_suffixes
basename
pycryptodome_filename
dir_comps
path
isfile
attempts
append
Not found '%s'
load_lib
cdecl
Cannot load '%s': %s
filename
Cannot load native module '%s': %s
, 
Load a shared library and return a handle to it.

    @name,  the name of the library expressed as a PyCryptodome module,
            for instance Crypto.Cipher._raw_cbc.

    @cdecl, the C function declarations.
    
(<class 'bytes'>, <class 'bytearray'>, None)
Return True if object x supports the buffer interface
readonly
__doc__
__file__
__spec__
origin
has_location
__cached__
abc
sys
Crypto.Util.py3compat
('byte_string',)
Crypto.Util._file_system
('pycryptodome_filename',)
machinery
EXTENSION_SUFFIXES
(<class 'bytearray'>, None)
(None,)
__prepare__
_VoidPointer
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Crypto.Util._raw_api
__module__
__qualname__
abstractmethod
Return the memory location we point to
get
_VoidPointer.get
Return a raw pointer to this pointer
address_of
_VoidPointer.address_of
__orig_bases__
flags
optimize
2
CFFI with optimize=2 fails due to pycparser bug.
cffi
('FFI',)
FFI
NULL
null_pointer
typeof
('const uint8_t*',)
('uint8_t[1]',)
__bases__
c_ulong
c_ulonglong
c_uint
c_size_t
(None,)
create_string_buffer
get_c_string
get_raw_buffer
c_uint8_ptr
Model a newly allocated pointer to void
__init__
VoidPointer_cffi.__init__
VoidPointer_cffi.get
VoidPointer_cffi.address_of
VoidPointer
backend
ctypes.util
('find_library',)
Array
c_ssize_t
_c_ssize_t
pythonapi
PyObject_GetBuffer
PyBuffer_Release
py_object
POINTER
_c_ssize_p
Structure
obj
itemsize
c_int
ndim
format
c_char_p
shape
strides
suboffsets
internal
_fields_
VoidPointer_ctypes.__init__
VoidPointer_ctypes.get
VoidPointer_ctypes.address_of
SmartPointer
Class to hold a non-managed piece of memory
SmartPointer.__init__
SmartPointer.get
release
SmartPointer.release
__del__
SmartPointer.__del__
load_pycryptodome_raw_lib
is_buffer
is_writeable_buffer
Crypto\Util\_raw_api.py
<module Crypto.Util._raw_api>
('__class__',)
('self',)
('self', 'raw_pointer', 'destructor')
('x',)
('c',)
('data',)
('data', 'obj', 'buf', 'buffer_type')
('init_or_size', 'size', 'result')
('c_string',)
('buf',)
('name', 'cdecl', 'lib')
('name', 'cdecl', 'platform', 'bits', 'linkage', 'full_name')
('name', 'cdecl', 'split', 'dir_comps', 'basename', 'attempts', 'ext', 'filename', 'full_name', 'exp')
('self', 'rp')


------------------------------ [modulecode_Crypto.Util] ------------------------------
Miscellaneous modules

Contains useful modules that don't belong into any of the
other Crypto.* subpackages.

========================    =============================================
Module                      Description
========================    =============================================
`Crypto.Util.number`        Number-theoretic functions (primality testing, etc.)
`Crypto.Util.Counter`       Fast counter functions for CTR cipher modes.
`Crypto.Util.RFC1751`       Converts between 128-bit keys and human-readable
                            strings of words.
`Crypto.Util.asn1`          Minimal support for ASN.1 DER encoding
`Crypto.Util.Padding`       Set of functions for adding and removing padding.
========================    =============================================

:undocumented: _galois, _number_new, cpuid, py3compat, _raw_api

__doc__
__file__
path
dirname
join
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
Util
('NUITKA_PACKAGE_Crypto_Util', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
['RFC1751', 'number', 'strxor', 'asn1', 'Counter', 'Padding']
__all__
Crypto\Util\__init__.py
<module Crypto.Util>


------------------------------ [modulecode_Crypto.Util.number] ------------------------------
0
Non positive values
too many values to unpack (expected 2)
1
Return ceil(n/d), that is, the smallest integer r such that r*d >= n
Size in bits only available for non-negative numbers
bit_length
Returns the size of the number N in bits.
Random
get_random_bytes
3
8
(1,)
struct
pack
B
bytes_to_long
Return a random number at most N bits long.

    If :data:`randfunc` is omitted, then :meth:`Random.get_random_bytes` is used.

    .. deprecated:: 3.0
        This function is for internal use only and may be renamed or removed in
        the future. Use :func:`Crypto.Random.random.getrandbits` instead.
    
size
getRandomInteger
value
bits
randfunc
Return a random number *n* so that *a <= n < b*.

    If :data:`randfunc` is omitted, then :meth:`Random.get_random_bytes` is used.

    .. deprecated:: 3.0
        This function is for internal use only and may be renamed or removed in
        the future. Use :func:`Crypto.Random.random.randrange` instead.
    
2
Return a random number with exactly N-bits,
    i.e. a random number between 2**(N-1) and (2**N)-1.

    If :data:`randfunc` is omitted, then :meth:`Random.get_random_bytes` is used.

    .. deprecated:: 3.0
        This function is for internal use only and may be renamed or removed in
        the future.
    
Modulus cannot be zero
Modulus cannot be negative
pow
-1
The inverse of :data:`u` *mod* :data:`v`.
N must be larger than 1
getRandomNBitInteger
N
isPrime
('randfunc',)
Return a random N-bit prime number.

    N must be an integer larger than 1.
    If randfunc is omitted, then :meth:`Random.get_random_bytes` is used.
    
n
m
b
iter_range
min
getRandomRange
a
tested
append
z
_rabinMillerTest(n:long, rounds:int, randfunc:callable):int
    Tests if n is prime.
    Returns 0 when n is definitely composite.
    Returns 1 when n is probably prime.
    Returns 2 when n is definitely prime.

    If randfunc is omitted, then Random.new().read is used.

    This function is for internal use only and may be renamed or removed in
    the future.
    
_fastmath
getStrongPrime
long
512
128
bits must be multiple of 128 and > 512
math
ceil
log
(4,)
7
14142135623730950489
511
10000000000000000000
(0, 1)
101
sieve_base
y
field
_rabinMillerTest
rabin_miller_rounds
p
result
Couln't find prime in field. Developer: Increase field_size
inverse
X
e
GCD
increment

    Return a random strong *N*-bit prime number.
    In this context, *p* is a strong prime if *p-1* and *p+1* have at
    least one large prime factor.

    Args:
        N (integer): the exact length of the strong prime.
          It must be a multiple of 128 and > 512.
        e (integer): if provided, the returned prime (minus 1)
          will be coprime to *e* and thus suitable for RSA where
          *e* is the public exponent.
        false_positive_prob (float):
          The statistical probability for the result not to be actually a
          prime. It defaults to 10\ :sup:`-6`.
          Note that the real probability of a false-positive is far less. This is
          just the mathematically provable limit.
        randfunc (callable):
          A function that takes a parameter *N* and that returns
          a random byte string of such length.
          If omitted, :func:`Crypto.Random.get_random_bytes` is used.
    Return:
        The new strong prime.

    .. deprecated:: 3.0
        This function is for internal use only and may be renamed or removed in
        the future.
    
Test if a number *N* is a prime.

    Args:
        false_positive_prob (float):
          The statistical probability for the result not to be actually a
          prime. It defaults to 10\ :sup:`-6`.
          Note that the real probability of a false-positive is far less.
          This is just the mathematically provable limit.
        randfunc (callable):
          A function that takes a parameter *N* and that returns
          a random byte string of such length.
          If omitted, :func:`Crypto.Random.get_random_bytes` is used.

    Return:
        `True` is the input is indeed prime.
    
Values must be non-negative
bsr
insert
>Q
18446744073709551615
64
4
>I
4294967295
32
>B
255
b'\x00'
b''
lstrip
(b'\x00',)
Convert a positive integer to a byte string using big endian encoding.

    If :data:`blocksize` is absent or zero, the byte string will
    be of minimal length.

    Otherwise, the length of the byte string is guaranteed to be a multiple
    of :data:`blocksize`. If necessary, zeroes (``\x00``) are added at the left.

    .. note::
        In Python 3, if you are sure that :data:`n` can fit into
        :data:`blocksize` bytes, you can simply use the native method instead::

            >>> n.to_bytes(blocksize, 'big')

        For instance::

            >>> n = 80
            >>> n.to_bytes(2, 'big')
            b'\x00P'

        However, and unlike this ``long_to_bytes()`` function,
        an ``OverflowError`` exception is raised if :data:`n` does not fit.
    
unpack
acc
s
Convert a byte string to a long integer (big endian).

    In Python 3.2+, use the native method instead::

        >>> int.from_bytes(s, 'big')

    For instance::

        >>> int.from_bytes(b'
warnings
warn
('long2str() has been replaced by long_to_bytes()',)
long_to_bytes
('str2long() has been replaced by bytes_to_long()',)
__doc__
__file__
__spec__
origin
has_location
__cached__
sys
Crypto
('Random',)
Crypto.Util.py3compat
('iter_range',)
ceil_div
(None,)
gcd
getPrime
(0, 1e-06, None)
(1e-06, None)
(0,)
long2str
str2long
(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991, 100003, 100019, 100043, 100049, 100057, 100069, 100103, 100109, 100129, 100151, 100153, 100169, 100183, 100189, 100193, 100207, 100213, 100237, 100267, 100271, 100279, 100291, 100297, 100313, 100333, 100343, 100357, 100361, 100363, 100379, 100391, 100393, 100403, 100411, 100417, 100447, 100459, 100469, 100483, 100493, 100501, 100511, 100517, 100519, 100523, 100537, 100547, 100549, 100559, 100591, 100609, 100613, 100621, 100649, 100669, 100673, 100693, 100699, 100703, 100733, 100741, 100747, 100769, 100787, 100799, 100801, 100811, 100823, 100829, 100847, 100853, 100907, 100913, 100927, 100931, 100937, 100943, 100957, 100981, 100987, 100999, 101009, 101021, 101027, 101051, 101063, 101081, 101089, 101107, 101111, 101113, 101117, 101119, 101141, 101149, 101159, 101161, 101173, 101183, 101197, 101203, 101207, 101209, 101221, 101267, 101273, 101279, 101281, 101287, 101293, 101323, 101333, 101341, 101347, 101359, 101363, 101377, 101383, 101399, 101411, 101419, 101429, 101449, 101467, 101477, 101483, 101489, 101501, 101503, 101513, 101527, 101531, 101533, 101537, 101561, 101573, 101581, 101599, 101603, 101611, 101627, 101641, 101653, 101663, 101681, 101693, 101701, 101719, 101723, 101737, 101741, 101747, 101749, 101771, 101789, 101797, 101807, 101833, 101837, 101839, 101863, 101869, 101873, 101879, 101891, 101917, 101921, 101929, 101939, 101957, 101963, 101977, 101987, 101999, 102001, 102013, 102019, 102023, 102031, 102043, 102059, 102061, 102071, 102077, 102079, 102101, 102103, 102107, 102121, 102139, 102149, 102161, 102181, 102191, 102197, 102199, 102203, 102217, 102229, 102233, 102241, 102251, 102253, 102259, 102293, 102299, 102301, 102317, 102329, 102337, 102359, 102367, 102397, 102407, 102409, 102433, 102437, 102451, 102461, 102481, 102497, 102499, 102503, 102523, 102533, 102539, 102547, 102551, 102559, 102563, 102587, 102593, 102607, 102611, 102643, 102647, 102653, 102667, 102673, 102677, 102679, 102701, 102761, 102763, 102769, 102793, 102797, 102811, 102829, 102841, 102859, 102871, 102877, 102881, 102911, 102913, 102929, 102931, 102953, 102967, 102983, 103001, 103007, 103043, 103049, 103067, 103069, 103079, 103087, 103091, 103093, 103099, 103123, 103141, 103171, 103177, 103183, 103217, 103231, 103237, 103289, 103291, 103307, 103319, 103333, 103349, 103357, 103387, 103391, 103393, 103399, 103409, 103421, 103423, 103451, 103457, 103471, 103483, 103511, 103529, 103549, 103553, 103561, 103567, 103573, 103577, 103583, 103591, 103613, 103619, 103643, 103651, 103657, 103669, 103681, 103687, 103699, 103703, 103723, 103769, 103787, 103801, 103811, 103813, 103837, 103841, 103843, 103867, 103889, 103903, 103913, 103919, 103951, 103963, 103967, 103969, 103979, 103981, 103991, 103993, 103997, 104003, 104009, 104021, 104033, 104047, 104053, 104059, 104087, 104089, 104107, 104113, 104119, 104123, 104147, 104149, 104161, 104173, 104179, 104183, 104207, 104231, 104233, 104239, 104243, 104281, 104287, 104297, 104309, 104311, 104323, 104327, 104347, 104369, 104381, 104383, 104393, 104399, 104417, 104459, 104471, 104473, 104479, 104491, 104513, 104527, 104537, 104543, 104549, 104551, 104561, 104579, 104593, 104597, 104623, 104639, 104651, 104659, 104677, 104681, 104683, 104693, 104701, 104707, 104711, 104717, 104723, 104729)
Crypto\Util\number.py
<module Crypto.Util.number>
('n', 'rounds', 'randfunc', 'n_1', 'b', 'm', 'tested', 'i', 'a', 'z', 'composite', 'r')
('s', 'acc', 'unpack', 'length', 'extra', 'i')
('n', 'd', 'r', 'q')
('N', 'randfunc', 'number')
('N', 'randfunc', 'S', 'odd_bits', 'rand_bits', 'value')
('N', 'randfunc', 'value')
('a', 'b', 'randfunc', 'range_', 'bits', 'value')
('N', 'e', 'false_positive_prob', 'randfunc', 'rabin_miller_rounds', 'x', 'lower_bound', 'upper_bound', 'X', 'p', 'i', 'y', 'field', 'prime', 'offset', 'j', 'result', 'composite', 'tmp', 'tmp1', 'tmp2', 'R', 'increment', 'is_possible_prime')
('u', 'v')
('N', 'false_positive_prob', 'randfunc', 'p', 'rounds')
('n', 'blocksize')
('n', 'blocksize', 'result', 'pack', 'bsr', 'bresult', 'target_len')
('N',)
('s',)


------------------------------ [modulecode_Crypto.Util.py3compat] ------------------------------
encode
('latin-1',)
latin-1
tobytes
decode
Return an immutable copy of a sequence (byte string, byte array, memoryview)
    in a certain interval [start:seq]
Compatibility code for handling string/bytes changes from Python 2.x to Py3k

In Python 2.x, strings (of type ''str'') contain binary data, including encoded
Unicode text (e.g. UTF-8).  The separate type ''unicode'' holds Unicode text.
Unicode literals are specified via the u'...' prefix.  Indexing or slicing
either type always produces a string of the same type as the original.
Data read from a file is always of '''str'' type.

In Python 3.x, strings (type ''str'') may only contain Unicode text. The u'...'
prefix and the ''unicode'' type are now redundant.  A new type (called
''bytes'') has to be used for binary data (including any particular
''encoding'' of a string).  The b'...' prefix allows one to specify a binary
literal.  Indexing or slicing a string produces another string.  Slicing a byte
string produces another byte string, but the indexing operation produces an
integer.  Data read from a file is of '''str'' type if the file was opened in
text mode, or of ''bytes'' type otherwise.

Since PyCrypto aims at supporting both Python 2.x and 3.x, the following helper
functions are used to keep the rest of the library as independent as possible
from the actual Python version.

In general, the code should always deal with binary strings, and use integers
instead of 1-byte character strings.

b(s)
    Take a text string literal (with no prefix or with u'...' prefix) and
    make a byte string.
bchr(c)
    Take an integer and make a 1-character byte string.
bord(c)
    Take the result of indexing on a byte string and make an integer.
tobytes(s)
    Take a text string, a byte string, or a sequence of character taken from
    a byte string and make a byte string.

__doc__
__file__
__spec__
origin
has_location
__cached__
sys
abc
0
b
bchr
bstr
bord
tostr
byte_string
BytesIO
StringIO
9223372036854775807
maxint
iter_range
is_native_int
is_string
is_bytes
('ABC',)
ABC
FileNotFoundError
_copy_bytes
Crypto\Util\py3compat.py
<module Crypto.Util.py3compat>
('start', 'end', 'seq')
('s',)
('x',)
('s', 'encoding')
('bs',)


------------------------------ [modulecode_Crypto.Util.strxor] ------------------------------
Only byte strings of equal length can be xored
create_string_buffer
is_writeable_buffer
output must be a bytearray or a writeable memoryview
output must have the same length as the input  (%d bytes)
_raw_strxor
strxor
c_uint8_ptr
c_size_t
output
get_raw_buffer
From two byte strings of equal length,
    create a third one which is the byte-by-byte XOR of the two.

    Args:
      term1 (bytes/bytearray/memoryview):
        The first byte string to XOR.
      term2 (bytes/bytearray/memoryview):
        The second byte string to XOR.
      output (bytearray/memoryview):
        The location where the result will be written to.
        It must have the same length as ``term1`` and ``term2``.
        If ``None``, the result is returned.
    :Return:
        If ``output`` is ``None``, a new byte string with the result.
        Otherwise ``None``.

    .. note::
        ``term1`` and ``term2`` must have the same length.
    
0
256
c must be in range(256)
strxor_c
term
From a byte string, create a second one of equal length
    where each byte is XOR-red with the same value.

    Args:
      term(bytes/bytearray/memoryview):
        The byte string to XOR.
      c (int):
        Every byte in the string will be XOR-ed with this value.
        It must be between 0 and 255 (included).
      output (None or bytearray/memoryview):
        The location where the result will be written to.
        It must have the same length as ``term``.
        If ``None``, the result is returned.

    Return:
        If ``output`` is ``None``, a new ``bytes`` string with the result.
        Otherwise ``None``.
    
Very fast XOR - check conditions!
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Util._raw_api
('load_pycryptodome_raw_lib', 'c_size_t', 'create_string_buffer', 'get_raw_buffer', 'c_uint8_ptr', 'is_writeable_buffer')
load_pycryptodome_raw_lib
('Crypto.Util._strxor', '\n                    void strxor(const uint8_t *in1,\n                                const uint8_t *in2,\n                                uint8_t *out, size_t len);\n                    void strxor_c(const uint8_t *in,\n                                  uint8_t c,\n                                  uint8_t *out,\n                                  size_t len);\n                    ')
(None,)
_strxor_direct
Crypto\Util\strxor.py
<module Crypto.Util.strxor>
('term1', 'term2', 'result')
('term1', 'term2', 'output', 'result')
('term', 'c', 'output', 'result')


------------------------------ [modulecode_Crypto] ------------------------------
__doc__
__file__
path
dirname
environ
get
('NUITKA_PACKAGE_Crypto', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__
['Cipher', 'Hash', 'Protocol', 'PublicKey', 'Util', 'Signature', 'IO', 'Math']
__all__
(3, 18, '0')
version_info
.
__version__
Crypto\__init__.py
<module Crypto>


------------------------------ [modulecode_PIL.BlpImagePlugin] ------------------------------
11
31
3
5
63
2
8
(bytearray(b''), bytearray(b''), bytearray(b''), bytearray(b''))
struct
unpack_from
<HHI
data
too many values to unpack (expected 3)
unpack_565
(0, 4, 1)
bits
255
0
r0
g0
b0
1
r1
g1
b1
(0, 0, 0, 0)
too many values to unpack (expected 4)
extend
r
g
b

    input: one "row" of data (i.e. will produce 4*width pixels)
    
16
<8B
<HH
too many values to unpack (expected 2)
<I
12
too many values to unpack (expected 1)
4
j
high
15
17
code
<BB
<6B
24
alphacode2
7
alphacode1
6
a0
a1

    input: one "row" of data (i.e. will produce 4 * width pixels)
    
[None, 4, None]
(b'BLP1', b'BLP2')
fp
read
(4,)
magic
seek
os
SEEK_CUR
unpack
<b
(1,)
_blp_alpha_depth
<II
(8,)
_size
decode
Bad BLP magic 

BLPFormatError
RGBA
RGB
mode
(0, 0)
size
tile
_read_blp_header
_load
error
Truncated BLP file
(-1, 0)
fd
<i
_safe_read
_blp_compression
_blp_encoding
_blp_alpha_encoding
BLP1Decoder
<16I
(64,)
_blp_offsets
_blp_lengths
ImageFile
(0, 256, 1)
<4B
self
ret
append
bytearray(b'')
BytesIO
<B
_data
Format
JPEG
_decode_jpeg_stream
(4, 5)
_read_palette
_read_bgra
set_as_raw
Unsupported BLP encoding 
Unsupported BLP compression 
JpegImagePlugin
('JpegImageFile',)
JpegImageFile
tell
Image
_decompression_bomb_check
CMYK
convert
('RGB',)
split
merge
tobytes
Encoding
UNCOMPRESSED
DXT
AlphaEncoding
DXT1
decode_dxt1
linesize
('alpha',)
DXT3
decode_dxt3
DXT5
decode_dxt5
Unsupported alpha encoding 
Unknown BLP encoding 
Unknown BLP compression 
b''
im
getpalette
('RGBA', 'RGBA')
pack
_write_palette
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
getpixel
y
P
Unsupported BLP image mode
encoderinfo
get
('blp_version',)
BLP1
b'BLP1'
b'BLP2'
write
('<i', 1)
palette
('<b', 0)
('<II',)
('<i', 5)
('<i', 0)
_save
BLP

Blizzard Mipmap Format (.blp)
Jerome Leclanche <jerome@leclan.ch>

The contents of this file are hereby released in the public domain (CC0)
Full text of the CC0 license:
  https://creativecommons.org/publicdomain/zero/1.0/

BLP1 files, used mostly in Warcraft III, are not fully supported.
All types of BLP2 files used in World of Warcraft are supported.

The BLP file structure consists of a header, up to 16 mipmaps of the
texture

Texture sizes must be powers of two, though the two dimensions do
not have to be equal; 512x256 is valid, but 512x200 is not.
The first mipmap (mipmap #0) is the full size image; each subsequent
mipmap halves both dimensions. The final mipmap should be 1x1.

BLP files come in many different flavours:
* JPEG-compressed (type == 0) - only supported for BLP1.
* RAW images (type == 1, encoding == 1). Each mipmap is stored as an
  array of 8-bit values, one per pixel, left to right, top to bottom.
  Each value is an index to the palette.
* DXT-compressed (type == 1, encoding == 2):
- DXT1 compression is used if alpha_encoding == 0.
  - An additional alpha bit is used if alpha_depth == 1.
  - DXT3 compression is used if alpha_encoding == 1.
  - DXT5 compression is used if alpha_encoding == 7.

__doc__
__file__
__spec__
origin
has_location
__cached__
enum
('IntEnum',)
IntEnum
('Image', 'ImageFile')
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.BlpImagePlugin
__module__
__qualname__
__orig_bases__
UNCOMPRESSED_RAW_BGRA
(False,)
(None,)
_accept
BlpImageFile

    Blizzard Mipmap Format
    
format
Blizzard Mipmap Format
format_description
_open
BlpImageFile._open
PyDecoder
_BLPBaseDecoder
_pulls_fd
_BLPBaseDecoder.decode
_BLPBaseDecoder._read_blp_header
_BLPBaseDecoder._safe_read
_BLPBaseDecoder._read_palette
_BLPBaseDecoder._read_bgra
BLP1Decoder._load
BLP1Decoder._decode_jpeg_stream
BLP2Decoder
BLP2Decoder._load
PyEncoder
BLPEncoder
_pushes_fd
BLPEncoder._write_palette
encode
BLPEncoder.encode
register_open
register_extension
.blp
register_decoder
BLP2
register_save
register_encoder
PIL\BlpImagePlugin.py
<module PIL.BlpImagePlugin>
('__class__',)
('prefix',)
('self', 'JpegImageFile', 'jpeg_header_size', 'jpeg_header', 'data', 'image', 'decoder_name', 'extents', 'offset', 'args', 'r', 'g', 'b')
('self', 'palette', 'data', 'linesize', 'yb', 'd', 'msg')
('self', 'palette', 'data', 'msg')
('self', 'decoder', 'msg')
('self', 'palette', 'data', '_data', 'offset', 'b', 'g', 'r', 'a', 'd')
('self',)
('self', 'ret', 'i', 'b', 'g', 'r', 'a')
('self', 'length')
('im', 'fp', 'filename', 'save_all', 'msg', 'magic')
('self', 'data', 'palette', 'i', 'r', 'g', 'b', 'a')
('self', 'buffer', 'e', 'msg')
('data', 'alpha', 'blocks', 'ret', 'block', 'idx', 'color0', 'color1', 'bits', 'r0', 'g0', 'b0', 'r1', 'g1', 'b1', 'j', 'i', 'control', 'a', 'r', 'g', 'b')
('data', 'blocks', 'ret', 'block', 'idx', 'bits', 'color0', 'color1', 'code', 'r0', 'g0', 'b0', 'r1', 'g1', 'b1', 'j', 'high', 'i', 'alphacode_index', 'a', 'color_code', 'r', 'g', 'b')
('data', 'blocks', 'ret', 'block', 'idx', 'a0', 'a1', 'bits', 'alphacode1', 'alphacode2', 'color0', 'color1', 'code', 'r0', 'g0', 'b0', 'r1', 'g1', 'b1', 'j', 'i', 'alphacode_index', 'alphacode', 'a', 'color_code', 'r', 'g', 'b')
('self', 'bufsize', 'palette_data', 'offset', 'data', 'w', 'h', 'y', 'x')
('i',)

------------------------------ [modulecode_PIL.BmpImagePlugin] ------------------------------
[None, 2, None]
b'BM'
i32
[12, 40, 64, 108, 124]
fp
read
seek
too many values to unpack (expected 2)
header_size
(4,)
direction
-1
ImageFile
_safe_read
4
12
i16
0
width
2
height
planes
6
bits
RAW
compression
3
palette_padding
(40, 64, 108, 124)
7
255
y_flip
1
4294967296
8
10
16
data_size
20
24
pixels_per_meter
28
colors
info
dpi
BITFIELDS
['r_mask', 'g_mask', 'b_mask', 'a_mask']
header_data
36
file_info
a_mask
('r_mask', 'g_mask', 'b_mask')
r_mask
g_mask
b_mask
rgb_mask
rgba_mask
Unsupported BMP header type (

)
_size
get
('colors', 0)
14
BIT2MODE
(None, None)
mode
Unsupported BMP pixel depth (
raw
{32: [(16711680, 65280, 255, 0), (4278190080, 16711680, 65280, 0), (4278190080, 16711680, 65280, 255), (255, 65280, 16711680, 4278190080), (16711680, 65280, 255, 4278190080), (0, 0, 0, 0)], 24: [(16711680, 65280, 255)], 16: [(63488, 2016, 31), (31744, 992, 31)]}
{(32, (16711680, 65280, 255, 0)): 'BGRX', (32, (4278190080, 16711680, 65280, 0)): 'XBGR', (32, (4278190080, 16711680, 65280, 255)): 'ABGR', (32, (255, 65280, 16711680, 4278190080)): 'RGBA', (32, (16711680, 65280, 255, 4278190080)): 'BGRA', (32, (0, 0, 0, 0)): 'BGRA', (24, (16711680, 65280, 255)): 'BGR', (16, (63488, 2016, 31)): 'BGR;16', (16, (31744, 992, 31)): 'BGR;15'}
32
A
RGBA
(24, 16)
Unsupported BMP bitfields layout
header
22
('BGRA', 'RGBA')
RLE8
RLE4
bmp_rle
Unsupported BMP compression (
P
65536
Unsupported BMP Palette size (
(0, 255)
padding
o8
greyscale
1
L
ImagePalette
BGRX
BGR
palette
31
-4
args
tell
tile
Read relevant info about the BMP
39.3701
<genexpr>
BmpImageFile._bitmap.<locals>.<genexpr>
(14,)
_accept
Not a BMP file
_bitmap
('offset',)
Open file, check magic number and read header
bytearray(b'')
data
self
state
xsize
ysize
fd
(1,)
x
max
15
num_pixels
first_pixel
second_pixel
b'\x00'
(2,)
bytes_read
byte_count
os
SEEK_CUR
set_as_raw
(-1, 0)
_save
SAVE
too many values to unpack (expected 3)
cannot write mode 
 as BMP
encoderinfo
('dpi', (96, 96))
<lambda>
_save.<locals>.<lambda>
size
b''
(0, 256, 1)
im
getpalette
('RGB', 'BGRX')
54
4294967295
File size is too large for the BMP format
write
o32
(0,)
(40,)
o16
image
(b'',)
(0, 0)
0.5
_save.<locals>.<genexpr>
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile', 'ImagePalette')
Image
_binary
('i16le',)
i16le
('i32le',)
i32le
('o8',)
('o16le',)
o16le
('o32le',)
o32le
{1: ('P', 'P;1'), 4: ('P', 'P;4'), 8: ('P', 'P'), 16: ('RGB', 'BGR;15'), 24: ('RGB', 'BGR'), 32: ('RGB', 'BGRX')}
_dib_accept
__prepare__
BmpImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.BmpImagePlugin
__module__
Image plugin for the Windows Bitmap format (BMP)
__qualname__
Windows Bitmap
format_description
BMP
format
{'RAW': 0, 'RLE8': 1, 'RLE4': 2, 'BITFIELDS': 3, 'JPEG': 4, 'PNG': 5}
COMPRESSIONS
items
k
v
vars
BmpImageFile._bitmap
_open
BmpImageFile._open
__orig_bases__
PyDecoder
BmpRleDecoder
_pulls_fd
decode
BmpRleDecoder.decode
DibImageFile
DIB
DibImageFile._open
{'1': ('1', 1, 2), 'L': ('L', 8, 256), 'P': ('P', 8, 256), 'RGB': ('BGR', 24, 0), 'RGBA': ('BGRA', 32, 0)}
_dib_save
(True,)
register_open
register_save
register_extension
.bmp
register_mime
image/bmp
register_decoder
.dib
PIL\BmpImagePlugin.py
('.0', 'i')
('.0', 'x')
('x',)
<module PIL.BmpImagePlugin>
('__class__',)
('prefix',)
('self', 'header', 'offset', 'read', 'seek', 'file_info', 'header_data', 'idx', 'mask', 'msg', 'raw_mode', 'decoder_name', 'SUPPORTED', 'MASK_MODES', 'padding', 'palette', 'greyscale', 'indices', 'ind', 'val', 'rgb', 'args')
('im', 'fp', 'filename')
('self',)
('self', 'head_data', 'msg', 'offset')
('im', 'fp', 'filename', 'bitmap_header', 'rawmode', 'bits', 'colors', 'e', 'msg', 'info', 'dpi', 'ppm', 'stride', 'header', 'image', 'palette', 'offset', 'file_size')
('self', 'buffer', 'rle4', 'data', 'x', 'pixels', 'byte', 'num_pixels', 'first_pixel', 'second_pixel', 'index', 'bytes_read', 'right', 'up', 'byte_count', 'byte_read', 'rawmode')

------------------------------ [modulecode_PIL.BufrStubImagePlugin] ------------------------------
_handler

    Install application-specific BUFR image handler.

    :param handler: Handler object.
    
[None, 4, None]
b'BUFR'
b'ZCZC'
fp
tell
_accept
read
(4,)
Not a BUFR file
seek
F
mode
(1, 1)
_size
_load
open
save
BUFR save handler not installed
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
1
Image
0
ImageFile
register_handler
StubImageFile
__prepare__
BufrStubImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.BufrStubImagePlugin
__module__
__qualname__
BUFR
format
format_description
_open
BufrStubImageFile._open
BufrStubImageFile._load
__orig_bases__
_save
register_open
register_save
register_extension
.bufr
PIL\BufrStubImagePlugin.py
<module PIL.BufrStubImagePlugin>
('__class__',)
('prefix',)
('self',)
('self', 'offset', 'msg', 'loader')
('im', 'fp', 'filename', 'msg')
('handler',)

------------------------------ [modulecode_PIL.CurImagePlugin] ------------------------------
[None, 4, None]
b'\x00\x00\x02\x00'
fp
tell
read
(6,)
_accept
not a CUR file
b''
i16
4
self
(16,)
m
0
1
No cursors were found
_bitmap
i32
12
size
2
_size
tile
too many values to unpack (expected 4)
(0, 0)
__doc__
__file__
__spec__
origin
has_location
__cached__

('BmpImagePlugin', 'Image')
BmpImagePlugin
Image
_binary
('i16le',)
i16le
('i32le',)
i32le
BmpImageFile
__prepare__
CurImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.CurImagePlugin
__module__
__qualname__
CUR
format
Windows Cursor
format_description
_open
CurImageFile._open
__orig_bases__
register_open
register_extension
.cur
PIL\CurImagePlugin.py
<module PIL.CurImagePlugin>
('__class__',)
('prefix',)
('self', 'offset', 's', 'msg', 'm', 'i', 'd', 'e', 'o', 'a')

------------------------------ [modulecode_PIL.DcxImagePlugin] ------------------------------
i32
MAGIC
fp
read
(4,)
_accept
not a DCX file
_offset
(0, 1024, 1)
self
append
_fp
frame
n_frames
1
is_animated
seek
(0,)
_seek_check
PcxImageFile
_open
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image',)
Image
0
_binary
('i32le',)
i32le
PcxImagePlugin
('PcxImageFile',)
987654321
__prepare__
DcxImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.DcxImagePlugin
__module__
__qualname__
DCX
format
Intel DCX
format_description
_close_exclusive_fp_after_loading
DcxImageFile._open
DcxImageFile.seek
tell
DcxImageFile.tell
__orig_bases__
register_open
register_extension
.dcx
PIL\DcxImagePlugin.py
<module PIL.DcxImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'i', 'offset')
('self', 'frame')
('self',)

------------------------------ [modulecode_PIL.DdsImagePlugin] ------------------------------
_accept
fp
read
(4,)
not a DDS file
struct
unpack
<I
too many values to unpack (expected 1)
124
Unsupported header size 

4
Incomplete header: 
 bytes
BytesIO
<3I
(12,)
too many values to unpack (expected 3)
_size
RGBA
mode
<11I
(44,)
<2I
(8,)
too many values to unpack (expected 2)
<4I
(16,)
DDPF_LUMINANCE
DDPF_ALPHAPIXELS
LA
L
raw
(0, 0)
size
0
1
tile
DDPF_RGB
['R', 'G', 'B', 'A']
4278190080
RGB
16711680
65280
255
[None, None, -1]
b'DXT1'
DXT1
pixel_format
b'DXT3'
DXT3
2
b'DXT5'
DXT5
3
b'ATI1'
BC4
b'ATI2'
BC5
5
b'BC5S'
BC5S
b'DX10'
20
DXGI_FORMAT_BC5_TYPELESS
DXGI_FORMAT_BC5_UNORM
DXGI_FORMAT_BC5_SNORM
DXGI_FORMAT_BC6H_UF16
BC6H
6
DXGI_FORMAT_BC6H_SF16
BC6HS
DXGI_FORMAT_BC7_TYPELESS
DXGI_FORMAT_BC7_UNORM
BC7
7
DXGI_FORMAT_BC7_UNORM_SRGB
0.45454545454545453
info
gamma
DXGI_FORMAT_R8G8B8A8_TYPELESS
DXGI_FORMAT_R8G8B8A8_UNORM
DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
('RGBA', 0, 1)
Unimplemented DXGI format 
Unimplemented pixel format 
bcn
('RGB', 'RGBA', 'L', 'LA')
cannot write mode 
 as DDS
('L', 'LA')
('LA', 'RGBA')
masks
8
append
(0,)
write
o32
DDS_MAGIC
(124,)
DDSD_CAPS
DDSD_HEIGHT
DDSD_WIDTH
DDSD_PITCH
DDSD_PIXELFORMAT
height
width
11
(32,)
b''
DDSCAPS_TEXTURE
split
too many values to unpack (expected 4)
Image
merge
ImageFile
_save
im
<genexpr>
_save.<locals>.<genexpr>
[None, 4, None]
b'DDS '

A Pillow loader for .dds files (S3TC-compressed aka DXTC)
Jerome Leclanche <jerome@leclan.ch>

Documentation:
  https://web.archive.org/web/20170802060935/http://oss.sgi.com/projects/ogl-sample/registry/EXT/texture_compression_s3tc.txt

The contents of this file are hereby released in the public domain (CC0)
Full text of the CC0 license:
  https://creativecommons.org/publicdomain/zero/1.0/

__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
_binary
('o32le',)
o32le
542327876
4096
131072
DDSD_MIPMAPCOUNT
524288
DDSD_LINEARSIZE
8388608
DDSD_DEPTH
DDSCAPS_COMPLEX
4194304
DDSCAPS_MIPMAP
512
DDSCAPS2_CUBEMAP
1024
DDSCAPS2_CUBEMAP_POSITIVEX
2048
DDSCAPS2_CUBEMAP_NEGATIVEX
DDSCAPS2_CUBEMAP_POSITIVEY
8192
DDSCAPS2_CUBEMAP_NEGATIVEY
16384
DDSCAPS2_CUBEMAP_POSITIVEZ
32768
DDSCAPS2_CUBEMAP_NEGATIVEZ
2097152
DDSCAPS2_VOLUME
DDPF_ALPHA
DDPF_FOURCC
32
DDPF_PALETTEINDEXED8
64
DDS_FOURCC
DDS_RGB
DDS_RGBA
DDS_LUMINANCE
DDS_LUMINANCEA
DDS_ALPHA
DDS_PAL8
DDS_HEADER_FLAGS_TEXTURE
DDS_HEADER_FLAGS_MIPMAP
DDS_HEADER_FLAGS_VOLUME
DDS_HEADER_FLAGS_PITCH
DDS_HEADER_FLAGS_LINEARSIZE
DDS_HEIGHT
DDS_WIDTH
DDS_SURFACE_FLAGS_TEXTURE
DDS_SURFACE_FLAGS_MIPMAP
DDS_SURFACE_FLAGS_CUBEMAP
DDS_CUBEMAP_POSITIVEX
DDS_CUBEMAP_NEGATIVEX
DDS_CUBEMAP_POSITIVEY
DDS_CUBEMAP_NEGATIVEY
DDS_CUBEMAP_POSITIVEZ
DDS_CUBEMAP_NEGATIVEZ
827611204
DXT1_FOURCC
861165636
DXT3_FOURCC
894720068
DXT5_FOURCC
27
28
29
82
83
84
95
96
97
98
99
__prepare__
DdsImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.DdsImagePlugin
__module__
__qualname__
DDS
format
DirectDraw Surface
format_description
_open
DdsImageFile._open
load_seek
DdsImageFile.load_seek
__orig_bases__
register_open
register_save
register_extension
.dds
PIL\DdsImagePlugin.py
('.0', 'mask')
<module PIL.DdsImagePlugin>
('__class__',)
('prefix',)
('self', 'msg', 'header_size', 'header_bytes', 'header', 'flags', 'height', 'width', 'pitch', 'depth', 'mipmaps', 'pfsize', 'pfflags', 'fourcc', 'bitcount', 'masks', 'rawmode', 'data_start', 'n', 'dxgi_format')
('im', 'fp', 'filename', 'msg', 'rawmode', 'masks', 'pixel_flags', 'bitcount', 'r', 'g', 'b', 'a')
('self', 'pos')

------------------------------ [modulecode_PIL.EpsImagePlugin] ------------------------------
gs_windows_binary
0
too many values to unpack (expected 4)
too many values to unpack (expected 2)
1
72.0
2
3
tempfile
mkstemp
os
close
name
fp
wb
__enter__
__exit__
seek
io
SEEK_END
tell
(0,)
lengthfile
read
min
102400
f
write
(None, None, None)
pngalpha
ppmraw
gs
-q
-g%dx%d
-r%fx%f
-dBATCH
-dNOPAUSE
-dSAFER
-sDEVICE=

-sOutputFile=
-c
 
 translate
-f
showpage
unlink
infile_temp
Unable to locate Ghostscript on paths
subprocess
STARTUPINFO
dwFlags
STARTF_USESHOWWINDOW
check_call
command
('startupinfo',)
Image
open
load
im
copy
Render an image using Ghostscript
deprecate
('PSFile', 11, 'If you need the functionality of this class you will need to implement it yourself.')
('action',)
char
b''
(1,)
c
b'\r\n'
s
append
self
latin-1
[None, 4, None]
b'%!PS'
i32
3335770309
_find_offset
RGB
mode
_size
bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
check_required_header_comments
EpsImageFile._open.<locals>.check_required_header_comments
bytes_read
255
byte_arr
37
not an EPS file
reading_comments
[None, 13, None]
b'%%EndComments'
split
match
re
error
group
(1, 2)
info
BoundingBox
eps
(0, 0)
size
tile
field
[None, 8, None]
PS-Adobe
[9, None, None]
%
bad EPS header
[None, 11, None]
b'%ImageData:'
11
(None, 7)
1
8
mode_map
cannot determine EPS bounding box
EPS header missing "%!PS-Adobe" comment
EPS header missing "%%BoundingBox" comment
(4,)
(8,)
4
Ghostscript
L
(8, 1, b'image')
(8, 3, b'false 3 colorimage')
CMYK
(8, 4, b'false 4 colorimage')
image mode is not supported
(b'%!PS-Adobe-3.0 EPSF-3.0\n',)
(b'%%Creator: PIL 0.1 EpsEncode\n',)
b'%%%%BoundingBox: 0 0 %d %d\n'
(b'%%Pages: 1\n',)
(b'%%EndComments\n',)
(b'%%Page: 1 1\n',)
b'%%ImageData: %d %d '
b'%d %d 0 1 1 "%s"\n'
(b'gsave\n',)
(b'10 dict begin\n',)
b'/buf %d string def\n'
operator
b'%d %d scale\n'
b'%d %d 8\n'
b'[%d 0 0 -%d 0 %d]\n'
(b'{ currentfile buf readhexstring pop } bind\n',)
b'\n'
flush
ImageFile
_save
(b'\n%%%%EndBinary\n',)
(b'grestore end\n',)
EPS Writer for the Python Imaging Library.
__doc__
__file__
__spec__
origin
has_location
__cached__
sys
('Image', 'ImageFile')
_binary
('i32le',)
i32le
_deprecate
('deprecate',)
compile
('^%%([^:]*):[ \\t]*(.*)[ \\t]*$',)
('^%[%!\\w]([^:]*)[ \\t]*$',)
shutil
('gswin32c', 'gswin64c', 'gs')
binary
which
has_ghostscript
(1, False)
PIL.EpsImagePlugin
__module__

    Wrapper for bytesio object that treats either CR or LF as end of line.
    This class is no longer used internally, but kept for backwards compatibility.
    
PSFile
__qualname__
__init__
PSFile.__init__
SEEK_SET
PSFile.seek
readline
PSFile.readline
()
_accept
__prepare__
EpsImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
EPS File Parser for the Python Imaging Library
EPS
format
Encapsulated Postscript
format_description
{1: 'L', 2: 'LAB', 3: 'RGB', 4: 'CMYK'}
_open
EpsImageFile._open
EpsImageFile._find_offset
EpsImageFile.load
load_seek
EpsImageFile.load_seek
__orig_bases__
register_open
register_save
register_extensions
.ps
.eps
register_mime
application/postscript
PIL\EpsImagePlugin.py
<module PIL.EpsImagePlugin>
('__class__',)
('tile', 'size', 'fp', 'scale', 'transparency', 'decoder', 'offset', 'data', 'length', 'bbox', 'res', 'out_fd', 'outfile', 'infile_temp', 'infile', 'in_fd', 'f', 'fsize', 'lengthfile', 's', 'device', 'command', 'msg', 'startupinfo', 'out_im', 'im')
('self', 'fp')
('prefix',)
('self', 'fp', 's', 'length', 'offset', 'msg')
('self', 'length', 'offset', 'byte_arr', 'bytes_mv', 'bytes_read', 'reading_comments', 'check_required_header_comments', 'byte', 'msg', 's', 'm', 'e', 'k', 'v', 'box', 'image_data_values', 'columns', 'rows', 'bit_depth', 'mode_id')
('im', 'fp', 'filename', 'eps', 'operator', 'msg')
('msg', 'self')
('self',)
('self', 'scale', 'transparency')
('self', 'args', 'kwargs')
('self', 's', 'c')
('self', 'offset', 'whence')

------------------------------ [modulecode_PIL.ExifTags] ------------------------------

This module provides constants and clear-text names for various
well-known EXIF tags.

__doc__
__file__
__spec__
origin
has_location
__cached__
enum
('IntEnum',)
0
IntEnum
__prepare__
Base
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ExifTags
__module__
__qualname__
1
InteropIndex
11
ProcessingSoftware
254
NewSubfileType
255
SubfileType
256
ImageWidth
257
ImageLength
258
BitsPerSample
259
Compression
262
PhotometricInterpretation
263
Thresholding
264
CellWidth
265
CellLength
266
FillOrder
269
DocumentName
270
ImageDescription
271
Make
272
Model
273
StripOffsets
274
Orientation
277
SamplesPerPixel
278
RowsPerStrip
279
StripByteCounts
280
MinSampleValue
281
MaxSampleValue
282
XResolution
283
YResolution
284
PlanarConfiguration
285
PageName
288
FreeOffsets
289
FreeByteCounts
290
GrayResponseUnit
291
GrayResponseCurve
292
T4Options
293
T6Options
296
ResolutionUnit
297
PageNumber
301
TransferFunction
305
Software
306
DateTime
315
Artist
316
HostComputer
317
Predictor
318
WhitePoint
319
PrimaryChromaticities
320
ColorMap
321
HalftoneHints
322
TileWidth
323
TileLength
324
TileOffsets
325
TileByteCounts
330
SubIFDs
332
InkSet
333
InkNames
334
NumberOfInks
336
DotRange
337
TargetPrinter
338
ExtraSamples
339
SampleFormat
340
SMinSampleValue
341
SMaxSampleValue
342
TransferRange
343
ClipPath
344
XClipPathUnits
345
YClipPathUnits
346
Indexed
347
JPEGTables
351
OPIProxy
512
JPEGProc
513
JpegIFOffset
514
JpegIFByteCount
515
JpegRestartInterval
517
JpegLosslessPredictors
518
JpegPointTransforms
519
JpegQTables
520
JpegDCTables
521
JpegACTables
529
YCbCrCoefficients
530
YCbCrSubSampling
531
YCbCrPositioning
532
ReferenceBlackWhite
700
XMLPacket
4096
RelatedImageFileFormat
4097
RelatedImageWidth
4098
RelatedImageLength
18246
Rating
18249
RatingPercent
32781
ImageID
33421
CFARepeatPatternDim
33423
BatteryLevel
33432
Copyright
33434
ExposureTime
33437
FNumber
33723
IPTCNAA
34377
ImageResources
34665
ExifOffset
34675
InterColorProfile
34850
ExposureProgram
34852
SpectralSensitivity
34853
GPSInfo
34855
ISOSpeedRatings
34856
OECF
34857
Interlace
34858
TimeZoneOffset
34859
SelfTimerMode
34864
SensitivityType
34865
StandardOutputSensitivity
34866
RecommendedExposureIndex
34867
ISOSpeed
34868
ISOSpeedLatitudeyyy
34869
ISOSpeedLatitudezzz
36864
ExifVersion
36867
DateTimeOriginal
36868
DateTimeDigitized
36880
OffsetTime
36881
OffsetTimeOriginal
36882
OffsetTimeDigitized
37121
ComponentsConfiguration
37122
CompressedBitsPerPixel
37377
ShutterSpeedValue
37378
ApertureValue
37379
BrightnessValue
37380
ExposureBiasValue
37381
MaxApertureValue
37382
SubjectDistance
37383
MeteringMode
37384
LightSource
37385
Flash
37386
FocalLength
37389
Noise
37393
ImageNumber
37394
SecurityClassification
37395
ImageHistory
37398
TIFFEPStandardID
37500
MakerNote
37510
UserComment
37520
SubsecTime
37521
SubsecTimeOriginal
37522
SubsecTimeDigitized
37888
AmbientTemperature
37889
Humidity
37890
Pressure
37891
WaterDepth
37892
Acceleration
37893
CameraElevationAngle
40091
XPTitle
40092
XPComment
40093
XPAuthor
40094
XPKeywords
40095
XPSubject
40960
FlashPixVersion
40961
ColorSpace
40962
ExifImageWidth
40963
ExifImageHeight
40964
RelatedSoundFile
40965
ExifInteroperabilityOffset
41483
FlashEnergy
41484
SpatialFrequencyResponse
41486
FocalPlaneXResolution
41487
FocalPlaneYResolution
41488
FocalPlaneResolutionUnit
41492
SubjectLocation
41493
ExposureIndex
41495
SensingMethod
41728
FileSource
41729
SceneType
41730
CFAPattern
41985
CustomRendered
41986
ExposureMode
41987
WhiteBalance
41988
DigitalZoomRatio
41989
FocalLengthIn35mmFilm
41990
SceneCaptureType
41991
GainControl
41992
Contrast
41993
Saturation
41994
Sharpness
41995
DeviceSettingDescription
41996
SubjectDistanceRange
42016
ImageUniqueID
42032
CameraOwnerName
42033
BodySerialNumber
42034
LensSpecification
42035
LensMake
42036
LensModel
42037
LensSerialNumber
42080
CompositeImage
42081
CompositeImageCount
42082
CompositeImageExposureTimes
42240
Gamma
50341
PrintImageMatching
50706
DNGVersion
50707
DNGBackwardVersion
50708
UniqueCameraModel
50709
LocalizedCameraModel
50710
CFAPlaneColor
50711
CFALayout
50712
LinearizationTable
50713
BlackLevelRepeatDim
50714
BlackLevel
50715
BlackLevelDeltaH
50716
BlackLevelDeltaV
50717
WhiteLevel
50718
DefaultScale
50719
DefaultCropOrigin
50720
DefaultCropSize
50721
ColorMatrix1
50722
ColorMatrix2
50723
CameraCalibration1
50724
CameraCalibration2
50725
ReductionMatrix1
50726
ReductionMatrix2
50727
AnalogBalance
50728
AsShotNeutral
50729
AsShotWhiteXY
50730
BaselineExposure
50731
BaselineNoise
50732
BaselineSharpness
50733
BayerGreenSplit
50734
LinearResponseLimit
50735
CameraSerialNumber
50736
LensInfo
50737
ChromaBlurRadius
50738
AntiAliasStrength
50739
ShadowScale
50740
DNGPrivateData
50741
MakerNoteSafety
50778
CalibrationIlluminant1
50779
CalibrationIlluminant2
50780
BestQualityScale
50781
RawDataUniqueID
50827
OriginalRawFileName
50828
OriginalRawFileData
50829
ActiveArea
50830
MaskedAreas
50831
AsShotICCProfile
50832
AsShotPreProfileMatrix
50833
CurrentICCProfile
50834
CurrentPreProfileMatrix
50879
ColorimetricReference
50931
CameraCalibrationSignature
50932
ProfileCalibrationSignature
50934
AsShotProfileName
50935
NoiseReductionApplied
50936
ProfileName
50937
ProfileHueSatMapDims
50938
ProfileHueSatMapData1
50939
ProfileHueSatMapData2
50940
ProfileToneCurve
50941
ProfileEmbedPolicy
50942
ProfileCopyright
50964
ForwardMatrix1
50965
ForwardMatrix2
50966
PreviewApplicationName
50967
PreviewApplicationVersion
50968
PreviewSettingsName
50969
PreviewSettingsDigest
50970
PreviewColorSpace
50971
PreviewDateTime
50972
RawImageDigest
50973
OriginalRawFileDigest
50974
SubTileBlockSize
50975
RowInterleaveFactor
50981
ProfileLookTableDims
50982
ProfileLookTableData
51008
OpcodeList1
51009
OpcodeList2
51022
OpcodeList3
51041
NoiseProfile
__orig_bases__
value
name
{37388: 'SpatialFrequencyResponse'}
{37396: 'SubjectLocation'}
{37397: 'ExposureIndex'}
{33422: 'CFAPattern'}
{37387: 'FlashEnergy'}
{37398: 'TIFF/EPStandardID'}
TAGS
GPS
GPSVersionID
GPSLatitudeRef
2
GPSLatitude
3
GPSLongitudeRef
4
GPSLongitude
5
GPSAltitudeRef
6
GPSAltitude
7
GPSTimeStamp
8
GPSSatellites
9
GPSStatus
10
GPSMeasureMode
GPSDOP
12
GPSSpeedRef
13
GPSSpeed
14
GPSTrackRef
15
GPSTrack
16
GPSImgDirectionRef
17
GPSImgDirection
18
GPSMapDatum
19
GPSDestLatitudeRef
20
GPSDestLatitude
21
GPSDestLongitudeRef
22
GPSDestLongitude
23
GPSDestBearingRef
24
GPSDestBearing
25
GPSDestDistanceRef
26
GPSDestDistance
27
GPSProcessingMethod
28
GPSAreaInformation
29
GPSDateStamp
30
GPSDifferential
31
GPSHPositioningError
GPSTAGS
Interop
InteropVersion
RleatedImageHeight
IFD
Exif
Makernote
-1
IFD1
Unknown
Daylight
Fluorescent
Tungsten
Fine
Cloudy
Shade
DaylightFluorescent
DayWhiteFluorescent
CoolWhiteFluorescent
WhiteFluorescent
StandardLightA
StandardLightB
StandardLightC
D55
D65
D75
D50
ISO
Other
PIL\ExifTags.py
<module PIL.ExifTags>
('__class__',)


------------------------------ [modulecode_PIL.FliImagePlugin] ------------------------------
i16
4
44817
44818
14
0
3
fp
read
(128,)
_accept
[20, 22, None]
b'\x00\x00'
not an FLI/FLC file
6
n_frames
1
is_animated
P
mode
8
10
_size
i32
16
1000
70
info
duration
(0, 256, 1)
(16,)
128
_FliImageFile__offset
61696
s
61946
chunk_size
self
seek
os
SEEK_CUR
(6,)
(4, 11)
_palette
11
2
palette
too many values to unpack (expected 3)
o8
ImagePalette
raw
RGB
b''
-1
_FliImageFile__frame
_fp
tell
_FliImageFile__rewind
(0,)
(2,)
i
256
shift
_seek_check
_seek
load
cannot seek to frame 

(4,)
decodermaxblock
fli
(0, 0)
size
tile
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile', 'ImagePalette')
Image
ImageFile
_binary
('i16le',)
i16le
('i32le',)
i32le
('o8',)
__prepare__
FliImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.FliImagePlugin
__module__
__qualname__
FLI
format
Autodesk FLI/FLC Animation
format_description
_close_exclusive_fp_after_loading
_open
FliImageFile._open
FliImageFile._palette
FliImageFile.seek
FliImageFile._seek
FliImageFile.tell
__orig_bases__
register_open
register_extensions
.fli
.flc
PIL\FliImagePlugin.py
<module PIL.FliImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'duration', 'magic', 'palette', 'number_of_subchunks', 'chunk_size', '_', 'chunk_type')
('self', 'palette', 'shift', 'i', 'e', 's', 'n', 'r', 'g', 'b')
('self', 'frame', 'msg', 's', 'framesize')
('self', 'frame', 'f')
('self',)

------------------------------ [modulecode_PIL.FpxImagePlugin] ------------------------------
[None, 8, None]
olefile
MAGIC
OleFileIO
fp
ole
not an FPX file; invalid OLE file
root
clsid
56616700-C154-11CE-8553-00AA00A1F95B
not an FPX file; bad root CLSID
_open_index
(1,)
getproperties
Data Object Store 
06d

\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff
16777218
16777219
_size
max
size
1
64
2
i
maxid
16
33554434
i32
4
Invalid number of bands
colors
append
s
8
2147483647
MODES
too many values to unpack (expected 2)
mode
rawmode
jpeg
(0, 256, 1)
50331649
self
_open_subimage
Resolution 
04d
Subimage 0000 Header
openstream
read
(28,)
(36,)
20
28
32
subimage mismatch
seek
12
0
tile
min
x
xtile
y
ytile
raw
fill
[12, 16, None]
14
15
RGBA
('YCbCrK', 'CMYK')
tile_prefix
unknown/invalid compression
stream
[None, 2, None]
Subimage 0000 Data
ImageFile
load
close
__class__
__exit__
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
Image
_binary
('i32le',)
i32le
{(32766,): ('A', 'L'), (65536,): ('L', 'L'), (98304, 98302): ('RGBA', 'LA'), (131072, 131073, 131074): ('RGB', 'YCC;P'), (163840, 163841, 163842, 163838): ('RGBA', 'YCCA;P'), (196608, 196609, 196610): ('RGB', 'RGB'), (229376, 229377, 229378, 229374): ('RGBA', 'RGBA')}
_accept
__prepare__
FpxImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.FpxImagePlugin
__module__
__qualname__
FPX
format
FlashPix
format_description
_open
FpxImageFile._open
FpxImageFile._open_index
(1, 0)
FpxImageFile._open_subimage
FpxImageFile.load
FpxImageFile.close
FpxImageFile.__exit__
__orig_bases__
register_open
register_extension
.fpx
PIL\FpxImagePlugin.py
<module PIL.FpxImagePlugin>
('__class__',)
('self', 'args', '__class__')
('prefix',)
('self', 'e', 'msg')
('self', 'index', 'prop', 'size', 'i', 'id', 's', 'colors', 'bands', 'msg')
('self', 'index', 'subimage', 'stream', 'fp', 's', 'size', 'tilesize', 'offset', 'length', 'msg', 'x', 'y', 'xsize', 'ysize', 'xtile', 'ytile', 'i', 'x1', 'y1', 'compression', 'internal_color_conversion', 'jpeg_tables', 'rawmode', 'jpegmode')
('self', '__class__')
('self',)

------------------------------ [modulecode_PIL.FtexImagePlugin] ------------------------------
_accept
fp
read
(4,)
not an FTEX file
struct
unpack
<i
<2i
(8,)
_size
too many values to unpack (expected 2)
RGB
mode
1
seek
too many values to unpack (expected 1)
Format
DXT1
RGBA
bcn
(0, 0)
size
0
tile
UNCOMPRESSED
raw
('RGB', 0, 1)
Invalid texture compression format: 

close
BytesIO
[None, 4, None]
MAGIC

A Pillow loader for .ftc and .ftu files (FTEX)
Jerome Leclanche <jerome@leclan.ch>

The contents of this file are hereby released in the public domain (CC0)
Full text of the CC0 license:
  https://creativecommons.org/publicdomain/zero/1.0/

Independence War 2: Edge Of Chaos - Texture File Format - 16 October 2001

The textures used for 3D objects in Independence War 2: Edge Of Chaos are in a
packed custom format called FTEX. This file format uses file extensions FTC
and FTU.
* FTC files are compressed textures (using standard texture compression).
* FTU files are not compressed.
Texture File Format
The FTC and FTU texture files both use the same format. This
has the following structure:
{header}
{format_directory}
{data}
Where:
{header} = {
    u32:magic,
    u32:version,
    u32:width,
    u32:height,
    u32:mipmap_count,
    u32:format_count
}

* The "magic" number is "FTEX".
* "width" and "height" are the dimensions of the texture.
* "mipmap_count" is the number of mipmaps in the texture.
* "format_count" is the number of texture formats (different versions of the
same texture) in this file.

{format_directory} = format_count * { u32:format, u32:where }

The format value is 0 for DXT1 compressed textures and 1 for 24-bit RGB
uncompressed textures.
The texture data for a format starts at the position "where" in the file.

Each set of texture data in the file has the following structure:
{data} = format_count * { u32:mipmap_size, mipmap_size * { u8 } }
* "mipmap_size" is the number of bytes in that mip level. For compressed
textures this is the size of the texture data compressed with DXT1. For 24 bit
uncompressed textures, this is 3 * width * height. Following this are the image
bytes for that mipmap level.

Note: All data is stored in little-Endian (Intel) byte order.

__doc__
__file__
__spec__
origin
has_location
__cached__
enum
('IntEnum',)
IntEnum
('Image', 'ImageFile')
Image
ImageFile
b'FTEX'
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.FtexImagePlugin
__module__
__qualname__
__orig_bases__
FtexImageFile
FTEX
format
Texture File Format (IW2:EOC)
format_description
_open
FtexImageFile._open
load_seek
FtexImageFile.load_seek
register_open
register_extensions
.ftc
.ftu
PIL\FtexImagePlugin.py
<module PIL.FtexImagePlugin>
('__class__',)
('prefix',)
('self', 'msg', 'mipmap_count', 'format_count', 'format', 'where', 'mipmap_size', 'data')
('self', 'pos')

------------------------------ [modulecode_PIL.GbrImagePlugin] ------------------------------
i32
0
20
4
(1, 2)
fp
read
(4,)
not a GIMP brush
Unsupported GIMP brush version: 

(1, 4)
Unsupported GIMP brush color depth: 
1
28
b'GIMP'
not a GIMP brush, bad magic number
info
spacing
[None, -1, None]
L
mode
RGBA
_size
comment
Image
_decompression_bomb_check
size
_data_size
im
core
new
frombytes
load
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
ImageFile
_binary
('i32be',)
i32be
_accept
__prepare__
GbrImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.GbrImagePlugin
__module__
__qualname__
GBR
format
GIMP brush file
format_description
_open
GbrImageFile._open
GbrImageFile.load
__orig_bases__
register_open
register_extension
.gbr
PIL\GbrImagePlugin.py
<module PIL.GbrImagePlugin>
('__class__',)
('prefix',)
('self', 'header_size', 'msg', 'version', 'width', 'height', 'color_depth', 'comment_length', 'magic_number', 'comment')
('self',)

------------------------------ [modulecode_PIL.GifImagePlugin] ------------------------------
[None, 6, None]
b'GIF87a'
b'GIF89a'
fp
read
(1,)
0
3
1
2
(13,)
_accept
not a GIF file
info
version
i16
6
8
_size
tile
10
7
128
11
background
_is_palette_needed
ImagePalette
raw
RGB
global_palette
palette
_fp
tell
_GifImageFile__rewind
_n_frames
_is_animated
_seek
(0,)
self
seek
(1, False)
_seek_check
_GifImageFile__frame
im
no more images in GIF file
_GifImageFile__offset
dispose
-1
disposal_method
comment
load
cannot seek to frame 

data
b';'
s
b'!'
249
duration
28
254
b''
block
b'\n'
255
extension
[None, 11, None]
b'NETSCAPE2.0'
loop
b','
(9,)
too many values to unpack (expected 2)
4
size
max
Image
_decompression_bomb_check
64
paste
dispose_extent
_frame_palette
frame_transparency
_frame_transparency
LOADING_STRATEGY
LoadingStrategy
RGB_ALWAYS
RGBA
mode
P
L
copy
('copy',)
RGB_AFTER_DIFFERENT_PALETTE_ONLY
pyaccess
transparency
putpalettealpha
convert
Dither
FLOYDSTEINBERG
_rgb
GifImageFile._seek.<locals>._rgb
too many values to unpack (expected 4)
get
('RGB', 'RGBA')
('background', 0)
core
fill
_crop
gif
x0
y0
x1
y1
bits
('comment',)
('duration', 'extension')
_prev_im
putpalette
getdata
temp_mode
__class__
load_prepare
('RGBA',)
('RGB',)
RAWMODE
getmodebase
Palette
ADAPTIVE
('P',)
('palette',)
colors
('L',)

    Takes an image (or frame), returns an image in a mode that is appropriate
    for saving in a Gif.

    It may return the original image, or it may return an image converted to
    palette or 'L' mode.

    :param im: Image object
    :returns: Image object
    
(<class 'bytes'>, <class 'bytearray'>, <class 'list'>)
[None, 768, None]
getpalette
(0, 768, 1)
source_palette
used_palette_colors
append
remap_palette
_get_optimize

    Normalizes the palette for image.
      - Sets the palette to the incoming palette, if provided.
      - Ensures that there's a palette for L mode images
      - Optimizes the palette if necessary/desired.

    :param im: Image object
    :param palette: bytes object containing the source palette, or ....
    :param info: encoderinfo
    :returns: Image object
    
<genexpr>
_normalize_palette.<locals>.<genexpr>
_normalize_mode
items
encoderinfo
setdefault
_normalize_palette
_get_global_header
write
get_interlace
_write_local_header
(0, 0)
encoderconfig
ImageFile
_save
(b'\x00',)
_get_palette_bytes
ImageChops
subtract_modulo
getbbox
(False,)
('alpha_only',)
('duration',)
disposal
('disposal',)
itertools
chain
append_images
ImageSequence
Iterator
frame_count
im_frame
(<class 'list'>, <class 'tuple'>)
im_frames
_getbbox
background_im
('transparency', (0, 0, 0))
_get_background
new
bbox
include_color_table
crop
[None, 2, None]
_write_frame_data
{'save_all': True}
('optimize', True)
optimize
_write_multiple_frames
_write_single_frame
(b';',)
flush
('interlace', 1)
min
16
(None, None)
index
('disposal', 0)
o8
(249,)
(4,)
o16
('include_color_table',)
_get_color_table_size
color_table_size
_get_header_palette
palette_bytes
(8,)
_dump
wb
__enter__
__exit__
subprocess
check_call
ppmtogif
DEVNULL
('stdout', 'stderr')
ppmquant
256
Popen
PIPE
stdout
('stdin', 'stdout', 'stderr')
close
wait
CalledProcessError
(None, None, None)
os
unlink
('P', 'L')
('optimize', 0)
_FORCE_OPTIMIZE
width
height
262144
histogram
getmodebands
bit_length

    Palette optimization is a potentially expensive operation.

    This function determines if the palette should be optimized using
    some heuristics, then returns the list of palette entries in use.

    :param im: Image object
    :param info: encoderinfo
    :returns: list of indexes of palette entries in use, or None
    
math
ceil
log

    Returns the palette, null padded to the next power of 2 (*3) bytes
    suitable for direct inclusion in the GIF header

    :param palette_bytes: Unpadded palette bytes, in RGBRGB form
    :returns: Null padded palette
    

    Gets the palette for inclusion in the gif header

    :param im: Image object
    :returns: Bytes, len<=768 suitable for inclusion in gif header
    
getcolor
('cannot allocate more than 256 colors', 'cannot add non-opaque RGBA color to RGB palette')
b'87a'
('version',)
b'89a'
('background',)
b'GIF'
(255,)
(11,)
(3,)
(254,)
encode
comment_block
header
Return a list of strings representing a GIF header

    Legacy Method to get Gif data from image.

    Warning:: May modify image data.

    :param im: Image object
    :param palette: bytes object containing the source palette, or ....
    :param info: encoderinfo
    :returns: tuple of(list of header items, optimized palette)

    
PIL.GifImagePlugin
__module__
getdata.<locals>.Collector
__qualname__
getdata.<locals>.Collector.write
Collector
()

    Legacy Method

    Return a list of strings representing this image.
    The first string is a local image header, the rest contains
    encoded image data.

    To specify duration, add the time in milliseconds,
    e.g. ``getdata(im_frame, duration=1000)``

    :param im: Image object
    :param offset: Tuple of (x, y) pixels. Defaults to (0, 0)
    :param \**params: e.g. duration or other encoder info parameters
    :returns: List of bytes containing GIF encoded frame data

    
__doc__
__file__
__spec__
origin
has_location
__cached__
enum
('IntEnum',)
IntEnum
('Image', 'ImageChops', 'ImageFile', 'ImagePalette', 'ImageSequence')
_binary
('i16le',)
i16le
('o8',)
('o16le',)
o16le
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
.. versionadded:: 9.1.0
RGB_AFTER_FIRST
__orig_bases__
GifImageFile
GIF
format
Compuserve GIF
format_description
_close_exclusive_fp_after_loading
GifImageFile.data
GifImageFile._is_palette_needed
_open
GifImageFile._open
property
n_frames
GifImageFile.n_frames
is_animated
GifImageFile.is_animated
GifImageFile.seek
(True,)
GifImageFile._seek
GifImageFile.load_prepare
load_end
GifImageFile.load_end
GifImageFile.tell
{'1': 'L', 'L': 'L', 'P': 'P'}
_save_all
_save_netpbm
(None, None)
getheader
((0, 0),)
register_open
register_save
register_save_all
register_extension
.gif
register_mime
image/gif
PIL\GifImagePlugin.py
('.0', 'i')
<module PIL.GifImagePlugin>
('__class__',)
('prefix',)
('im', 'info_background', 'background', 'e')
('palette_bytes',)
('im', 'info', 'version', 'background', 'palette_bytes', 'color_table_size', 'header', 'comment_block', 'comment', 'i', 'subblock')
('palette_bytes', 'color_table_size', 'actual_target_size_diff')
('im', 'info', 'optimise', 'used_palette_colors', 'i', 'count', 'num_palette_colors', 'current_palette_size')
('im',)
('base_im', 'im_frame', 'delta')
('self', 'p', 'i')
('im', 'rgba')
('im', 'palette', 'info', 'source_palette', 'used_palette_colors', 'i', 'source_color', 'index', 'j')
('self', 's', 'msg', 'flags', 'bits', 'p')
('color', 'self')
('self',)
('im', 'fp', 'filename', 'save_all', 'palette')
('im', 'fp', 'filename')
('im', 'fp', 'filename', 'tempfile', 'f', 'quant_cmd', 'togif_cmd', 'quant_proc', 'togif_proc', 'retcode')
('self', 'frame', 'update_image', 'msg', 's', 'palette', 'info', 'frame_transparency', 'interlace', 'frame_dispose_extent', 'block', 'flags', 'dispose_bits', 'comment', 'x0', 'y0', 'x1', 'y1', 'bits', 'p', 'copy', '_rgb', 'dispose_size', 'dispose_mode', 'color', 'transparency', 'k')
('fp', 'im_frame', 'offset', 'params')
('fp', 'im', 'offset', 'flags', 'transparent_color_exists', 'transparency', 'used_palette_colors', 'duration', 'disposal', 'packed_flag', 'include_color_table', 'palette_bytes', 'color_table_size')
('im', 'fp', 'palette', 'duration', 'disposal', 'im_frames', 'frame_count', 'background_im', 'imSequence', 'im_frame', 'k', 'v', 'encoderinfo', 'previous', 'bbox', 'color', 'background', 'frame_data', 's', 'offset')
('im', 'fp', 'palette', 'im_out', 'k', 'v', 's', 'flags')
('self', 's')
('im', 'interlace')
('im', 'offset', 'params', 'Collector', 'fp')
('im', 'palette', 'info', 'used_palette_colors', 'im_mod', 'header')
('self', 'current')
('self', 'frame_im')
('self', 'temp_mode', '__class__')
('self', 'frame', 'last_frame', 'f', 'e', 'msg')
('self', 'data')

------------------------------ [modulecode_PIL.GimpGradientFile] ------------------------------
EPSILON
0.0
0.5
1.0
log
(0.5,)
max
sin
pi
2.0
linear
sqrt
2
0
gradient
too many values to unpack (expected 6)
entries
1
x1
ix
self
x0
segment
(0.5, 0.5)
xm
o8
255
rgb1
rgb0
3
palette
append
b''
RGBA
readline
[None, 13, None]
b'GIMP Gradient'
not a GIMP gradient file
startswith
(b'Name: ',)
strip
line
fp
split
[None, 11, None]
too many values to unpack (expected 2)
[3, 7, None]
[7, 11, None]
SEGMENTS
11
12
cannot handle HSV colour space

Stuff to translate curve segments to palette values (derived from
the corresponding code in GIMP, written by Federico Mena Quintero.
See the GIMP distribution for more information.)

__doc__
__file__
__spec__
origin
has_location
__cached__
math
('log', 'pi', 'sin', 'sqrt')
_binary
('o8',)
1e-10
curved
sine
sphere_increasing
sphere_decreasing
PIL.GimpGradientFile
__module__
GradientFile
__qualname__
(256,)
getpalette
GradientFile.getpalette
()
__prepare__
GimpGradientFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
File handler for GIMP's gradient format.
__init__
GimpGradientFile.__init__
__orig_bases__
PIL\GimpGradientFile.py
<module PIL.GimpGradientFile>
('__class__',)
('self', 'fp', 'msg', 'line', 'count', 'gradient', 'i', 's', 'w', 'x0', 'x1', 'xm', 'rgb0', 'rgb1', 'segment', 'cspace')
('middle', 'pos')
('self', 'entries', 'palette', 'ix', 'x0', 'x1', 'xm', 'rgb0', 'rgb1', 'segment', 'i', 'x', 'w', 'scale', 'r', 'g', 'b', 'a')


------------------------------ [modulecode_PIL.GimpPaletteFile] ------------------------------
(0, 256, 1)
o8
3
palette
readline
[None, 12, None]
b'GIMP Palette'
not a GIMP palette file
fp
re
match
b'\\w+:|#'
bad palette file
split
[None, 3, None]
bad palette entry
0
1
2
self
b''
rawmode
__doc__
__file__
__spec__
origin
has_location
__cached__
_binary
('o8',)
PIL.GimpPaletteFile
__module__
File handler for GIMP's palette format.
GimpPaletteFile
__qualname__
RGB
__init__
GimpPaletteFile.__init__
getpalette
GimpPaletteFile.getpalette
()
PIL\GimpPaletteFile.py
<module PIL.GimpPaletteFile>
('self', 'fp', 'msg', 'i', 's', 'v')
('self',)


------------------------------ [modulecode_PIL.GribStubImagePlugin] ------------------------------
_handler

    Install application-specific GRIB image handler.

    :param handler: Handler object.
    
[None, 4, None]
b'GRIB'
7
1
fp
tell
_accept
read
(8,)
Not a GRIB file
seek
F
mode
(1, 1)
_size
_load
open
save
GRIB save handler not installed
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
Image
0
ImageFile
register_handler
StubImageFile
__prepare__
GribStubImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.GribStubImagePlugin
__module__
__qualname__
GRIB
format
format_description
_open
GribStubImageFile._open
GribStubImageFile._load
__orig_bases__
_save
register_open
register_save
register_extension
.grib
PIL\GribStubImagePlugin.py
<module PIL.GribStubImagePlugin>
('__class__',)
('prefix',)
('self',)
('self', 'offset', 'msg', 'loader')
('im', 'fp', 'filename', 'msg')
('handler',)

------------------------------ [modulecode_PIL.Hdf5StubImagePlugin] ------------------------------
_handler

    Install application-specific HDF5 image handler.

    :param handler: Handler object.
    
[None, 8, None]
b'\x89HDF\r\n\x1a\n'
fp
tell
_accept
read
(8,)
Not an HDF file
seek
F
mode
(1, 1)
_size
_load
open
save
HDF5 save handler not installed
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
1
Image
0
ImageFile
register_handler
StubImageFile
__prepare__
HDF5StubImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.Hdf5StubImagePlugin
__module__
__qualname__
HDF5
format
format_description
_open
HDF5StubImageFile._open
HDF5StubImageFile._load
__orig_bases__
_save
register_open
register_save
register_extensions
.h5
.hdf
PIL\Hdf5StubImagePlugin.py
<module PIL.Hdf5StubImagePlugin>
('__class__',)
('prefix',)
('self',)
('self', 'offset', 'msg', 'loader')
('im', 'fp', 'filename', 'msg')
('handler',)

------------------------------ [modulecode_PIL.IcnsImagePlugin] ------------------------------
struct
unpack
>4sI
read
HEADERSIZE
too many values to unpack (expected 2)
seek
(4,)
b'\x00\x00\x00\x00'
Unknown signature, expecting 0x00000000
read_32
4
0
2
1
3
Image
frombuffer
RGB
raw
new
(0, 3, 1)
sizesq
bytesleft
fobj
(1,)
128
125
data
append
byte
blocksize
Error reading channel [

 left]
L
pixel_size
b''
im
putband

    Read a 32bit RGB icon resource.  Seems to be either uncompressed or
    an RLE packbits-like scheme.
    
A
(12,)
[None, 8, None]
b'\x89PNG\r\n\x1a\n'
PngImagePlugin
PngImageFile
_decompression_bomb_check
size
RGBA
[None, 4, None]
b'\xffO\xffQ'
b'\r\n\x87\n'
b'\x00\x00\x00\x0cjP  \r\n\x87\n'
enable_jpeg2k
Unsupported icon subimage format (rebuild PIL with JPEG 2000 support to fix this)
BytesIO
Jpeg2KImagePlugin
Jpeg2KImageFile
mode
convert
('RGBA',)
Unsupported icon subimage format
dct
nextheader
_accept
not an icns file
i
invalid block header
io
SEEK_CUR

        fobj is a file-like object as an icns resource
        
SIZES
items
self
sizes
itersizes
No 32bit icon resources found
max
get
update

        Get an icon resource as {channel: array}.  Note that
        the arrays are bottom-up like windows bitmaps and will likely
        need to be flipped or transposed in some way.
        
bestsize
dataforsize
('RGBA', None)
('RGB',)
copy
putalpha
IcnsFile
fp
icns
info
best_size
_size
info_size
index
This is not one of the allowed sizes of this image
load
load_prepare
getimage
flush
{b'ic07': 128, b'ic08': 256, b'ic09': 512, b'ic10': 1024, b'ic11': 32, b'ic12': 64, b'ic13': 256, b'ic14': 512}
encoderinfo
append_images
width
resize
save
png
getvalue
size_streams
entries
type
stream
write
MAGIC
8
pack
>i
(b'TOC ',)

    Saves the image as a series of PNG files,
    that are then combined into a .icns file.
    
<genexpr>
_save.<locals>.<genexpr>
__doc__
__file__
__spec__
origin
has_location
__cached__
os
sys
('Image', 'ImageFile', 'PngImagePlugin', 'features')
ImageFile
features
check_codec
('jpg_2000',)
('Jpeg2KImagePlugin',)
b'icns'
read_32t
read_mk
read_png_or_jpeg2000
PIL.IcnsImagePlugin
__module__
__qualname__
(512, 512, 2)
b'ic10'
(512, 512, 1)
b'ic09'
(256, 256, 2)
b'ic14'
(256, 256, 1)
b'ic08'
(128, 128, 2)
b'ic13'
(128, 128, 1)
b'ic07'
b'it32'
b't8mk'
(64, 64, 1)
b'icp6'
(32, 32, 2)
b'ic12'
(48, 48, 1)
b'ih32'
b'h8mk'
(32, 32, 1)
b'icp5'
b'il32'
b'l8mk'
(16, 16, 2)
b'ic11'
(16, 16, 1)
b'icp4'
b'is32'
b's8mk'
__init__
IcnsFile.__init__
IcnsFile.itersizes
IcnsFile.bestsize
IcnsFile.dataforsize
(None,)
IcnsFile.getimage
()
__prepare__
IcnsImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>

    PIL image support for Mac OS .icns files.
    Chooses the best resolution, but will possibly load
    a different size image if you mutate the size attribute
    before calling 'load'.

    The info dictionary has a key 'sizes' that is a list
    of sizes that the icns file has.
    
ICNS
format
Mac OS icns resource
format_description
_open
IcnsImageFile._open
property
IcnsImageFile.size
setter
IcnsImageFile.load
__orig_bases__
_save
register_open
register_extension
.icns
register_save
register_mime
image/icns
PIL\IcnsImagePlugin.py
('.0', 'entry')
<module PIL.IcnsImagePlugin>
('__class__',)
('self', 'fobj', 'dct', 'sig', 'filesize', 'msg', 'i', 'blocksize')
('prefix',)
('self',)
('im', 'fp', 'filename', 'sizes', 'provided_images', 'size_streams', 'size', 'image', 'temp', 'entries', 'type', 'stream', 'file_length', 'entry')
('self', 'sizes', 'msg')
('self', 'size', 'dct', 'code', 'reader', 'desc')
('self', 'size', 'channels', 'im')
('self', 'sizes', 'size', 'fmts', 'fmt', 'reader')
('self', 'px', 'im')
('fobj',)
('fobj', 'start_length', 'size', 'start', 'length', 'pixel_size', 'sizesq', 'indata', 'im', 'band_ix', 'data', 'bytesleft', 'byte', 'blocksize', 'i', 'msg', 'band')
('fobj', 'start_length', 'size', 'start', 'length', 'sig', 'msg')
('fobj', 'start_length', 'size', 'start', 'pixel_size', 'sizesq', 'band')
('fobj', 'start_length', 'size', 'start', 'length', 'sig', 'im', 'msg', 'jp2kstream', 'f')
('self', 'value', 'info_size', 'simple_sizes', 'msg')

------------------------------ [modulecode_PIL.IcoImagePlugin] ------------------------------
write
_MAGIC
encoderinfo
get
('bitmap_format',)
bmp
sizes
[(16, 16), (24, 24), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)]
append_images
size
too many values to unpack (expected 2)
sorted
0
1
256
provided_ims
frames
append
BmpImagePlugin
SAVE
mode
bits_used
provided_im
copy
thumbnail
Image
Resampling
LANCZOS
{'reducing_gap': None}
o16
tell
16
fp
o8
[1, None, None]
(32, 0)
(b'\x00',)
(b'\x00\x00',)
BytesIO
save
dib
32
new
1
ImageFile
_save
raw
(0, 0)
('1', 0, -1)
png
image_io
seek
(0,)
read
[None, 8, None]
o32
2
[12, None, None]
offset
[None, 4, None]
(6,)
_accept
not an ICO file
buf
entry
i16
4
nb_items
(16,)
width
height
nb_color
reserved
3
planes
bpp
6
i32
8
12
('width', 'height')
icon_header
ceil
log
color_depth
dim
square
self
<lambda>
IcoFile.__init__.<locals>.<lambda>
('key',)
reverse

        Parse image from file-like object containing ico file data
        

        Get a list of all available icon sizes and color depths.
        
frame
getentryindex

        Get an image from the icon
        
(8,)
PngImagePlugin
PngImageFile
_decompression_bomb_check
DibImageFile
_size
tile
too many values to unpack (expected 4)
[3, None, 4]
frombuffer
L
('L', 0, -1)
w
1;I
-1
convert
('RGBA',)
putalpha
im

        Get an image from frame idx
        
IcoFile
ico
info
load
This is not one of the allowed sizes of this image
getimage
pyaccess
warnings
warn
('Image was not the expected size',)
__doc__
__file__
__spec__
origin
has_location
__cached__
math
('ceil', 'log')

('BmpImagePlugin', 'Image', 'ImageFile', 'PngImagePlugin')
_binary
('i16le',)
i16le
('i32le',)
i32le
('o8',)
('o16le',)
o16le
('o32le',)
o32le
b'\x00\x00\x01\x00'
PIL.IcoImagePlugin
__module__
__qualname__
__init__
IcoFile.__init__
IcoFile.sizes
(False,)
IcoFile.getentryindex
IcoFile.getimage
IcoFile.frame
()
__prepare__
IcoImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>

    PIL read-only image support for Microsoft Windows .ico files.

    By default the largest resolution image in the file will be loaded. This
    can be changed by altering the 'size' attribute before calling 'load'.

    The info dictionary has a key 'sizes' that is a list of the sizes available
    in the icon file.

    Handles classic, XP and Vista icon formats.

    When saving, PNG compression is used. Support for this was only added in
    Windows Vista. If you are unable to view the icon in Windows, convert the
    image to "RGBA" mode before saving.

    This plugin is a refactored version of Win32IconImagePlugin by Bryan Davis
    <casadebender@gmail.com>.
    https://code.google.com/archive/p/casadebender/wikis/Win32IconImagePlugin.wiki
    
ICO
format
Windows Icon
format_description
_open
IcoImageFile._open
property
IcoImageFile.size
setter
IcoImageFile.load
load_seek
IcoImageFile.load_seek
__orig_bases__
register_open
register_save
register_extension
.ico
register_mime
image/x-icon
PIL\IcoImagePlugin.py
('x',)
<module PIL.IcoImagePlugin>
('__class__',)
('self', 'buf', 's', 'msg', 'i', 'icon_header', 'j')
('prefix',)
('self',)
('im', 'fp', 'filename', 'bmp', 'sizes', 'frames', 'provided_ims', 'width', 'height', 'size', 'provided_im', 'bits', 'bits_used', 'other_im', 'frame', 'offset', 'colors', 'image_io', 'and_mask', 'image_bytes', 'bytes_len', 'current')
('self', 'idx', 'header', 'data', 'im', 'd', 'e', 'o', 'a', 'bpp', 'alpha_bytes', 'mask', 'w', 'total_bytes', 'and_mask_offset', 'mask_data')
('self', 'size', 'bpp', 'i', 'h')
('self', 'size', 'bpp')
('self', 'im', 'index', 'sizes')
('self', 'value', 'msg')

------------------------------ [modulecode_PIL.ImImagePlugin] ------------------------------
b'\n'
fp
read
(100,)
not an IM file
seek
(0,)
0
L
info
MODE
(512, 512)
SIZE
1
FRAMES
rawmode
self
(1,)
b'\r'
b'\x00'
b'\x1a'
readline
[-2, None, None]
b'\r\n'
[None, -2, None]
[-1, None, None]
[None, -1, None]
split
match
s
re
error
group
(1, 2)
too many values to unpack (expected 2)
decode
('latin-1', 'replace')
SCALE
replace
('*', ',')
number
(',',)
OPEN
COMMENT
append
v
k
TAGS
n
Syntax error in IM header: 
('ascii', 'replace')
Not an IM file
_size
mode
[None, 1, None]
File truncated
LUT
(768,)
(0, 256, 1)
256
512
['L', 'LA', 'P', 'PA']
greyscale
linear
[None, 256, None]
lut
P
LA
PA
PA;L
ImagePalette
raw
RGB;L
palette
RGB
frame
tell
_ImImageFile__offset
_fp
[None, 2, None]
F;
[2, None, None]
8
16
32
bit
(0, 0)
size
3
-1
tile
RGB;T
RYB;T
('G', 0, -1)
('R', 0, -1)
2
('B', 0, -1)
_seek_check
1
7
SAVE
Cannot save 

 images as IM
encoderinfo
get
('frames', 1)
write
Image type: 
 image

ascii
splitext
Name: 


Image size (x*y): %d*%d

encode
('ascii',)
File size (no of images): 
(b'Lut: 1\r\n',)
511
im
getpalette
('RGB', 'RGB;L')
b''
(0, 3, 1)
colors
ImageFile
_save
__doc__
__file__
__spec__
origin
has_location
__cached__
os
('Image', 'ImageFile', 'ImagePalette')
Image
Comment
Date
DATE
Digitalization equipment
EQUIPMENT
File size (no of images)
Lut
Name
NAME
Scale (x,y)
Image size (x*y)
Image type
{'0 1 image': ('1', '1'), 'L 1 image': ('1', '1'), 'Greyscale image': ('L', 'L'), 'Grayscale image': ('L', 'L'), 'RGB image': ('RGB', 'RGB;L'), 'RLB image': ('RGB', 'RLB'), 'RYB image': ('RGB', 'RLB'), 'B1 image': ('1', '1'), 'B2 image': ('P', 'P;2'), 'B4 image': ('P', 'P;4'), 'X 24 image': ('RGB', 'RGB'), 'L 32 S image': ('I', 'I;32'), 'L 32 F image': ('F', 'F;32'), 'RGB3 image': ('RGB', 'RGB;T'), 'RYB3 image': ('RGB', 'RYB;T'), 'LA image': ('LA', 'LA;L'), 'PA image': ('LA', 'PA;L'), 'RGBA image': ('RGBA', 'RGBA;L'), 'RGBX image': ('RGBX', 'RGBX;L'), 'CMYK image': ('CMYK', 'CMYK;L'), 'YCC image': ('YCbCr', 'YCbCr;L')}
('8', '8S', '16', '16S', '32', '32F')
i
F
L 
 image
L*
('16', '16L', '16B')
I;
('32S',)
I
(2, 33, 1)
compile
(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$',)
__prepare__
ImImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ImImagePlugin
__module__
__qualname__
IM
format
IFUNC Image Memory
format_description
_close_exclusive_fp_after_loading
_open
ImImageFile._open
property
n_frames
ImImageFile.n_frames
is_animated
ImImageFile.is_animated
ImImageFile.seek
ImImageFile.tell
__orig_bases__
{'1': ('0 1', '1'), 'L': ('Greyscale', 'L'), 'LA': ('LA', 'LA;L'), 'P': ('Greyscale', 'P'), 'PA': ('LA', 'PA;L'), 'I': ('L 32S', 'I;32S'), 'I;16': ('L 16', 'I;16'), 'I;16L': ('L 16L', 'I;16L'), 'I;16B': ('L 16B', 'I;16B'), 'F': ('L 32F', 'F;32F'), 'RGB': ('RGB', 'RGB;L'), 'RGBA': ('RGBA', 'RGBA;L'), 'RGBX': ('RGBX', 'RGBX;L'), 'CMYK': ('CMYK', 'CMYK;L'), 'YCbCr': ('YCC', 'YCbCr;L')}
register_open
register_save
register_extension
.im
PIL\ImImagePlugin.py
<module PIL.ImImagePlugin>
('__class__',)
('self', 'msg', 'n', 's', 'm', 'e', 'k', 'v', 'palette', 'greyscale', 'linear', 'i', 'offs', 'bits', 'size')
('im', 'fp', 'filename', 'image_type', 'rawmode', 'e', 'msg', 'frames', 'name', 'ext', 'im_palette', 'colors', 'palette', 'i')
('self',)
('s',)
('self', 'frame', 'bits', 'size', 'offs')

------------------------------ [modulecode_PIL.Image] ------------------------------
im

    Checks if an object is an image object.

    .. warning::

       This function is for internal use only.

    :param t: object to check if it's an image
    :returns: True if the object is an image
    
ImageMode
getmode
mode
height
width
bands
typestr
basemode

    Gets the "base" mode for given mode.  This function returns "L" for
    images that contain grayscale data, and "RGB" for images that
    contain color data.

    :param mode: Input mode.
    :returns: "L" or "RGB".
    :exception KeyError: If the input mode was not a standard mode.
    
basetype

    Gets the storage type mode.  Given a mode, this function returns a
    single-layer mode suitable for storing individual bands.

    :param mode: Input mode.
    :returns: "L", "I", or "F".
    :exception KeyError: If the input mode was not a standard mode.
    

    Gets a list of individual band names.  Given a mode, this function returns
    a tuple containing the names of individual bands (use
    :py:method:`~PIL.Image.getmodetype` to get the mode used to store each
    individual band.

    :param mode: Input mode.
    :returns: A tuple containing band names.  The length of the tuple
        gives the number of bands in an image of the given mode.
    :exception KeyError: If the input mode was not a standard mode.
    

    Gets the number of individual bands for this mode.

    :param mode: Input mode.
    :returns: The number of bands in this mode.
    :exception KeyError: If the input mode was not a standard mode.
    
_initialized
1

('BmpImagePlugin',)
BmpImagePlugin
0
('GifImagePlugin',)
GifImagePlugin
('JpegImagePlugin',)
JpegImagePlugin
('PpmImagePlugin',)
PpmImagePlugin
('PngImagePlugin',)
PngImagePlugin
Explicitly load standard file format drivers.
2
_plugins
logger
debug
Importing %s
PIL.
plugin
e
Image: failed to import %s: %s
OPEN
SAVE

    Explicitly initializes the Python Imaging Library. This function
    loads all available file format drivers.
    
()
DECODERS
decoder
core
_decoder
decoder 
 not available
ENCODERS
encoder
_encoder
encoder 
scale
offset
_E
(1, 0)
(0, 0)
_size
palette
info
readonly
pyaccess
_exif
size
Image
('P', 'PA')
copy
('ImagePalette',)
ImagePalette
self
fp
_exclusive_fp
_fp
close
DeferredError
Operation on closed image
Error closing: %s
map

        Closes the file pointer, if possible.

        This operation will destroy the image core and release its memory.
        The image data will be unusable afterward.

        This function is required to close images that have multiple frames or
        have not had their file read and closed by the
        :py:meth:`~PIL.Image.Image.load` method. See :ref:`file-handling` for
        more information.
        
load
_copy
.
tempfile
mkstemp
too many values to unpack (expected 2)
os
endswith
format
PPM
save_ppm
filename
save
getpalette
tobytes
<%s.%s image mode=%s size=%dx%d at 0x%X>
__module__
__name__
text
<%s.%s image mode=%s size=%dx%d>
IPython plain text display support
BytesIO
Could not save to 
 for display
getvalue
Helper function for iPython display hook.

        :param image_format: Image format.
        :returns: image as bytes, saved into the given format.
        
_repr_image
('PNG', 1)
('compress_level',)
iPython display hook support for PNG format.

        :returns: PNG version of the image as bytes
        
('JPEG',)
iPython display hook support for JPEG format.

        :returns: JPEG version of the image as bytes
        
{'version': 3}
1
('raw', 'L')
data
(None, None)
numpy
packaging.version
('parse',)
parse
parse_version
__version__
('1.23',)
warnings
warn
_conv_type_shape
new
shape
__init__
too many values to unpack (expected 5)
('L', 'LA', 'P', 'PA')
putpalette
frombytes
raw
args
b''
_getencoder
setimage
max
65536
4
encode
bufsize
too many values to unpack (expected 3)
output
append
encoder error 
 in tobytes

        Return image as a bytes object.

        .. warning::

            This method returns the raw image data from the internal
            storage.  For compressed image data (e.g. PNG, JPEG) use
            :meth:`~.save`, with a BytesIO parameter for in-memory
            data.

        :param encoder_name: What encoder to use.  The default is to
                             use the standard "raw" encoder.

                             A list of C encoders can be seen under
                             codecs section of the function array in
                             :file:`_imaging.c`. Python encoders are
                             registered within the relevant plugins.
        :param args: Extra arguments to the encoder.
        :returns: A :py:class:`bytes` object.
        
not a bitmap
('xbm',)
#define 
_width 


ascii
_height 
static char 
_bits[] = {

b'};'

        Returns the image converted to an X11 bitmap.

        .. note:: This method only works for mode "1" images.

        :param name: The name prefix to use for the bitmap variables.
        :returns: A string containing an X11 bitmap.
        :raises ValueError: If the mode is not "1"
        
_getdecoder
decode
not enough image data
cannot decode image data

        Loads this image with pixel data from a bytes object.

        This method is similar to the :py:func:`~PIL.Image.frombytes` function,
        but loads data into this image instead of creating a new image object.
        
dirty
getdata
rawmode
transparency
('LA', 'PA')
putpalettealpha
putpalettealphas
RGBA
startswith
('RGBA',)
RGB
cffi
USE_CFFI_ACCESS
('PyAccess',)
PyAccess
pixel_access

        Allocates storage for the image and loads the pixel data.  In
        normal cases, you don't need to call this method, since the
        Image class automatically loads an opened image when it is
        accessed for the first time.

        If the file associated with the image was opened by Pillow, then this
        method will close it. The exception to this is if the image has
        multiple frames, in which case the file will be left open for seek
        operations. See :ref:`file-handling` for more information.

        :returns: An image access object.
        :rtype: :ref:`PixelAccess` or :py:class:`PIL.PyAccess`
        
get
('transparency',)
P
('L', 'RGB')
illegal conversion
convert_matrix
_new
3
convert_transparency
Image.convert.<locals>.convert_transparency
L
quantize
('1', 'L', 'I')
('LA', 'RGBA')
convert_transparent
('L', 'RGB', 'P')
('Palette images with Transparency expressed in bytes should be converted to RGBA images',)
(1, 1)
getcolor
cannot allocate more than 256 colors
Couldn't allocate a palette color for transparency
trns_im
putpixel
convert
('RGB',)
getpixel
((0, 0),)
('LA', 'PA', 'RGBA')
Transparency for P mode should be bytes or int
Palette
ADAPTIVE
("Couldn't allocate palette entry for transparency",)
LAB
('RGB', 'RGBA', 'RGBX')
('ImageCms',)
ImageCms
createProfile
('sRGB',)
('LAB',)
buildTransform
apply
Dither
FLOYDSTEINBERG
getmodebase
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]
new_im

        Returns a converted copy of this image. For the "P" mode, this
        method translates pixels through the palette.  If mode is
        omitted, a mode is chosen so that all information in the image
        and the palette can be represented without a palette.

        The current version supports all possible conversions between
        "L", "RGB" and "CMYK". The ``matrix`` argument only supports "L"
        and "RGB".

        When translating a color image to greyscale (mode "L"),
        the library uses the ITU-R 601-2 luma transform::

            L = R * 299/1000 + G * 587/1000 + B * 114/1000

        The default method of converting a greyscale ("L") or "RGB"
        image into a bilevel (mode "1") image uses Floyd-Steinberg
        dither to approximate the original image luminosity levels. If
        dither is ``None``, all values larger than 127 are set to 255 (white),
        all other values to 0 (black). To use other thresholds, use the
        :py:meth:`~PIL.Image.Image.point` method.

        When converting from "RGBA" to "P" without a ``matrix`` argument,
        this passes the operation to :py:meth:`~PIL.Image.Image.quantize`,
        and ``dither`` and ``palette`` are ignored.

        When converting from "PA", if an "RGBA" palette is present, the alpha
        channel from the image will be used instead of the values from the palette.

        :param mode: The requested mode. See: :ref:`concept-modes`.
        :param matrix: An optional conversion matrix.  If given, this
           should be 4- or 12-tuple containing floating point values.
        :param dither: Dithering method, used when converting from
           mode "RGB" to "P" or from "RGB" or "L" to "1".
           Available methods are :data:`Dither.NONE` or :data:`Dither.FLOYDSTEINBERG`
           (default). Note that this is not used when ``matrix`` is supplied.
        :param palette: Palette to use when converting from mode "RGB"
           to "P".  Available palettes are :data:`Palette.WEB` or
           :data:`Palette.ADAPTIVE`.
        :param colors: Number of colors to use for the :data:`Palette.ADAPTIVE`
           palette. Defaults to 256.
        :rtype: :py:class:`~PIL.Image.Image`
        :returns: An :py:class:`~PIL.Image.Image` object.
        
0.5
min
255
matrix
<genexpr>
Image.convert.<locals>.<genexpr>
Quantize
MEDIANCUT
FASTOCTREE
LIBIMAGEQUANT
Fast Octree (method == 2) and libimagequant (method == 3) are the only valid methods for quantizing RGBA images
bad mode for palette image
only RGB or L mode images can be quantized to a palette
getpalettemode

        Convert the image to 'P' mode with the specified number
        of colors.

        :param colors: The desired number of colors, <= 256
        :param method: :data:`Quantize.MEDIANCUT` (median cut),
                       :data:`Quantize.MAXCOVERAGE` (maximum coverage),
                       :data:`Quantize.FASTOCTREE` (fast octree),
                       :data:`Quantize.LIBIMAGEQUANT` (libimagequant; check support
                       using :py:func:`PIL.features.check_feature` with
                       ``feature="libimagequant"``).

                       By default, :data:`Quantize.MEDIANCUT` will be used.

                       The exception to this is RGBA images. :data:`Quantize.MEDIANCUT`
                       and :data:`Quantize.MAXCOVERAGE` do not support RGBA images, so
                       :data:`Quantize.FASTOCTREE` is used by default instead.
        :param kmeans: Integer
        :param palette: Quantize to the palette of given
                        :py:class:`PIL.Image.Image`.
        :param dither: Dithering method, used when converting from
           mode "RGB" to "P" or from "RGB" or "L" to "1".
           Available methods are :data:`Dither.NONE` or :data:`Dither.FLOYDSTEINBERG`
           (default).
        :returns: A new image
        

        Copies this image. Use this method if you wish to paste things
        into an image, but still retain the original.

        :rtype: :py:class:`~PIL.Image.Image`
        :returns: An :py:class:`~PIL.Image.Image` object.
        
Coordinate 'right' is less than 'left'
Coordinate 'lower' is less than 'upper'
_crop

        Returns a rectangular region from this image. The box is a
        4-tuple defining the left, upper, right, and lower pixel
        coordinate. See :ref:`coordinate-system`.

        Note: Prior to Pillow 3.4.0, this was a lazy operation.

        :param box: The crop rectangle, as a (left, upper, right, lower)-tuple.
        :rtype: :py:class:`~PIL.Image.Image`
        :returns: An :py:class:`~PIL.Image.Image` object.
        
round
too many values to unpack (expected 4)
_decompression_bomb_check
crop

        Returns a rectangular region from the core image object im.

        This is equivalent to calling im.crop((x0, y0, x1, y1)), but
        includes additional sanity checks.

        :param im: a core image object
        :param box: The crop rectangle, as a (left, upper, right, lower)-tuple.
        :returns: A core image object.
        
expand
xmargin
('ImageFilter',)
ImageFilter
Callable
filter
filter argument should be ImageFilter.Filter instance or class
MultibandFilter
ims
getband
merge

        Filters this image using the given filter.  For a list of
        available filters, see the :py:mod:`~PIL.ImageFilter` module.

        :param filter: Filter kernel.
        :returns: An :py:class:`~PIL.Image.Image` object.

        Returns a tuple containing the name of each band in this image.
        For example, ``getbands`` on an RGB image returns ("R", "G", "B").

        :returns: A tuple containing band names.
        :rtype: tuple
        
getbbox

        Calculates the bounding box of the non-zero regions in the
        image.

        :param alpha_only: Optional flag, defaulting to ``True``.
           If ``True`` and the image has an alpha channel, trim transparent pixels.
           Otherwise, trim pixels when all channels are zero.
           Keyword-only argument.
        :returns: The bounding box is returned as a 4-tuple defining the
           left, upper, right, and lower pixel coordinate. See
           :ref:`coordinate-system`. If the image is completely empty, this
           method returns None.

        
('1', 'L', 'P')
histogram
(0, 256, 1)
out
getcolors

        Returns a list of colors used in this image.

        The colors will be in the image's mode. For example, an RGB image will
        return a tuple of (red, green, blue) color values, and a P image will
        return the index of the color in the palette.

        :param maxcolors: Maximum number of colors.  If this number is
           exceeded, this method returns None.  The default limit is
           256 colors.
        :returns: An unsorted list of (count, pixel) values.
        

        Returns the contents of this image as a sequence object
        containing pixel values.  The sequence object is flattened, so
        that values for line one follow directly after the values of
        line zero, and so on.

        Note that the sequence object returned by this method is an
        internal PIL data type, which only supports certain sequence
        operations.  To convert it to an ordinary sequence (e.g. for
        printing), use ``list(im.getdata())``.

        :param band: What band to return.  The default is to return
           all bands.  To return a single band, pass in the index
           value (e.g. 0 to get the "R" band from an "RGB" image).
        :returns: A sequence-like object.
        
extrema
getextrema

        Gets the minimum and maximum pixel values for each band in
        the image.

        :returns: For a single-band image, a 2-tuple containing the
           minimum and maximum pixel value.  For a multi-band image,
           a tuple containing one 2-tuple for each band.
        
get_name
Image._getxmp.<locals>.get_name
get_value
Image._getxmp.<locals>.get_value
ElementTree
('XMP data cannot be read without defusedxml dependency',)
fromstring
tag
split
('}',)
attrib
items
value
Exif
_loaded
('exif',)
Raw profile type exif
fromhex
('\n',)
[3, None, None]
tag_v2
_bigtiff
bigtiff
_endian
endian
load_from_fp
_offset
ExifTags
Base
Orientation
('XML:com.adobe.xmp',)
re
search
tiff:Orientation(="|>)([0-9])

        Gets EXIF data from the image.

        :returns: an :py:class:`~PIL.Image.Exif` object.
        
getexif
SubIFDs
ifds
exif
_get_ifd_dict
get_ifd
IFD
IFD1
(513,)
ifd1
_info
next
tell
_exif_offset
seek
read
(514,)
io
open
__enter__
__exit__
thumbnail_offset
_frame_pos
_seek
(0,)
child_images
(None, None, None)
ptr

        Returns a capsule that points to the internal image memory.

        :returns: A capsule object.
        

        Returns the image palette as a list.

        :param rawmode: The mode in which to return the palette. ``None`` will
           return the palette in its current mode.

           .. versionadded:: 9.1.0

        :returns: A list of color values [r, g, b, ...], or None if the
           image has no palette.
        

        If a P mode image has a "transparency" key in the info dictionary,
        remove the key and instead apply the transparency to the palette.
        Otherwise, the image is unchanged.
        

        Returns the pixel value at a given position.

        :param xy: The coordinate, given as (x, y). See
           :ref:`coordinate-system`.
        :returns: The pixel value.  If the image is a multi-layer image,
           this method returns a tuple.
        
getprojection

        Get projection to x and y axes

        :returns: Two sequences, indicating where there are non-zero
            pixels along the X-axis and the Y-axis, respectively.
        
('I', 'F')

        Returns a histogram for the image. The histogram is returned as a
        list of pixel counts, one for each pixel value in the source
        image. Counts are grouped into 256 bins for each band, even if
        the image has more than 8 bits per band. If the image has more
        than one band, the histograms for all bands are concatenated (for
        example, the histogram for an "RGB" image contains 768 values).

        A bilevel image (mode "1") is treated as a greyscale ("L") image
        by this method.

        If a mask is provided, the method returns a histogram for those
        parts of the image where the mask image is non-zero. The mask
        image must have the same size as the image, and be either a
        bi-level image (mode "1") or a greyscale image ("L").

        :param mask: An optional mask.
        :param extrema: An optional tuple of manually-specified extrema.
        :returns: A list containing pixel counts.
        
entropy

        Calculates and returns the entropy for the image.

        A bilevel image (mode "1") is treated as a greyscale ("L")
        image by this method.

        If a mask is provided, the method employs the histogram for
        those parts of the image where the mask image is non-zero.
        The mask image must have the same size as the image, and be
        either a bi-level image (mode "1") or a greyscale image ("L").

        :param mask: An optional mask.
        :param extrema: An optional tuple of manually-specified extrema.
        :returns: A float value representing the image entropy
        
isImageType
box
cannot determine region size; use 4-item box
('ImageColor',)
ImageColor
('LA', 'RGBA', 'RGBa')
_ensure_mutable
mask
paste

        Pastes another image into this image. The box argument is either
        a 2-tuple giving the upper left corner, a 4-tuple defining the
        left, upper, right, and lower pixel coordinate, or None (same as
        (0, 0)). See :ref:`coordinate-system`. If a 4-tuple is given, the size
        of the pasted image must match the size of the region.

        If the modes don't match, the pasted image is converted to the mode of
        this image (see the :py:meth:`~PIL.Image.Image.convert` method for
        details).

        Instead of an image, the source can be a integer or tuple
        containing pixel values.  The method then fills the region
        with the given color.  When creating RGB images, you can
        also use color strings as supported by the ImageColor module.

        If a mask is given, this method updates only the regions
        indicated by the mask. You can use either "1", "L", "LA", "RGBA"
        or "RGBa" images (if present, the alpha band is used as mask).
        Where the mask is 255, the given image is copied as is.  Where
        the mask is 0, the current value is preserved.  Intermediate
        values will mix the two images together, including their alpha
        channels if they have them.

        See :py:meth:`~PIL.Image.Image.alpha_composite` if you want to
        combine images with respect to their alpha channels.

        :param im: Source image or pixel value (integer or tuple).
        :param box: An optional 4-tuple giving the region to paste into.
           If a 2-tuple is used instead, it's treated as the upper left
           corner.  If omitted or None, the source is pasted into the
           upper left corner.

           If an image is given as the second argument and there is no
           third, the box defaults to (0, 0), and the second argument
           is interpreted as a mask image.
        :param mask: An optional mask image.
        
(<class 'list'>, <class 'tuple'>)
Source must be a tuple
Destination must be a tuple
(2, 4)
Source must be a 2 or 4-tuple
Destination must be a 2-tuple
Source must be non-negative
source
alpha_composite
'In-place' analog of Image.alpha_composite. Composites an image
        onto this image.

        :param im: image to composite over this one
        :param dest: Optional 2 tuple (left, top) specifying the upper
          left corner in this (destination) image.
        :param source: Optional 2 (left, top) tuple for the upper left
          corner in the overlay source image, or 4 tuple (left, top, right,
          bottom) for the bounds of the source rectangle

        Performance Note: Not currently implemented in-place in the core layer.
        
ImagePointHandler
point
callable
('I', 'I;16', 'F')
_getscaleoffset
point_transform
lut
F
point operation not supported for this mode

        Maps this image through a lookup table or function.

        :param lut: A lookup table, containing 256 (or 65536 if
           self.mode=="I" and mode == "L") values per band in the
           image.  A function can be used instead, it should take a
           single argument. The function is called once for each
           possible pixel value, and the resulting table is applied to
           all bands of the image.

           It may also be an :py:class:`~PIL.Image.ImagePointHandler`
           object::

               class Example(Image.ImagePointHandler):
                 def point(self, data):
                   # Return result
        :param mode: Output mode (default is same as input).  In the
           current version, this can only be used if the source image
           has mode "L" or "P", and the output has mode "1" or the
           source image mode is "I" and the output mode is "L".
        :returns: An :py:class:`~PIL.Image.Image` object.
        
A
setmode
(None, None)
illegal image mode
('1', 'L')
('L',)
fillband
putband
alpha
band

        Adds or replaces the alpha layer in this image.  If the image
        does not have an alpha layer, it's converted to "LA" or "RGBA".
        The new layer must be either "L" or "1".

        :param alpha: The new alpha layer.  This can either be an "L" or "1"
           image having the same size as this image, or an integer or
           other color value.
        
putdata

        Copies pixel data from a flattened sequence object into the image. The
        values should start at the upper left corner (0, 0), continue to the
        end of the line, followed directly by the first value of the second
        line, and so on. Data will be read until either the image or the
        sequence ends. The scale and offset values are used to adjust the
        sequence values: **pixel = value*scale + offset**.

        :param data: A flattened sequence object.
        :param scale: An optional scale value.  The default is 1.0.
        :param offset: An optional offset value.  The default is 0.0.
        
PA

        Attaches a palette to this image.  The image must be a "P", "PA", "L"
        or "LA" image.

        The palette sequence must contain at most 256 colors, made up of one
        integer value for each channel in the raw mode.
        For example, if the raw mode is "RGB", then it can contain at most 768
        values, made up of red, green and blue values for the corresponding pixel
        index in the 256 colors.
        If the raw mode is "RGBA", then it can contain at most 1024 values,
        containing red, green, blue and alpha values.

        Alternatively, an 8-bit string may be used instead of an integer sequence.

        :param data: A palette sequence (either a list or a string).
        :param rawmode: The raw mode of the palette. Either "RGB", "RGBA", or a mode
           that can be transformed to "RGB" or "RGBA" (e.g. "R", "BGR;15", "RGBA;L").
        
[None, 3, None]

        Modifies the pixel at the given position. The color is given as
        a single numerical value for single-band images, and a tuple for
        multi-band images. In addition to this, RGB and RGBA tuples are
        accepted for P and PA images.

        Note that this method is relatively slow.  For more extensive changes,
        use :py:meth:`~PIL.Image.Image.paste` or the :py:mod:`~PIL.ImageDraw`
        module instead.

        See:

        * :py:meth:`~PIL.Image.Image.paste`
        * :py:meth:`~PIL.Image.Image.putdata`
        * :py:mod:`~PIL.ImageDraw`

        :param xy: The pixel coordinate, given as (x, y). See
           :ref:`coordinate-system`.
        :param value: The pixel value.
        
('L', 'P')
(0, 768, 1)
palette_bytes
new_positions
palette_mode
('palette',)
;L
index

        Rewrites the image to reorder the palette.

        :param dest_map: A list of indexes into the original palette.
           e.g. ``[1,0]`` would swap a two item palette, and ``list(range(256))``
           is the identity transform.
        :param source_palette: Bytes or None.
        :returns:  An :py:class:`~PIL.Image.Image` object.

        
Image.remap_palette.<locals>.<genexpr>
_filters_support
math
ceil
Expands the box so it includes adjacent pixels
        that may be used by resampling with the given resampling filter.
        
;
Resampling
NEAREST
BICUBIC
BILINEAR
LANCZOS
BOX
HAMMING
Unknown resampling filter (
).
Image.Resampling.NEAREST
Image.Resampling.LANCZOS
Image.Resampling.BILINEAR
Image.Resampling.BICUBIC
Image.Resampling.BOX
Image.Resampling.HAMMING
 (
)
 Use 
, 
[None, -1, None]
 or 
-1
1.0
reducing_gap must be 1.0 or greater
('1', 'P')
LA
{'LA': 'La', 'RGBA': 'RGBa'}
resize
_get_safe_box
reduce
('box',)
reduce_box
resample

        Returns a resized copy of this image.

        :param size: The requested size in pixels, as a 2-tuple:
           (width, height).
        :param resample: An optional resampling filter.  This can be
           one of :py:data:`Resampling.NEAREST`, :py:data:`Resampling.BOX`,
           :py:data:`Resampling.BILINEAR`, :py:data:`Resampling.HAMMING`,
           :py:data:`Resampling.BICUBIC` or :py:data:`Resampling.LANCZOS`.
           If the image has mode "1" or "P", it is always set to
           :py:data:`Resampling.NEAREST`. If the image mode specifies a number
           of bits, such as "I;16", then the default filter is
           :py:data:`Resampling.NEAREST`. Otherwise, the default filter is
           :py:data:`Resampling.BICUBIC`. See: :ref:`concept-filters`.
        :param box: An optional 4-tuple of floats providing
           the source image region to be scaled.
           The values must be within (0, 0, width, height) rectangle.
           If omitted or None, the entire source is used.
        :param reducing_gap: Apply optimization by resizing the image
           in two steps. First, reducing the image by integer times
           using :py:meth:`~PIL.Image.Image.reduce`.
           Second, resizing using regular resampling. The last step
           changes size no less than by ``reducing_gap`` times.
           ``reducing_gap`` may be None (no first step is performed)
           or should be greater than 1.0. The bigger ``reducing_gap``,
           the closer the result to the fair resampling.
           The smaller ``reducing_gap``, the faster resizing.
           With ``reducing_gap`` greater or equal to 3.0, the result is
           indistinguishable from fair resampling in most cases.
           The default value is None (no optimization).
        :returns: An :py:class:`~PIL.Image.Image` object.
        

        Returns a copy of the image reduced ``factor`` times.
        If the size of the image is not dividable by ``factor``,
        the resulting size will be rounded up.

        :param factor: A greater than 0 integer or tuple of two integers
           for width and height separately.
        :param box: An optional 4-tuple of ints providing
           the source image region to be reduced.
           The values must be within ``(0, 0, width, height)`` rectangle.
           If omitted or ``None``, the entire source is used.
        
360.0
180
transpose
Transpose
ROTATE_180
(90, 270)
90
ROTATE_90
ROTATE_270
2.0
radians
cos
15
sin
0.0
transform
Image.rotate.<locals>.transform
5
xx
yy
floor
w
h
Transform
AFFINE
('fillcolor',)

        Returns a rotated copy of this image.  This method returns a
        copy of this image, rotated the given number of degrees counter
        clockwise around its centre.

        :param angle: In degrees counter clockwise.
        :param resample: An optional resampling filter.  This can be
           one of :py:data:`Resampling.NEAREST` (use nearest neighbour),
           :py:data:`Resampling.BILINEAR` (linear interpolation in a 2x2
           environment), or :py:data:`Resampling.BICUBIC` (cubic spline
           interpolation in a 4x4 environment). If omitted, or if the image has
           mode "1" or "P", it is set to :py:data:`Resampling.NEAREST`.
           See :ref:`concept-filters`.
        :param expand: Optional expansion flag.  If true, expands the output
           image to make it large enough to hold the entire rotated image.
           If false or omitted, make the output image the same size as the
           input image.  Note that the expand flag assumes rotation around
           the center and no translation.
        :param center: Optional center of rotation (a 2-tuple).  Origin is
           the upper left corner.  Default is the center of the image.
        :param translate: An optional post-rotate translation (a 2-tuple).
        :param fillcolor: An optional color for area outside the rotated image.
        :returns: An :py:class:`~PIL.Image.Image` object.
        
too many values to unpack (expected 6)
Path
is_path
buffer
name
save_all
encoderinfo
encoderconfig
preinit
splitext
lower
EXTENSION
init
unknown file extension: 
upper
SAVE_ALL
('append', False)
builtins
r+b
w+b
remove

        Saves this image under the given filename.  If no format is
        specified, the format to use is determined from the filename
        extension, if possible.

        Keyword options can be used to provide additional instructions
        to the writer. If a writer doesn't recognise an option, it is
        silently ignored. The available options are described in the
        :doc:`image format documentation
        <../handbook/image-file-formats>` for each writer.

        You can use a file object instead of a filename. In this case,
        you must always specify the format. The file object must
        implement the ``seek``, ``tell``, and ``write``
        methods, and be opened in binary mode.

        :param fp: A filename (string), pathlib.Path object or file object.
        :param format: Optional format override.  If omitted, the
           format to use is determined from the filename extension.
           If a file object was used instead of a filename, this
           parameter should always be used.
        :param params: Extra parameters to the image writer.
        :returns: None
        :exception ValueError: If the output format could not be determined
           from the file name.  Use the format option to solve this.
        :exception OSError: If the file could not be written.  The file
           may have been created, and may contain partial data.
        

        Seeks to the given frame in this sequence file. If you seek
        beyond the end of the sequence, the method raises an
        ``EOFError`` exception. When a sequence file is opened, the
        library automatically seeks to frame 0.

        See :py:meth:`~PIL.Image.Image.tell`.

        If defined, :attr:`~PIL.Image.Image.n_frames` refers to the
        number of available frames.

        :param frame: Frame number, starting at 0.
        :exception EOFError: If the call attempts to seek beyond the end
            of the sequence.
        
_show
('title',)

        Displays this image. This method is mainly intended for debugging purposes.

        This method calls :py:func:`PIL.ImageShow.show` internally. You can use
        :py:func:`PIL.ImageShow.register` to override its default behaviour.

        The image is first saved to a temporary file. By default, it will be in
        PNG format.

        On Unix, the image is then opened using the **xdg-open**, **display**,
        **gm**, **eog** or **xv** utility, depending on which one can be found.

        On macOS, the image is opened with the native Preview application.

        On Windows, the image is opened with the standard PNG display utility.

        :param title: Optional title to use for the image window, where possible.
        

        Split this image into individual bands. This method returns a
        tuple of individual image bands from an image. For example,
        splitting an "RGB" image creates three new images each
        containing a copy of one of the original bands (red, green,
        blue).

        If you need only one band, :py:meth:`~PIL.Image.Image.getchannel`
        method can be more convenient and faster.

        :returns: A tuple containing bands.
        
getbands
The image has no channel "
"

        Returns an image containing a single channel of the source image.

        :param channel: What channel to return. Could be index
          (0 for "R" channel of "RGB") or channel name
          ("A" for alpha channel of "RGBA").
        :returns: An image in "L" mode.

        .. versionadded:: 4.3.0
        
preserve_aspect_ratio
Image.thumbnail.<locals>.preserve_aspect_ratio
draft
reducing_gap
('box', 'reducing_gap')

        Make this image into a thumbnail.  This method modifies the
        image to contain a thumbnail version of itself, no larger than
        the given size.  This method calculates an appropriate thumbnail
        size to preserve the aspect of the image, calls the
        :py:meth:`~PIL.Image.Image.draft` method to configure the file reader
        (where applicable), and finally resizes the image.

        Note that this function modifies the :py:class:`~PIL.Image.Image`
        object in place.  If you need to use the full resolution image as well,
        apply this method to a :py:meth:`~PIL.Image.Image.copy` of the original
        image.

        :param size: The requested size in pixels, as a 2-tuple:
           (width, height).
        :param resample: Optional resampling filter.  This can be one
           of :py:data:`Resampling.NEAREST`, :py:data:`Resampling.BOX`,
           :py:data:`Resampling.BILINEAR`, :py:data:`Resampling.HAMMING`,
           :py:data:`Resampling.BICUBIC` or :py:data:`Resampling.LANCZOS`.
           If omitted, it defaults to :py:data:`Resampling.BICUBIC`.
           (was :py:data:`Resampling.NEAREST` prior to version 2.5.0).
           See: :ref:`concept-filters`.
        :param reducing_gap: Apply optimization by resizing the image
           in two steps. First, reducing the image by integer times
           using :py:meth:`~PIL.Image.Image.reduce` or
           :py:meth:`~PIL.Image.Image.draft` for JPEG images.
           Second, resizing using regular resampling. The last step
           changes size no less than by ``reducing_gap`` times.
           ``reducing_gap`` may be None (no first step is performed)
           or should be greater than 1.0. The bigger ``reducing_gap``,
           the closer the result to the fair resampling.
           The smaller ``reducing_gap``, the faster resizing.
           With ``reducing_gap`` greater or equal to 3.0, the result is
           indistinguishable from fair resampling in most cases.
           The default value is 2.0 (very close to fair resampling
           while still being faster in many cases).
        :returns: None
        
round_aspect
Image.thumbnail.<locals>.preserve_aspect_ratio.<locals>.round_aspect
provided_size
<lambda>
Image.thumbnail.<locals>.preserve_aspect_ratio.<locals>.<lambda>
('key',)
x
y
aspect
ImageTransformHandler
('resample', 'fill')
missing method data
MESH
_Image__transformer
QUAD

        Transforms this image.  This method creates a new image with the
        given size, and the same mode as the original, and copies data
        to the new image using the given transform.

        :param size: The output size in pixels, as a 2-tuple:
           (width, height).
        :param method: The transformation method.  This is one of
          :py:data:`Transform.EXTENT` (cut out a rectangular subregion),
          :py:data:`Transform.AFFINE` (affine transform),
          :py:data:`Transform.PERSPECTIVE` (perspective transform),
          :py:data:`Transform.QUAD` (map a quadrilateral to a rectangle), or
          :py:data:`Transform.MESH` (map a number of source quadrilaterals
          in one operation).

          It may also be an :py:class:`~PIL.Image.ImageTransformHandler`
          object::

            class Example(Image.ImageTransformHandler):
                def transform(self, size, data, resample, fill=1):
                    # Return result

          It may also be an object with a ``method.getdata`` method
          that returns a tuple supplying new ``method`` and ``data`` values::

            class Example:
                def getdata(self):
                    method = Image.Transform.EXTENT
                    data = (0, 0, 100, 100)
                    return method, data
        :param data: Extra data to the transformation method.
        :param resample: Optional resampling filter.  It can be one of
           :py:data:`Resampling.NEAREST` (use nearest neighbour),
           :py:data:`Resampling.BILINEAR` (linear interpolation in a 2x2
           environment), or :py:data:`Resampling.BICUBIC` (cubic spline
           interpolation in a 4x4 environment). If omitted, or if the image
           has mode "1" or "P", it is set to :py:data:`Resampling.NEAREST`.
           See: :ref:`concept-filters`.
        :param fill: If ``method`` is an
          :py:class:`~PIL.Image.ImageTransformHandler` object, this is one of
          the arguments passed to it. Otherwise, it is unused.
        :param fillcolor: Optional fill color for the area outside the
           transform in the output image.
        :returns: An :py:class:`~PIL.Image.Image` object.
        
[None, 6, None]
EXTENT
PERSPECTIVE
[None, 8, None]
[None, 2, None]
[2, 4, None]
[4, 6, None]
[6, 8, None]
unknown transformation method
) cannot be used.
transform2

        Transpose image (flip or rotate in 90 degree steps)

        :param method: One of :py:data:`Transpose.FLIP_LEFT_RIGHT`,
          :py:data:`Transpose.FLIP_TOP_BOTTOM`, :py:data:`Transpose.ROTATE_90`,
          :py:data:`Transpose.ROTATE_180`, :py:data:`Transpose.ROTATE_270`,
          :py:data:`Transpose.TRANSPOSE` or :py:data:`Transpose.TRANSVERSE`.
        :returns: Returns a flipped or rotated copy of this image.
        
effect_spread

        Randomly spread pixels in an image.

        :param distance: Distance to spread pixels.
        
('ImageQt',)
ImageQt
qt_is_installed
Qt bindings are not installed
toqimage
Returns a QImage copy of this image
toqpixmap
Returns a QPixmap copy of this image
wedge
Create greyscale wedge (for debugging only)
Size must be a tuple
Size must be a tuple of length 2
Width and height must be >= 0

    Common check to enforce type and sanity check on size tuples

    :param size: Should be a 2 tuple of (width, height)
    :returns: True, or raises a ValueError
    
_check_size
color
fill

    Creates a new image with the given mode and size.

    :param mode: The mode to use for the new image. See:
       :ref:`concept-modes`.
    :param size: A 2-tuple, containing (width, height) in pixels.
    :param color: What color to use for the image.  Default is black.
       If given, this should be a single integer or floating point value
       for single-band modes, and a tuple for multi-band modes (one value
       per band).  When creating RGB or HSV images, you can also use color
       strings as supported by the ImageColor module.  If the color is
       None, the image is not initialised.
    :returns: An :py:class:`~PIL.Image.Image` object.
    

    Creates a copy of an image memory from pixel data in a buffer.

    In its simplest form, this function takes three arguments
    (mode, size, and unpacked pixel data).

    You can also use any pixel decoder supported by PIL. For more
    information on available decoders, see the section
    :ref:`Writing Your Own File Codec <file-codecs>`.

    Note that this function decodes pixel data only, not entire images.
    If you have an entire image in a string, wrap it in a
    :py:class:`~io.BytesIO` object, and use :py:func:`~PIL.Image.open` to load
    it.

    :param mode: The image mode. See: :ref:`concept-modes`.
    :param size: The image size.
    :param data: A byte buffer containing raw data for the given mode.
    :param decoder_name: What decoder to use.
    :param args: Additional parameters for the given decoder.
    :returns: An :py:class:`~PIL.Image.Image` object.
    
_MAPMODES
map_buffer

    Creates an image memory referencing pixel data in a byte buffer.

    This function is similar to :py:func:`~PIL.Image.frombytes`, but uses data
    in the byte buffer, where possible.  This means that changes to the
    original buffer object are reflected in this image).  Not all modes can
    share memory; supported modes include "L", "RGBX", "RGBA", and "CMYK".

    Note that this function decodes pixel data only, not entire images.
    If you have an entire image file in a string, wrap it in a
    :py:class:`~io.BytesIO` object, and use :py:func:`~PIL.Image.open` to load it.

    In the current version, the default parameters used for the "raw" decoder
    differs from that used for :py:func:`~PIL.Image.frombytes`.  This is a
    bug, and will probably be fixed in a future release.  The current release
    issues a warning if you do this; to disable the warning, you should provide
    the full set of parameters.  See below for details.

    :param mode: The image mode. See: :ref:`concept-modes`.
    :param size: The image size.
    :param data: A bytes or other buffer object containing raw
        data for the given mode.
    :param decoder_name: What decoder to use.
    :param args: Additional parameters for the given decoder.  For the
        default encoder ("raw"), it's recommended that you provide the
        full set of parameters::

            frombuffer(mode, size, data, "raw", mode, 0, 1)

    :returns: An :py:class:`~PIL.Image.Image` object.

    .. versionadded:: 1.1.4
    
__array_interface__
('strides', None)
[2, None, None]
Cannot handle this data type
_fromarray_typemap
Cannot handle this data type: %s, %s
['1', 'L', 'I', 'P', 'F']
Too many dimensions: 
 > 
tostring
frombuffer
obj

    Creates an image memory from an object exporting the array interface
    (using the buffer protocol)::

      from PIL import Image
      import numpy as np
      a = np.zeros((5, 5))
      im = Image.fromarray(a)

    If ``obj`` is not contiguous, then the ``tobytes`` method is called
    and :py:func:`~PIL.Image.frombuffer` is used.

    In the case of NumPy, be aware that Pillow modes do not always correspond
    to NumPy dtypes. Pillow modes only offer 1-bit pixels, 8-bit pixels,
    32-bit signed integer pixels, and 32-bit floating point pixels.

    Pillow images can also be converted to arrays::

      from PIL import Image
      import numpy as np
      im = Image.open("hopper.jpg")
      a = np.asarray(im)

    When converting Pillow images to arrays however, only pixel values are
    transferred. This means that P and PA mode images will lose their palette.

    :param obj: Object with array interface
    :param mode: Optional mode to use when reading ``obj``. Will be determined from
      type if ``None``.

      This will not be used to convert the data after reading, but will be used to
      change how the data is read::

        from PIL import Image
        import numpy as np
        a = np.full((1, 1), 300)
        im = Image.fromarray(a, mode="L")
        im.getpixel((0, 0))  # 44
        im = Image.fromarray(a, mode="RGB")
        im.getpixel((0, 0))  # (44, 1, 0)

      See: :ref:`concept-modes` for general information about modes.
    :returns: An image object.

    .. versionadded:: 1.1.6
    
fromqimage
Creates an image instance from a QImage image
fromqpixmap
Creates an image instance from a QPixmap image
MAX_IMAGE_PIXELS
Image size (
 pixels) exceeds limit of 
 pixels, could be decompression bomb DOS attack.
DecompressionBombError
DecompressionBombWarning
r
bad mode 
StringIO
StringIO cannot be used to open an image. Binary data must be used instead.
ID
formats must be a list or tuple
resolve
rb
UnsupportedOperation
(16,)
_open_core
open.<locals>._open_core
exclusive_fp
cannot identify image file %r
UnidentifiedImageError

    Opens and identifies the given image file.

    This is a lazy operation; this function identifies the file, but
    the file remains open and the actual image data is not read from
    the file until you try to process the data (or call the
    :py:meth:`~PIL.Image.Image.load` method).  See
    :py:func:`~PIL.Image.new`. See :ref:`file-handling`.

    :param fp: A filename (string), pathlib.Path object or a file object.
       The file object must implement ``file.read``,
       ``file.seek``, and ``file.tell`` methods,
       and be opened in binary mode. The file object will also seek to zero
       before reading.
    :param mode: The mode.  If given, this argument must be "r".
    :param formats: A list or tuple of formats to attempt to load the file in.
       This can be used to restrict the set of formats checked.
       Pass ``None`` to try all supported formats. You can print the set of
       available formats by running ``python3 -m PIL`` or using
       the :py:func:`PIL.features.pilinfo` function.
    :returns: An :py:class:`~PIL.Image.Image` object.
    :exception FileNotFoundError: If the file cannot be found.
    :exception PIL.UnidentifiedImageError: If the image cannot be opened and
       identified.
    :exception ValueError: If the ``mode`` is not "r", or if a ``StringIO``
       instance is used for ``fp``.
    :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.
    
prefix
accept_warnings
struct
error
checked_formats
open.<locals>.<genexpr>

    Alpha composite im2 over im1.

    :param im1: The first image. Must have mode RGBA.
    :param im2: The second image.  Must have mode RGBA, and the same size as
       the first image.
    :returns: An :py:class:`~PIL.Image.Image` object.
    
blend

    Creates a new image by interpolating between two input images, using
    a constant alpha::

        out = image1 * (1.0 - alpha) + image2 * alpha

    :param im1: The first image.
    :param im2: The second image.  Must have the same mode and size as
       the first image.
    :param alpha: The interpolation alpha factor.  If alpha is 0.0, a
       copy of the first image is returned. If alpha is 1.0, a copy of
       the second image is returned. There are no restrictions on the
       alpha value. If necessary, the result is clipped to fit into
       the allowed output range.
    :returns: An :py:class:`~PIL.Image.Image` object.
    

    Create composite image by blending images using a transparency mask.

    :param image1: The first image.
    :param image2: The second image.  Must have the same mode and
       size as the first image.
    :param mask: A mask image.  This image can have mode
       "1", "L", or "RGBA", and must have the same size as the
       other two images.
    

    Applies the function (which should take one argument) to each pixel
    in the given image. If the image has more than one band, the same
    function is applied to each band. Note that the function is
    evaluated once for each possible pixel value, so you cannot use
    random components or other generators.

    :param image: The input image.
    :param function: A function object, taking one integer argument.
    :returns: An :py:class:`~PIL.Image.Image` object.
    
getmodebands
*
wrong number of bands
[1, None, None]
getmodetype
mode mismatch
size mismatch

    Merge a set of single band images into a new multiband image.

    :param mode: The mode to use for the output image. See:
        :ref:`concept-modes`.
    :param bands: A sequence containing one single-band image for
        each band in the output image.  All bands must have the
        same size.
    :returns: An :py:class:`~PIL.Image.Image` object.
    
id

    Register an image file plugin.  This function should not be used
    in application code.

    :param id: An image format identifier.
    :param factory: An image file factory method.
    :param accept: An optional function that can be used to quickly
       reject images having another format.
    
MIME

    Registers an image MIME type.  This function should not be used
    in application code.

    :param id: An image format identifier.
    :param mimetype: The image MIME type for this format.
    

    Registers an image save function.  This function should not be
    used in application code.

    :param id: An image format identifier.
    :param driver: A function to save images in this format.
    

    Registers an image function to save all the frames
    of a multiframe format.  This function should not be
    used in application code.

    :param id: An image format identifier.
    :param driver: A function to save images in this format.
    

    Registers an image extension.  This function should not be
    used in application code.

    :param id: An image format identifier.
    :param extension: An extension used for this format.
    
register_extension

    Registers image extensions.  This function should not be
    used in application code.

    :param id: An image format identifier.
    :param extensions: A list of extensions used for this format.
    

    Returns a dictionary containing all file extensions belonging
    to registered plugins
    

    Registers an image decoder.  This function should not be
    used in application code.

    :param name: The name of the decoder
    :param decoder: A callable(mode, args) that returns an
                    ImageFile.PyDecoder object

    .. versionadded:: 4.1.0
    

    Registers an image encoder.  This function should not be
    used in application code.

    :param name: The name of the encoder
    :param encoder: A callable(mode, args) that returns an
                    ImageFile.PyEncoder object

    .. versionadded:: 4.1.0
    
('ImageShow',)
ImageShow
show
effect_mandelbrot

    Generate a Mandelbrot set covering the given extent.

    :param size: The requested size in pixels, as a 2-tuple:
       (width, height).
    :param extent: The extent to cover, as a 4-tuple:
       (x0, y0, x1, y1).
    :param quality: Quality.
    
effect_noise

    Generate Gaussian noise centered around 128.

    :param size: The requested size in pixels, as a 2-tuple:
       (width, height).
    :param sigma: Standard deviation of noise.
    
linear_gradient

    Generate 256x256 linear gradient from black to white, top to bottom.

    :param mode: Input mode.
    
radial_gradient

    Generate 256x256 radial gradient from black to white, centre to edge.

    :param mode: Input mode.
    
environ
PILLOW_ALIGNMENT
set_alignment
PILLOW_BLOCK_SIZE
set_block_size
PILLOW_BLOCKS_MAX
set_blocks_max
(('k', 1024), ('m', 1048576))
var
units
 is not int
: 
_data
_hidden_data
_ifds
_loaded_exif
_fixup
(None, None)
('TiffImagePlugin',)
TiffImagePlugin
ImageFileDirectory_v2
head
_fixup_dict
b'+'
b'*'
<
b'II'
b'\x00'
o32le
(8,)
b'MM\x00'
o32be
b'\x00\x00\x00\x00'
clear
(b'Exif\x00\x00',)
[6, None, None]
_get_head
GPSInfo
merged_dict
('ifh',)
Interop
ifd
b'Exif\x00\x00'
Makernote
('ImageFileDirectory_v2',)
b'FUJIFILM'
i32le
8
unpack
<H
<HHL4s
12
_load_dispatch
<L
too many values to unpack (expected 1)
Possibly corrupt EXIF MakerNote data.  Expecting to read 
 bytes but only got 
. Skipping tag 
makernote
(271,)
Nintendo
>H
>HHL4s
4353
>L
ModelID
(4,)
(12,)
TimeStamp
InternalSerialNumber
TiffTags
FLOAT
Parallax
(2,)
Category
update
keys
__doc__
__file__
__spec__
origin
has_location
__cached__
atexit
logging
sys
collections.abc
('Callable', 'MutableMapping')
MutableMapping
enum
('IntEnum',)
IntEnum
pathlib
('Path',)
defusedxml.ElementTree
('ExifTags', 'ImageMode', 'TiffTags', 'UnidentifiedImageError', '__version__', '_plugins')
_binary
('i32le', 'o32be', 'o32le')
_util
('DeferredError', 'is_path')
getLogger
('PIL.Image',)
RuntimeWarning
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
<metaclass>
PIL.Image
__qualname__
__orig_bases__
(None,)
89478485
('_imaging',)
_imaging
PILLOW_VERSION
The _imaging extension was built for another version of Pillow or PIL:
Core version: 

Pillow version: 
msg
v
The _imaging C module is not installed.
('Module use of python',)
The _imaging extension was built for another version of Python.
('The _imaging extension',)
FLIP_LEFT_RIGHT
FLIP_TOP_BOTTOM
TRANSPOSE
6
TRANSVERSE
3.0
NONE
ORDERED
RASTERIZE
WEB
MAXCOVERAGE
modules
module
item
DEFAULT_STRATEGY
FILTERED
HUFFMAN_ONLY
RLE
FIXED
_ENDIAN
['1', 'CMYK', 'F', 'HSV', 'I', 'L', 'LAB', 'P', 'RGB', 'RGBA', 'RGBX', 'YCbCr']
MODES
('L', 'P', 'RGBX', 'RGBA', 'CMYK', 'I;16', 'I;16L', 'I;16B')
getmodebandnames
((),)
_E.__init__
__neg__
_E.__neg__
__add__
_E.__add__
__radd__
__sub__
_E.__sub__
__rsub__
_E.__rsub__
__mul__
_E.__mul__
__rmul__
__truediv__
_E.__truediv__

    This class represents an image object.  To create
    :py:class:`~PIL.Image.Image` objects, use the appropriate factory
    functions.  There's hardly ever any reason to call the Image constructor
    directly.

    * :py:func:`~PIL.Image.open`
    * :py:func:`~PIL.Image.new`
    * :py:func:`~PIL.Image.frombytes`
    
format_description
_close_exclusive_fp_after_loading
Image.__init__
Image.width
Image.height
Image.size
Image._new
Image.__enter__
Image.__exit__
Image.close
Image._copy
Image._ensure_mutable
(None, None)
_dump
Image._dump
__eq__
Image.__eq__
__repr__
Image.__repr__
_repr_pretty_
Image._repr_pretty_
Image._repr_image
_repr_png_
Image._repr_png_
_repr_jpeg_
Image._repr_jpeg_
Image.__array_interface__
__getstate__
Image.__getstate__
__setstate__
Image.__setstate__
('raw',)
Image.tobytes
('image',)
tobitmap
Image.tobitmap
Image.frombytes
Image.load

        Verifies the contents of a file. For data read from a file, this
        method attempts to determine if the file is broken, without
        actually decoding the image data.  If this method finds any
        problems, it raises suitable exceptions.  If you need to load
        the image after using this method, you must reopen the image
        file.
        
verify
Image.verify
256
Image.convert
Image.quantize
Image.copy
__copy__
(None,)
Image.crop
Image._crop

        Configures the image file loader so it returns a version of the
        image that as closely as possible matches the given mode and
        size. For example, you can use this method to convert a color
        JPEG to greyscale while loading it.

        If any changes are made, returns a tuple with the chosen ``mode`` and
        ``box`` with coordinates of the original image within the altered one.

        Note that this method modifies the :py:class:`~PIL.Image.Image` object
        in place. If the image has already been loaded, this method has no
        effect.

        Note: This method is not implemented for most images. It is
        currently implemented only for JPEG and MPO images.

        :param mode: The requested mode.
        :param size: The requested size in pixels, as a 2-tuple:
           (width, height).
        
Image.draft
_expand
Image._expand
Image.filter
Image.getbands
{'alpha_only': True}
Image.getbbox
(256,)
Image.getcolors
Image.getdata
Image.getextrema
_getxmp
Image._getxmp
Image.getexif
_reload_exif
Image._reload_exif
get_child_images
Image.get_child_images
getim
Image.getim
Image.getpalette
apply_transparency
Image.apply_transparency
Image.getpixel
Image.getprojection
Image.histogram
Image.entropy
Image.paste
((0, 0), (0, 0))
Image.alpha_composite
Image.point
putalpha
Image.putalpha
(1.0, 0.0)
Image.putdata
Image.putpalette
Image.putpixel
remap_palette
Image.remap_palette
Image._get_safe_box
Image.resize
Image.reduce
rotate
Image.rotate
Image.save
Image.seek
Image.show
Image.split
getchannel
Image.getchannel

        Returns the current frame number. See :py:meth:`~PIL.Image.Image.seek`.

        If defined, :attr:`~PIL.Image.Image.n_frames` refers to the
        number of available frames.

        :returns: Frame number, starting with 0.
        
Image.tell
thumbnail
Image.thumbnail
Image.transform
__transformer
Image.__transformer
Image.transpose
Image.effect_spread
Image.toqimage
Image.toqpixmap

    Used as a mixin by point transforms
    (for use with :py:meth:`~PIL.Image.Image.point`)
    

    Used as a mixin by geometry transforms
    (for use with :py:meth:`~PIL.Image.Image.transform`)
    
_wedge
fromarray
((1, 1), '|b1')
('1', '1;8')
((1, 1), '|u1')
('L', 'L')
((1, 1), '|i1')
('I', 'I;8')
((1, 1), '<u2')
('I', 'I;16')
((1, 1), '>u2')
('I', 'I;16B')
((1, 1), '<i2')
('I', 'I;16S')
((1, 1), '>i2')
('I', 'I;16BS')
((1, 1), '<u4')
('I', 'I;32')
((1, 1), '>u4')
('I', 'I;32B')
((1, 1), '<i4')
('I', 'I;32S')
((1, 1), '>i4')
('I', 'I;32BS')
((1, 1), '<f4')
('F', 'F;32F')
((1, 1), '>f4')
('F', 'F;32BF')
((1, 1), '<f8')
('F', 'F;64F')
((1, 1), '>f8')
('F', 'F;64BF')
((1, 1, 2), '|u1')
('LA', 'LA')
((1, 1, 3), '|u1')
('RGB', 'RGB')
((1, 1, 4), '|u1')
('RGBA', 'RGBA')
i4
('I', 'I')
f4
('F', 'F')
('r', None)
composite
eval
register_open
register_mime
register_save
register_save_all
register_extensions
registered_extensions
register_decoder
register_encoder
_apply_env_variables
register
clear_cache

    This class provides read and write access to EXIF image data::

      from PIL import Image
      im = Image.open("exif.png")
      exif = im.getexif()  # Returns an instance of this class

    Information can be read and written, iterated over or deleted::

      print(exif[274])  # 1
      exif[274] = 2
      for k, v in exif.items():
        print("Tag", k, "Value", v)  # Tag 274 Value 2
      del exif[274]

    To access information beyond IFD0, :py:meth:`~PIL.Image.Exif.get_ifd`
    returns a dictionary::

      from PIL import ExifTags
      im = Image.open("exif_gps.jpg")
      exif = im.getexif()
      gps_ifd = exif.get_ifd(ExifTags.IFD.GPSInfo)
      print(gps_ifd)

    Other IFDs include ``ExifTags.IFD.Exif``, ``ExifTags.IFD.Makernote``,
    ``ExifTags.IFD.Interop`` and ``ExifTags.IFD.IFD1``.

    :py:mod:`~PIL.ExifTags` also has enum classes to provide names for data::

      print(exif[ExifTags.Base.Software])  # PIL
      print(gps_ifd[ExifTags.GPS.GPSDateStamp])  # 1999:99:99 99:99:99
    
Exif.__init__
Exif._fixup
Exif._fixup_dict
Exif._get_ifd_dict
Exif._get_head
Exif.load
Exif.load_from_fp
_get_merged_dict
Exif._get_merged_dict
Exif.tobytes
Exif.get_ifd
hide_offsets
Exif.hide_offsets
__str__
Exif.__str__
__len__
Exif.__len__
Exif.__getitem__
__contains__
Exif.__contains__
__setitem__
Exif.__setitem__
__delitem__
Exif.__delitem__
__iter__
Exif.__iter__
PIL\Image.py
('.0', 'format', 'checked_formats')
('.0', 'i')
('.0', 'i', 'convert_transparency', 'matrix', 'transparency')
('n', 'aspect', 'x')
('aspect', 'x')
('n', 'aspect', 'y')
('aspect', 'y')
<module PIL.Image>
('__class__',)
('self', 'other')
('self', 'new', 'e', 'numpy', 'parse_version')
('self', 'tag')
('self',)
('self', 'args')
('self', 'im_data')
('self', 'scale', 'offset')
('self', 'keys')
('self', 'tag', 'value')
('self', 'state', 'info', 'mode', 'size', 'palette', 'data')
('self', 'box', 'image', 'method', 'data', 'resample', 'fill', 'w', 'h', 'x0', 'y0', 'x1', 'y1', 'xs', 'ys', 'nw', 'sw', 'se', 'ne', 'As', 'At', 'msg', 'filters')
('env', 'var_name', 'setter', 'var', 'units', 'postfix', 'mul', 'e')
('size', 'msg')
('im', 'm', 'shape', 'extra')
('self', 'im', 'box', 'x0', 'y0', 'x1', 'y1', 'absolute_values')
('size', 'pixels', 'msg')
('self', 'file', 'format', 'options', 'suffix', 'f', 'filename')
('self', 'xmargin', 'ymargin')
('self', 'value')
('self', 'src_dict')
('self', 'version', 'head')
('self', 'offset', 'TiffImagePlugin', 'info')
('self', 'merged_dict', 'ifd')
('self', 'size', 'resample', 'box', 'filter_support', 'scale_x', 'scale_y', 'support_x', 'support_y')
('mode', 'decoder_name', 'args', 'extra', 'decoder', 'e', 'msg')
('mode', 'encoder_name', 'args', 'extra', 'encoder', 'e', 'msg')
('expr', 'a')
('self', 'xmp_tags', 'get_name', 'get_value', 'root')
('self', 'im', 'new', 'ImagePalette')
('fp', 'filename', 'prefix', 'formats', 'i', 'factory', 'accept', 'result', 'im', 'accept_warnings', 'exclusive_fp')
('accept_warnings', 'exclusive_fp')
('self', 'image_format', 'kwargs', 'b', 'e', 'msg')
('self', 'p', 'cycle')
('image', 'options', 'ImageShow')
('im1', 'im2')
('self', 'im', 'dest', 'source', 'msg', 'overlay', 'box', 'background', 'result')
('self', 'ImagePalette', 'palette', 'transparency', 'i', 'alpha')
('im1', 'im2', 'alpha')
('self', 'msg')
('image1', 'image2', 'mask', 'image')
('self', 'mode', 'matrix', 'dither', 'palette', 'colors', 'has_transparency', 'msg', 'im', 'new', 'transparency', 'convert_transparency', 'trns', 'delete_trns', 'new_im', 't', 'trns_im', 'err', 'e', 'ImagePalette', 'other_mode', 'ImageCms', 'srgb', 'lab', 'profiles', 'transform', 'modebase')
('m', 'v')
('self', 'box', 'msg')
('self', 'mode', 'size')
('size', 'extent', 'quality')
('size', 'sigma')
('self', 'distance')
('self', 'mask', 'extrema')
('image', 'args')
('self', 'filter', 'ImageFilter', 'msg', 'multiband', 'ims', 'c')
('obj', 'mode', 'arr', 'shape', 'ndim', 'strides', 'typekey', 'e', 'msg', 'rawmode', 'ndmax', 'size')
('mode', 'size', 'data', 'decoder_name', 'args', 'im', 'ImagePalette')
('mode', 'size', 'data', 'decoder_name', 'args', 'im')
('self', 'data', 'decoder_name', 'args', 'd', 's', 'msg')
('im', 'ImageQt', 'msg')
('self', 'child_images', 'exif', 'ifds', 'subifd_offsets', 'subifd_offset', 'ifd1', 'offset', 'ifd', 'ifd_offset', 'current_offset', 'fp', 'thumbnail_offset', 'data', 'im')
('self', 'tag', 'offset', 'tag_data', 'ImageFileDirectory_v2', 'ifd_offset', 'ifd_data', 'makernote', 'i', 'ifd_tag', 'typ', 'count', 'data', 'unit_size', 'handler', 'size', 'camerainfo', 'parallax', 'ifd')
('tag',)
('element', 'value', 'children', 'child', 'name', 'child_value', 'get_name', 'get_value')
('get_name', 'get_value')
('self', 'alpha_only')
('self', 'channel', 'e', 'msg')
('self', 'maxcolors', 'h', 'out', 'i')
('self', 'band')
('self', 'exif_info', 'xmp_tags', 'match')
('self', 'extrema', 'i')
('mode',)
('self', 'rawmode', 'mode')
('self', 'xy')
('self', 'x', 'y')
('plugin', 'e')
('t',)
('self', 'data', 'TiffImagePlugin')
('self', 'mode', 'arr', 'palette_mode', 'PyAccess')
('self', 'fp', 'offset', 'TiffImagePlugin')
('mode', 'bands', 'msg', 'band')
('mode', 'size', 'color', 'ImageColor', 'im', 'ImagePalette')
('fp', 'mode', 'formats', 'msg', 'exclusive_fp', 'filename', 'prefix', 'accept_warnings', '_open_core', 'im', 'checked_formats', 'message')
('self', 'im', 'box', 'mask', 'size', 'msg', 'ImageColor')
('self', 'lut', 'mode', 'scale', 'offset', 'msg')
('BmpImagePlugin', 'GifImagePlugin', 'JpegImagePlugin', 'PpmImagePlugin', 'PngImagePlugin')
('round_aspect', 'x', 'y', 'aspect', 'provided_size', 'self')
('provided_size', 'self')
('self', 'alpha', 'mode', 'e', 'im', 'msg', 'band')
('self', 'data', 'scale', 'offset')
('self', 'data', 'rawmode', 'ImagePalette', 'msg', 'palette')
('self', 'xy', 'value', 'alpha')
('self', 'colors', 'method', 'kmeans', 'palette', 'dither', 'msg', 'im', 'new_im', 'ImagePalette', 'mode')
('self', 'factor', 'box', 'im')
('name', 'decoder')
('name', 'encoder')
('id', 'extension')
('id', 'extensions', 'extension')
('id', 'mimetype')
('id', 'factory', 'accept')
('id', 'driver')
('self', 'dest_map', 'source_palette', 'ImagePalette', 'msg', 'bands', 'palette_mode', 'palette_bytes', 'new_positions', 'i', 'oldPosition', 'mapping_palette', 'm_im')
('self', 'size', 'resample', 'box', 'reducing_gap', 'type_special', 'msg', 'filters', 'im', 'factor_x', 'factor_y', 'reduce_box', 'factor')
('self', 'angle', 'resample', 'expand', 'center', 'translate', 'fillcolor', 'w', 'h', 'post_trans', 'rotn_center', 'matrix', 'transform', 'xx', 'yy', 'x', 'y', 'nw', 'nh')
('number', 'key')
('self', 'fp', 'format', 'params', 'filename', 'open_fp', 'save_all', 'ext', 'e', 'msg', 'save_handler', 'created')
('self', 'frame')
('self', 'title')
('self', 'ims')
('self', 'size', 'resample', 'reducing_gap', 'provided_size', 'preserve_aspect_ratio', 'box', 'res', 'im')
('self', 'name', 'msg', 'data')
('self', 'encoder_name', 'args', 'e', 'bufsize', 'output', 'bytes_consumed', 'errcode', 'data', 'msg')
('self', 'offset', 'TiffImagePlugin', 'head', 'ifd', 'tag', 'value')
('self', 'ImageQt', 'msg')
('self', 'size', 'method', 'data', 'resample', 'fill', 'fillcolor', 'msg', 'im', 'box', 'quad')
('x', 'y', 'matrix', 'a', 'b', 'c', 'd', 'e', 'f')
('self', 'method')

------------------------------ [modulecode_PIL.ImageChops] ------------------------------
Image
new
L
size
Fill a channel with a given grey level.

    :rtype: :py:class:`~PIL.Image.Image`
    
copy
Copy a channel. Alias for :py:meth:`PIL.Image.Image.copy`.

    :rtype: :py:class:`~PIL.Image.Image`
    
load
_new
im
chop_invert

    Invert an image (channel). ::

        out = MAX - image

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_lighter

    Compares the two images, pixel by pixel, and returns a new image containing
    the lighter values. ::

        out = max(image1, image2)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_darker

    Compares the two images, pixel by pixel, and returns a new image containing
    the darker values. ::

        out = min(image1, image2)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_difference

    Returns the absolute value of the pixel-by-pixel difference between the two
    images. ::

        out = abs(image1 - image2)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_multiply

    Superimposes two images on top of each other.

    If you multiply an image with a solid black image, the result is black. If
    you multiply with a solid white image, the image is unaffected. ::

        out = image1 * image2 / MAX

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_screen

    Superimposes two inverted images on top of each other. ::

        out = MAX - ((MAX - image1) * (MAX - image2) / MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_soft_light

    Superimposes two images on top of each other using the Soft Light algorithm

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_hard_light

    Superimposes two images on top of each other using the Hard Light algorithm

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_overlay

    Superimposes two images on top of each other using the Overlay algorithm

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_add

    Adds two images, dividing the result by scale and adding the
    offset. If omitted, scale defaults to 1.0, and offset to 0.0. ::

        out = ((image1 + image2) / scale + offset)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_subtract

    Subtracts two images, dividing the result by scale and adding the offset.
    If omitted, scale defaults to 1.0, and offset to 0.0. ::

        out = ((image1 - image2) / scale + offset)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_add_modulo
Add two images, without clipping the result. ::

        out = ((image1 + image2) % MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_subtract_modulo
Subtract two images, without clipping the result. ::

        out = ((image1 - image2) % MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_and
Logical AND between two images.

    Both of the images must have mode "1". If you would like to perform a
    logical AND on an image with a mode other than "1", try
    :py:meth:`~PIL.ImageChops.multiply` instead, using a black-and-white mask
    as the second image. ::

        out = ((image1 and image2) % MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_or
Logical OR between two images.

    Both of the images must have mode "1". ::

        out = ((image1 or image2) % MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
chop_xor
Logical XOR between two images.

    Both of the images must have mode "1". ::

        out = ((bool(image1) != bool(image2)) % MAX)

    :rtype: :py:class:`~PIL.Image.Image`
    
blend
Blend images using constant transparency weight. Alias for
    :py:func:`PIL.Image.blend`.

    :rtype: :py:class:`~PIL.Image.Image`
    
composite
Create composite using transparency mask. Alias for
    :py:func:`PIL.Image.composite`.

    :rtype: :py:class:`~PIL.Image.Image`
    
offset
xoffset
Returns a copy of the image where data has been offset by the given
    distances. Data wraps around the edges. If ``yoffset`` is omitted, it
    is assumed to be equal to ``xoffset``.

    :param image: Input image.
    :param xoffset: The horizontal distance.
    :param yoffset: The vertical distance.  If omitted, both
        distances are set to the same value.
    :rtype: :py:class:`~PIL.Image.Image`
    
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image',)
1
0
constant
duplicate
invert
lighter
darker
difference
multiply
screen
soft_light
hard_light
overlay
(1.0, 0)
add
subtract
add_modulo
subtract_modulo
logical_and
logical_or
logical_xor
(None,)
PIL\ImageChops.py
<module PIL.ImageChops>
('image1', 'image2', 'scale', 'offset')
('image1', 'image2')
('image1', 'image2', 'alpha')
('image1', 'image2', 'mask')
('image', 'value')
('image',)
('image', 'xoffset', 'yoffset')

------------------------------ [modulecode_PIL.ImageCms] ------------------------------
255
16
encode
decode
('ascii',)
rb
__enter__
__exit__
_set
core
profile_frombytes
read
(None, None, None)
profile_open
_imagingcms
CmsProfile
Invalid type for Profile

        :param profile: Either a string representing a filename,
            a file like object containing a profile or a
            low-level profile object

        
profile
filename
product_name
product_info
profile_tobytes

        Returns the profile in a format suitable for embedding in
        saved images.

        :returns: a bytes object containing the ICC profile.
        
buildTransform
transform
buildProofTransform
input_mode
self
inputMode
output_mode
outputMode
output
output_profile
apply
load
Image
new
size
im
id
tobytes
info
icc_profile
mode
mode mismatch

('ImageWin',)
1
ImageWin
0
HDC
get_display_profile_win32
ImageCmsProfile

    (experimental) Fetches the profile for the current display device.

    :returns: ``None`` if the profile is not known.
    
3
PyCMSError
('renderingIntent must be an integer between 0 and 3',)
_MAX_FLAG
flags must be an integer between 0 and 
ImageCmsTransform
renderingIntent
flags
('flags',)
apply_in_place
(None, None, None)

    (pyCMS) Applies an ICC transformation to a given image, mapping from
    ``inputProfile`` to ``outputProfile``.

    If the input or output profiles specified are not valid filenames, a
    :exc:`PyCMSError` will be raised.  If ``inPlace`` is ``True`` and
    ``outputMode != im.mode``, a :exc:`PyCMSError` will be raised.
    If an error occurs during application of the profiles,
    a :exc:`PyCMSError` will be raised.
    If ``outputMode`` is not a mode supported by the ``outputProfile`` (or by pyCMS),
    a :exc:`PyCMSError` will be raised.

    This function applies an ICC transformation to im from ``inputProfile``'s
    color space to ``outputProfile``'s color space using the specified rendering
    intent to decide how to handle out-of-gamut colors.

    ``outputMode`` can be used to specify that a color mode conversion is to
    be done using these profiles, but the specified profiles must be able
    to handle that mode.  I.e., if converting im from RGB to CMYK using
    profiles, the input profile must handle RGB data, and the output
    profile must handle CMYK data.

    :param im: An open :py:class:`~PIL.Image.Image` object (i.e. Image.new(...)
        or Image.open(...), etc.)
    :param inputProfile: String, as a valid filename path to the ICC input
        profile you wish to use for this image, or a profile object
    :param outputProfile: String, as a valid filename path to the ICC output
        profile you wish to use for this image, or a profile object
    :param renderingIntent: Integer (0-3) specifying the rendering intent you
        wish to use for the transform

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
        they do.
    :param outputMode: A valid PIL mode for the output image (i.e. "RGB",
        "CMYK", etc.).  Note: if rendering the image "inPlace", outputMode
        MUST be the same mode as the input, or omitted completely.  If
        omitted, the outputMode will be the same as the mode of the input
        image (im.mode)
    :param inPlace: Boolean.  If ``True``, the original image is modified in-place,
        and ``None`` is returned.  If ``False`` (default), a new
        :py:class:`~PIL.Image.Image` object is returned with the transform applied.
    :param flags: Integer (0-...) specifying additional flags
    :returns: Either None or a new :py:class:`~PIL.Image.Image` object, depending on
        the value of ``inPlace``
    :exception PyCMSError:
    

    (pyCMS) Opens an ICC profile file.

    The PyCMSProfile object can be passed back into pyCMS for use in creating
    transforms and such (as in ImageCms.buildTransformFromOpenProfiles()).

    If ``profileFilename`` is not a valid filename for an ICC profile,
    a :exc:`PyCMSError` will be raised.

    :param profileFilename: String, as a valid filename path to the ICC profile
        you wish to open, or a file-like object.
    :returns: A CmsProfile class object.
    :exception PyCMSError:
    
flags must be an integer between 0 and %s

    (pyCMS) Builds an ICC transform mapping from the ``inputProfile`` to the
    ``outputProfile``. Use applyTransform to apply the transform to a given
    image.

    If the input or output profiles specified are not valid filenames, a
    :exc:`PyCMSError` will be raised. If an error occurs during creation
    of the transform, a :exc:`PyCMSError` will be raised.

    If ``inMode`` or ``outMode`` are not a mode supported by the ``outputProfile``
    (or by pyCMS), a :exc:`PyCMSError` will be raised.

    This function builds and returns an ICC transform from the ``inputProfile``
    to the ``outputProfile`` using the ``renderingIntent`` to determine what to do
    with out-of-gamut colors.  It will ONLY work for converting images that
    are in ``inMode`` to images that are in ``outMode`` color format (PIL mode,
    i.e. "RGB", "RGBA", "CMYK", etc.).

    Building the transform is a fair part of the overhead in
    ImageCms.profileToProfile(), so if you're planning on converting multiple
    images using the same input/output settings, this can save you time.
    Once you have a transform object, it can be used with
    ImageCms.applyProfile() to convert images without the need to re-compute
    the lookup table for the transform.

    The reason pyCMS returns a class object rather than a handle directly
    to the transform is that it needs to keep track of the PIL input/output
    modes that the transform is meant for.  These attributes are stored in
    the ``inMode`` and ``outMode`` attributes of the object (which can be
    manually overridden if you really want to, but I don't know of any
    time that would be of use, or would even work).

    :param inputProfile: String, as a valid filename path to the ICC input
        profile you wish to use for this transform, or a profile object
    :param outputProfile: String, as a valid filename path to the ICC output
        profile you wish to use for this transform, or a profile object
    :param inMode: String, as a valid PIL mode that the appropriate profile
        also supports (i.e. "RGB", "RGBA", "CMYK", etc.)
    :param outMode: String, as a valid PIL mode that the appropriate profile
        also supports (i.e. "RGB", "RGBA", "CMYK", etc.)
    :param renderingIntent: Integer (0-3) specifying the rendering intent you
        wish to use for the transform

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
        they do.
    :param flags: Integer (0-...) specifying additional flags
    :returns: A CmsTransform class object.
    :exception PyCMSError:
    

    (pyCMS) Builds an ICC transform mapping from the ``inputProfile`` to the
    ``outputProfile``, but tries to simulate the result that would be
    obtained on the ``proofProfile`` device.

    If the input, output, or proof profiles specified are not valid
    filenames, a :exc:`PyCMSError` will be raised.

    If an error occurs during creation of the transform,
    a :exc:`PyCMSError` will be raised.

    If ``inMode`` or ``outMode`` are not a mode supported by the ``outputProfile``
    (or by pyCMS), a :exc:`PyCMSError` will be raised.

    This function builds and returns an ICC transform from the ``inputProfile``
    to the ``outputProfile``, but tries to simulate the result that would be
    obtained on the ``proofProfile`` device using ``renderingIntent`` and
    ``proofRenderingIntent`` to determine what to do with out-of-gamut
    colors.  This is known as "soft-proofing".  It will ONLY work for
    converting images that are in ``inMode`` to images that are in outMode
    color format (PIL mode, i.e. "RGB", "RGBA", "CMYK", etc.).

    Usage of the resulting transform object is exactly the same as with
    ImageCms.buildTransform().

    Proof profiling is generally used when using an output device to get a
    good idea of what the final printed/displayed image would look like on
    the ``proofProfile`` device when it's quicker and easier to use the
    output device for judging color.  Generally, this means that the
    output device is a monitor, or a dye-sub printer (etc.), and the simulated
    device is something more expensive, complicated, or time consuming
    (making it difficult to make a real print for color judgement purposes).

    Soft-proofing basically functions by adjusting the colors on the
    output device to match the colors of the device being simulated. However,
    when the simulated device has a much wider gamut than the output
    device, you may obtain marginal results.

    :param inputProfile: String, as a valid filename path to the ICC input
        profile you wish to use for this transform, or a profile object
    :param outputProfile: String, as a valid filename path to the ICC output
        (monitor, usually) profile you wish to use for this transform, or a
        profile object
    :param proofProfile: String, as a valid filename path to the ICC proof
        profile you wish to use for this transform, or a profile object
    :param inMode: String, as a valid PIL mode that the appropriate profile
        also supports (i.e. "RGB", "RGBA", "CMYK", etc.)
    :param outMode: String, as a valid PIL mode that the appropriate profile
        also supports (i.e. "RGB", "RGBA", "CMYK", etc.)
    :param renderingIntent: Integer (0-3) specifying the rendering intent you
        wish to use for the input->proof (simulated) transform

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
        they do.
    :param proofRenderingIntent: Integer (0-3) specifying the rendering intent
        you wish to use for proof->output transform

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
        they do.
    :param flags: Integer (0-...) specifying additional flags
    :returns: A CmsTransform class object.
    :exception PyCMSError:
    
(None, None)

    (pyCMS) Applies a transform to a given image.

    If ``im.mode != transform.inMode``, a :exc:`PyCMSError` is raised.

    If ``inPlace`` is ``True`` and ``transform.inMode != transform.outMode``, a
    :exc:`PyCMSError` is raised.

    If ``im.mode``, ``transform.inMode`` or ``transform.outMode`` is not
    supported by pyCMSdll or the profiles you used for the transform, a
    :exc:`PyCMSError` is raised.

    If an error occurs while the transform is being applied,
    a :exc:`PyCMSError` is raised.

    This function applies a pre-calculated transform (from
    ImageCms.buildTransform() or ImageCms.buildTransformFromOpenProfiles())
    to an image. The transform can be used for multiple images, saving
    considerable calculation time if doing the same conversion multiple times.

    If you want to modify im in-place instead of receiving a new image as
    the return value, set ``inPlace`` to ``True``.  This can only be done if
    ``transform.inMode`` and ``transform.outMode`` are the same, because we can't
    change the mode in-place (the buffer sizes for some modes are
    different).  The default behavior is to return a new :py:class:`~PIL.Image.Image`
    object of the same dimensions in mode ``transform.outMode``.

    :param im: An :py:class:`~PIL.Image.Image` object, and im.mode must be the same
        as the ``inMode`` supported by the transform.
    :param transform: A valid CmsTransform class object
    :param inPlace: Bool.  If ``True``, ``im`` is modified in place and ``None`` is
        returned, if ``False``, a new :py:class:`~PIL.Image.Image` object with the
        transform applied is returned (and ``im`` is not changed). The default is
        ``False``.
    :returns: Either ``None``, or a new :py:class:`~PIL.Image.Image` object,
        depending on the value of ``inPlace``. The profile will be returned in
        the image's ``info['icc_profile']``.
    :exception PyCMSError:
    
LAB
XYZ
sRGB
Color space not supported for on-the-fly profile creation (
)
Color temperature must be numeric, "
" not valid
createProfile

    (pyCMS) Creates a profile.

    If colorSpace not in ``["LAB", "XYZ", "sRGB"]``,
    a :exc:`PyCMSError` is raised.

    If using LAB and ``colorTemp`` is not a positive integer,
    a :exc:`PyCMSError` is raised.

    If an error occurs while creating the profile,
    a :exc:`PyCMSError` is raised.

    Use this function to create common profiles on-the-fly instead of
    having to supply a profile on disk and knowing the path to it.  It
    returns a normal CmsProfile object that can be passed to
    ImageCms.buildTransformFromOpenProfiles() to create a transform to apply
    to images.

    :param colorSpace: String, the color space of the profile you wish to
        create.
        Currently only "LAB", "XYZ", and "sRGB" are supported.
    :param colorTemp: Positive integer for the white point for the profile, in
        degrees Kelvin (i.e. 5000, 6500, 9600, etc.).  The default is for D50
        illuminant if omitted (5000k).  colorTemp is ONLY applied to LAB
        profiles, and is ignored for XYZ and sRGB.
    :returns: A CmsProfile class object
    :exception PyCMSError:
    
model
manufacturer
profile_description


 - 
(None, None, None, None)


    (pyCMS) Gets the internal product name for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile,
    a :exc:`PyCMSError` is raised If an error occurs while trying
    to obtain the name tag, a :exc:`PyCMSError` is raised.

    Use this function to obtain the INTERNAL name of the profile (stored
    in an ICC tag in the profile itself), usually the one used when the
    profile was originally created.  Sometimes this tag also contains
    additional information supplied by the creator.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal name of the profile as stored
        in an ICC tag.
    :exception PyCMSError:
    
copyright
arr
append




    (pyCMS) Gets the internal product information for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile,
    a :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the info tag,
    a :exc:`PyCMSError` is raised.

    Use this function to obtain the information stored in the profile's
    info tag.  This often contains details about the profile, and how it
    was created, as supplied by the creator.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal profile information stored in
        an ICC tag.
    :exception PyCMSError:
    

    (pyCMS) Gets the copyright for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a
    :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the copyright tag,
    a :exc:`PyCMSError` is raised.

    Use this function to obtain the information stored in the profile's
    copyright tag.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal profile information stored in
        an ICC tag.
    :exception PyCMSError:
    

    (pyCMS) Gets the manufacturer for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a
    :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the manufacturer tag, a
    :exc:`PyCMSError` is raised.

    Use this function to obtain the information stored in the profile's
    manufacturer tag.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal profile information stored in
        an ICC tag.
    :exception PyCMSError:
    

    (pyCMS) Gets the model for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a
    :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the model tag,
    a :exc:`PyCMSError` is raised.

    Use this function to obtain the information stored in the profile's
    model tag.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal profile information stored in
        an ICC tag.
    :exception PyCMSError:
    

    (pyCMS) Gets the description for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a
    :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the description tag,
    a :exc:`PyCMSError` is raised.

    Use this function to obtain the information stored in the profile's
    description tag.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: A string containing the internal profile information stored in an
        ICC tag.
    :exception PyCMSError:
    
rendering_intent

    (pyCMS) Gets the default intent name for the given profile.

    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a
    :exc:`PyCMSError` is raised.

    If an error occurs while trying to obtain the default intent, a
    :exc:`PyCMSError` is raised.

    Use this function to determine the default (and usually best optimized)
    rendering intent for this profile.  Most profiles support multiple
    rendering intents, but are intended mostly for one type of conversion.
    If you wish to use a different intent than returned, use
    ImageCms.isIntentSupported() to verify it will work first.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :returns: Integer 0-3 specifying the default rendering intent for this
        profile.

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
            they do.
    :exception PyCMSError:
    
is_intent_supported
-1

    (pyCMS) Checks if a given intent is supported.

    Use this function to verify that you can use your desired
    ``intent`` with ``profile``, and that ``profile`` can be used for the
    input/output/proof profile as you desire.

    Some profiles are created specifically for one "direction", can cannot
    be used for others. Some profiles can only be used for certain
    rendering intents, so it's best to either verify this before trying
    to create a transform with them (using this function), or catch the
    potential :exc:`PyCMSError` that will occur if they don't
    support the modes you select.

    :param profile: EITHER a valid CmsProfile object, OR a string of the
        filename of an ICC profile.
    :param intent: Integer (0-3) specifying the rendering intent you wish to
        use with this profile

            ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)
            ImageCms.Intent.RELATIVE_COLORIMETRIC = 1
            ImageCms.Intent.SATURATION            = 2
            ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3

        see the pyCMS documentation for details on rendering intents and what
            they do.
    :param direction: Integer specifying if the profile is to be used for
        input, output, or proof

            INPUT  = 0 (or use ImageCms.Direction.INPUT)
            OUTPUT = 1 (or use ImageCms.Direction.OUTPUT)
            PROOF  = 2 (or use ImageCms.Direction.PROOF)

    :returns: 1 if the intent/direction are supported, -1 if they are not.
    :exception PyCMSError:
    
VERSION
littlecms_version
3.8.10
__version__

    (pyCMS) Fetches versions.
    
__doc__
__file__
__spec__
origin
has_location
__cached__
sys
enum
('IntEnum',)
IntEnum
('Image',)
('_imagingcms',)
ex
_util
('DeferredError',)
DeferredError

pyCMS

    a Python / PIL interface to the littleCMS ICC Color Management System
    Copyright (C) 2002-2003 Kevin Cazabon
    kevin@cazabon.com
    https://www.cazabon.com

    pyCMS home page:  https://www.cazabon.com/pyCMS
    littleCMS home page:  https://www.littlecms.com
    (littleCMS is Copyright (C) 1998-2001 Marti Maria)

    Originally released under LGPL.  Graciously donated to PIL in
    March 2009, for distribution under the standard PIL license

    The pyCMS.py module provides a "clean" interface between Python/PIL and
    pyCMSdll, taking care of some of the more complex handling of the direct
    pyCMSdll functions, as well as error-checking and making sure that all
    relevant data is kept together.

    While it is possible to call pyCMSdll functions directly, it's not highly
    recommended.

    Version History:

        1.0.0 pil       Oct 2013 Port to LCMS 2.

        0.1.0 pil mod   March 10, 2009

                        Renamed display profile to proof profile. The proof
                        profile is the profile of the device that is being
                        simulated, not the profile of the device which is
                        actually used to display/print the final simulation
                        (that'd be the output profile) - also see LCMSAPI.txt
                        input colorspace -> using 'renderingIntent' -> proof
                        colorspace -> using 'proofRenderingIntent' -> output
                        colorspace

                        Added LCMS FLAGS support.
                        Added FLAGS["SOFTPROOFING"] as default flag for
                        buildProofTransform (otherwise the proof profile/intent
                        would be ignored).

        0.1.0 pil       March 2009 - added to PIL, as PIL.ImageCms

        0.0.2 alpha     Jan 6, 2002

                        Added try/except statements around type() checks of
                        potential CObjects... Python won't let you use type()
                        on them, and raises a TypeError (stupid, if you ask
                        me!)

                        Added buildProofTransformFromOpenProfiles() function.
                        Additional fixes in DLL, see DLL code for details.

        0.0.1 alpha     first public release, Dec. 26, 2002

    Known to-do list with current version (of Python interface, not pyCMSdll):

        none


DESCRIPTION
1.0.0 pil
__prepare__
Intent
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ImageCms
__module__
__qualname__
PERCEPTUAL
RELATIVE_COLORIMETRIC
2
SATURATION
ABSOLUTE_COLORIMETRIC
__orig_bases__
Direction
INPUT
OUTPUT
PROOF
MATRIXINPUT
MATRIXOUTPUT
MATRIXONLY
NOWHITEONWHITEFIXUP
4
NOPRELINEARIZATION
GUESSDEVICECLASS
32
NOTCACHE
64
NOTPRECALC
256
NULLTRANSFORM
512
HIGHRESPRECALC
1024
LOWRESPRECALC
2048
WHITEBLACKCOMPENSATION
8192
BLACKPOINTCOMPENSATION
GAMUTCHECK
4096
SOFTPROOFING
16384
PRESERVEBLACK
32768
NODEFAULTRESOURCEDEF
16777216
GRIDPOINTS
<lambda>
FLAGS
flag
__init__
ImageCmsProfile.__init__
(None,)
ImageCmsProfile._set
ImageCmsProfile.tobytes
()
ImagePointHandler

    Transform.  This can be used with the procedural API, or with the standard
    :py:func:`~PIL.Image.Image.point` method.

    Will return the output profile in the ``output.info['icc_profile']``.
    
ImageCmsTransform.__init__
point
ImageCmsTransform.point
ImageCmsTransform.apply
ImageCmsTransform.apply_in_place
get_display_profile
(None,)
(pyCMS) Exception class.
    This is used for all errors in the pyCMS API.
profileToProfile
getOpenProfile
buildTransformFromOpenProfiles
buildProofTransformFromOpenProfiles
(False,)
applyTransform
(-1,)
getProfileName
getProfileInfo
getProfileCopyright
getProfileManufacturer
getProfileModel
getProfileDescription
getDefaultIntent
isIntentSupported
versions
PIL\ImageCms.py
('n',)
<module PIL.ImageCms>
('__class__',)
('self', 'input', 'output', 'input_mode', 'output_mode', 'intent', 'proof', 'proof_intent', 'flags')
('self', 'profile', 'profile_bytes_path', 'f', 'msg')
('self', 'profile', 'filename')
('self', 'im', 'imOut')
('im', 'transform', 'inPlace', 'imOut', 'v')
('self', 'im', 'msg')
('inputProfile', 'outputProfile', 'proofProfile', 'inMode', 'outMode', 'renderingIntent', 'proofRenderingIntent', 'flags', 'msg', 'v')
('inputProfile', 'outputProfile', 'inMode', 'outMode', 'renderingIntent', 'flags', 'msg', 'v')
('colorSpace', 'colorTemp', 'msg', 'e', 'v')
('profile', 'v')
('profileFilename', 'v')
('profile', 'description', 'cpright', 'arr', 'elt', 'v')
('profile', 'model', 'manufacturer', 'v')
('handle', 'ImageWin', 'profile')
('profile', 'intent', 'direction', 'v')
('self', 'im')
('im', 'inputProfile', 'outputProfile', 'renderingIntent', 'outputMode', 'inPlace', 'flags', 'msg', 'transform', 'imOut', 'v')
('self',)

------------------------------ [modulecode_PIL.ImageColor] ------------------------------
color specifier is too long
lower
colormap
get
getrgb
re
match
#[a-f0-9]{3}$
1
2
16
3
#[a-f0-9]{4}$
4
#[a-f0-9]{6}$
[1, 3, None]
[3, 5, None]
[5, 7, None]
#[a-f0-9]{8}$
[7, 9, None]
rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$
group
(1,)
(2,)
(3,)
rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)$
255
100.0
0.5
hsl\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$
colorsys
('hls_to_rgb',)
0
hls_to_rgb
360.0
hs[bv]\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$
('hsv_to_rgb',)
hsv_to_rgb
rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$
(4,)
unknown color specifier: 


     Convert a color string to an RGB or RGBA tuple. If the string cannot be
     parsed, this function raises a :py:exc:`ValueError` exception.

    .. versionadded:: 1.1.4

    :param color: A color string
    :return: ``(red, green, blue[, alpha])``
    
too many values to unpack (expected 2)
[None, 3, None]
HSV
('rgb_to_hsv',)
rgb_to_hsv
color
too many values to unpack (expected 3)
Image
getmodebase
L
19595
38470
7471
32768
-1
A

    Same as :py:func:`~PIL.ImageColor.getrgb` for most modes. However, if
    ``mode`` is HSV, converts the RGB value to a HSV value, or if ``mode`` is
    not color or a palette image, converts the RGB value to a greyscale value.
    If the string cannot be parsed, this function raises a :py:exc:`ValueError`
    exception.

    .. versionadded:: 1.1.4

    :param color: A color string
    :param mode: Convert result to this mode
    :return: ``(graylevel[, alpha]) or (red, green, blue[, alpha])``
    
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image',)
getcolor
{'aliceblue': '#f0f8ff', 'antiquewhite': '#faebd7', 'aqua': '#00ffff', 'aquamarine': '#7fffd4', 'azure': '#f0ffff', 'beige': '#f5f5dc', 'bisque': '#ffe4c4', 'black': '#000000', 'blanchedalmond': '#ffebcd', 'blue': '#0000ff', 'blueviolet': '#8a2be2', 'brown': '#a52a2a', 'burlywood': '#deb887', 'cadetblue': '#5f9ea0', 'chartreuse': '#7fff00', 'chocolate': '#d2691e', 'coral': '#ff7f50', 'cornflowerblue': '#6495ed', 'cornsilk': '#fff8dc', 'crimson': '#dc143c', 'cyan': '#00ffff', 'darkblue': '#00008b', 'darkcyan': '#008b8b', 'darkgoldenrod': '#b8860b', 'darkgray': '#a9a9a9', 'darkgrey': '#a9a9a9', 'darkgreen': '#006400', 'darkkhaki': '#bdb76b', 'darkmagenta': '#8b008b', 'darkolivegreen': '#556b2f', 'darkorange': '#ff8c00', 'darkorchid': '#9932cc', 'darkred': '#8b0000', 'darksalmon': '#e9967a', 'darkseagreen': '#8fbc8f', 'darkslateblue': '#483d8b', 'darkslategray': '#2f4f4f', 'darkslategrey': '#2f4f4f', 'darkturquoise': '#00ced1', 'darkviolet': '#9400d3', 'deeppink': '#ff1493', 'deepskyblue': '#00bfff', 'dimgray': '#696969', 'dimgrey': '#696969', 'dodgerblue': '#1e90ff', 'firebrick': '#b22222', 'floralwhite': '#fffaf0', 'forestgreen': '#228b22', 'fuchsia': '#ff00ff', 'gainsboro': '#dcdcdc', 'ghostwhite': '#f8f8ff', 'gold': '#ffd700', 'goldenrod': '#daa520', 'gray': '#808080', 'grey': '#808080', 'green': '#008000', 'greenyellow': '#adff2f', 'honeydew': '#f0fff0', 'hotpink': '#ff69b4', 'indianred': '#cd5c5c', 'indigo': '#4b0082', 'ivory': '#fffff0', 'khaki': '#f0e68c', 'lavender': '#e6e6fa', 'lavenderblush': '#fff0f5', 'lawngreen': '#7cfc00', 'lemonchiffon': '#fffacd', 'lightblue': '#add8e6', 'lightcoral': '#f08080', 'lightcyan': '#e0ffff', 'lightgoldenrodyellow': '#fafad2', 'lightgreen': '#90ee90', 'lightgray': '#d3d3d3', 'lightgrey': '#d3d3d3', 'lightpink': '#ffb6c1', 'lightsalmon': '#ffa07a', 'lightseagreen': '#20b2aa', 'lightskyblue': '#87cefa', 'lightslategray': '#778899', 'lightslategrey': '#778899', 'lightsteelblue': '#b0c4de', 'lightyellow': '#ffffe0', 'lime': '#00ff00', 'limegreen': '#32cd32', 'linen': '#faf0e6', 'magenta': '#ff00ff', 'maroon': '#800000', 'mediumaquamarine': '#66cdaa', 'mediumblue': '#0000cd', 'mediumorchid': '#ba55d3', 'mediumpurple': '#9370db', 'mediumseagreen': '#3cb371', 'mediumslateblue': '#7b68ee', 'mediumspringgreen': '#00fa9a', 'mediumturquoise': '#48d1cc', 'mediumvioletred': '#c71585', 'midnightblue': '#191970', 'mintcream': '#f5fffa', 'mistyrose': '#ffe4e1', 'moccasin': '#ffe4b5', 'navajowhite': '#ffdead', 'navy': '#000080', 'oldlace': '#fdf5e6', 'olive': '#808000', 'olivedrab': '#6b8e23', 'orange': '#ffa500', 'orangered': '#ff4500', 'orchid': '#da70d6', 'palegoldenrod': '#eee8aa', 'palegreen': '#98fb98', 'paleturquoise': '#afeeee', 'palevioletred': '#db7093', 'papayawhip': '#ffefd5', 'peachpuff': '#ffdab9', 'peru': '#cd853f', 'pink': '#ffc0cb', 'plum': '#dda0dd', 'powderblue': '#b0e0e6', 'purple': '#800080', 'rebeccapurple': '#663399', 'red': '#ff0000', 'rosybrown': '#bc8f8f', 'royalblue': '#4169e1', 'saddlebrown': '#8b4513', 'salmon': '#fa8072', 'sandybrown': '#f4a460', 'seagreen': '#2e8b57', 'seashell': '#fff5ee', 'sienna': '#a0522d', 'silver': '#c0c0c0', 'skyblue': '#87ceeb', 'slateblue': '#6a5acd', 'slategray': '#708090', 'slategrey': '#708090', 'snow': '#fffafa', 'springgreen': '#00ff7f', 'steelblue': '#4682b4', 'tan': '#d2b48c', 'teal': '#008080', 'thistle': '#d8bfd8', 'tomato': '#ff6347', 'turquoise': '#40e0d0', 'violet': '#ee82ee', 'wheat': '#f5deb3', 'white': '#ffffff', 'whitesmoke': '#f5f5f5', 'yellow': '#ffff00', 'yellowgreen': '#9acd32'}
PIL\ImageColor.py
<module PIL.ImageColor>
('color', 'mode', 'alpha', 'rgb_to_hsv', 'r', 'g', 'b', 'h', 's', 'v')
('color', 'msg', 'rgb', 'm', 'hls_to_rgb', 'hsv_to_rgb')

------------------------------ [modulecode_PIL.ImageFile] ------------------------------
Image
core
getcodecstatus
ERRORS
get
decoder error 

 when reading image file
2
__class__
__init__
0
_min_frame
custom_mimetype
tile
1
readonly
()
decoderconfig
MAXBLOCK
decodermaxblock
is_path
rb
fp
filename
_exclusive_fp
_open
struct
error
mode
size
not identified by this driver
close
format
MIME
upper
__setstate__
Check file integrity
cannot load this image
load
map
sys
pypy_version_info
load_read
read
load_seek
seek
too many values to unpack (expected 4)
raw
_MAPMODES
mmap
__enter__
__exit__
fileno
ACCESS_READ
('access',)
(None, None, None)
args
map_buffer
im
palette
dirty
(None, None, None)
load_prepare
-3
sort
_tilesort
('key',)
tile_prefix
b''
itertools
groupby
<lambda>
ImageFile.load.<locals>.<lambda>
too many values to unpack (expected 2)
-1
_getdecoder
self
setimage
pulls_fd
setfd
decode
(b'',)
prefix
LOAD_TRUNCATED_IMAGES
image file is truncated
image file is truncated (
b
 bytes not processed)
decoder
cleanup
load_end
_close_exclusive_fp_after_loading
err_code
raise_oserror
Load image data based on tile list
3
new
P
_n_frames
n_frames
attempt to seek outside sequence
tell
StubImageFile subclass must implement _open
_load
cannot find loader for this 
 file
StubImageFile subclass must implement _load
(Hook) Find actual image loader.
data
('cannot reuse parsers',)

        (Consumer) Reset the parser.  Note that you can only call this
        method immediately after you've created a parser; parser
        instances cannot be reused.
        
finished
offset
min
image
BytesIO
open

        (Consumer) Feed data to the parser.

        :param data: A string buffer.
        :exception OSError: If the parser failed to parse the image file.
        
feed
image was incomplete
cannot parse this image

        (Consumer) Close the stream.

        :returns: An image object.
        :exception OSError: If the parser failed to parse the image file either
                            because it cannot be identified or cannot be
                            decoded.
        
encoderconfig
max
4
flush
_encode_tile
io
UnsupportedOperation
Helper to save image based on tile list

    :param im: Image object.
    :param fp: File object.
    :param tile: Tile list.
    :param bufsize: Optional buffer size
    
_getencoder
pushes_fd
encode_to_pyfd
encoder
encode
bufsize
[1, None, None]
write
encode_to_file
fh
encoder error 
 when writing image file
SAFEBLOCK
Truncated File Read
remaining_size
append

    Reads large blocks in a safe way.  Unlike fp.read(n), this function
    doesn't trust the user.  If the requested size is larger than
    SAFEBLOCK, the file is read block by block.

    :param fp: File handle.  Must implement a <b>read</b> method.
    :param size: Number of bytes to read.
    :returns: A string containing <i>size</i> bytes of data.

    Raises an OSError if the file is truncated and the read cannot be completed

    
<genexpr>
_safe_read.<locals>.<genexpr>
xsize
ysize
xoff
yoff
PyCodecState
state
fd
init

        Override to perform codec specific initialization

        :param args: Array of args items from the tile entry
        :returns: None
        

        Called from ImageFile to set the Python file-like object

        :param fd: A Python file-like object
        :returns: None
        
(0, 0, 0, 0)
Size cannot be negative
Tile cannot extend outside image

        Called from ImageFile to set the core output image for the codec

        :param im: A core image object
        :param extents: a 4 tuple of (x0, y0, x1, y1) defining the rectangle
            for this tile
        :returns: None
        
_pulls_fd

        Override to perform the decoding process.

        :param buffer: A bytes object with the data to be decoded.
        :returns: A tuple of ``(bytes consumed, errcode)``.
            If finished with decoding return -1 for the bytes consumed.
            Err codes are from :data:`.ImageFile.ERRORS`.
        
extents
not enough image data
cannot decode image data

        Convenience method to set the internal image from a stream of raw data

        :param data: Bytes to be set
        :param rawmode: The rawmode to be used for the decoder.
            If not specified, it will default to the mode of the image
        :returns: None
        
_pushes_fd

        Override to perform the encoding process.

        :param bufsize: Buffer size.
        :returns: A tuple of ``(bytes encoded, errcode, bytes)``.
            If finished with encoding return 1 for the error code.
            Err codes are from :data:`.ImageFile.ERRORS`.
        
(0, -8)
(0,)
too many values to unpack (expected 3)

        If ``pushes_fd`` is ``True``, then this method will be used,
        and ``encode()`` will only be called once.

        :returns: A tuple of ``(bytes consumed, errcode)``.
            Err codes are from :data:`.ImageFile.ERRORS`.
        
errcode

        :param fh: File handle.
        :param bufsize: Buffer size.

        :returns: If finished successfully, return 0.
            Otherwise, return an error code. Err codes are from
            :data:`.ImageFile.ERRORS`.
        
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image',)
_util
('is_path',)
65536
1048576
{-1: 'image buffer overrun error', -2: 'decoding error', -3: 'unknown error', -8: 'bad configuration', -9: 'out of memory error'}
__prepare__
ImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ImageFile
__module__
Base class for image file format handlers.
__qualname__
(None, None)
ImageFile.__init__
get_format_mimetype
ImageFile.get_format_mimetype
ImageFile.__setstate__
verify
ImageFile.verify
ImageFile.load
ImageFile.load_prepare
ImageFile.load_end
_seek_check
ImageFile._seek_check
__orig_bases__
StubImageFile

    Base class for stub image loaders.

    A stub loader is an image loader that can identify files of a
    certain format, but relies on external code to load the file.
    
StubImageFile._open
StubImageFile.load
StubImageFile._load

    Incremental image parser.  This class implements the standard
    feed/close consumer interface.
    
Parser
incremental
reset
Parser.reset
Parser.feed
Parser.__enter__
Parser.__exit__
Parser.close
_save
(None,)
_safe_read
PyCodecState.__init__
PyCodecState.extents
PyCodec
PyCodec.__init__
PyCodec.init

        Override to perform codec specific cleanup

        :returns: None
        
PyCodec.cleanup
PyCodec.setfd
PyCodec.setimage
PyDecoder

    Python implementation of a format decoder. Override this class and
    add the decoding logic in the :meth:`decode` method.

    See :ref:`Writing Your Own File Codec in Python<file-codecs-py>`
    
property
PyDecoder.pulls_fd
PyDecoder.decode
set_as_raw
PyDecoder.set_as_raw
PyEncoder

    Python implementation of a format encoder. Override this class and
    add the decoding logic in the :meth:`encode` method.

    See :ref:`Writing Your Own File Codec in Python<file-codecs-py>`
    
PyEncoder.pushes_fd
PyEncoder.encode
PyEncoder.encode_to_pyfd
PyEncoder.encode_to_file
PIL\ImageFile.py
('.0', 'd')
('tile',)
<module PIL.ImageFile>
('__class__',)
('self',)
('self', 'args')
('self', 'fp', 'filename', 'v', 'msg', '__class__')
('self', 'mode', 'args')
('self', 'state', '__class__')
('im', 'fp', 'tile', 'bufsize', 'fh', 'exc', 'e', 'b', 'o', 'a', 'encoder', 'errcode', 'data', 'msg')
('self', 'msg')
('fp', 'size', 'data', 'msg', 'remaining_size', 'block')
('im', 'fp', 'tile', 'bufsize', 'fh', 'exc')
('self', 'frame', 'msg')
('t',)
('self', 'msg', 'fp')
('self', 'buffer')
('self', 'bufsize')
('self', 'fh', 'bufsize', 'errcode', 'status', 'buf')
('self', 'bytes_consumed', 'errcode', 'data')
('self', 'data', 'skip', 'n', 'e', 'fp', 'im', 'flag', 'd', 'o', 'a')
('self', 'loader', 'msg', 'image')
('self', 'msg', 'pixel', 'use_mmap', 'readonly', 'read', 'seek', 'decoder_name', 'extents', 'offset', 'args', 'mmap', 'fp', 'err_code', 'prefix', 'decoder', 'b', 's', 'e', 'n')
('error', 'msg')
('self', 'data', 'rawmode', 'd', 's', 'msg')
('self', 'fd')
('self', 'im', 'extents', 'x0', 'y0', 'x1', 'y1', 'msg')

------------------------------ [modulecode_PIL.ImageFilter] ------------------------------
mode
P
cannot filter palette images
filter
filterargs
functools
reduce
<lambda>
Kernel.__init__.<locals>.<lambda>
0
1
kernel
not enough coefficients in kernel
size
rank
expand
2
rankfilter
modefilter
radius
gaussian_blur
radius must be >= 0
box_blur
percent
threshold
unsharp_mask
(3, 4)
Only 3 or 4 output channels are supported
_check_size
channels
_copy_table
shape
numpy
ndarray
copy
reshape
(<class 'list'>, <class 'tuple'>)
too many values to unpack (expected 2)
The elements of the table should have a length of 

.
table
extend
The table should have either channels * size**3 float items or size**3 items of channels-sized tuples with floats. Table should be: 
x
. Actual length: 
too many values to unpack (expected 3)
Size should be either an integer or a tuple of three integers.
65
Size should be in [2, 65] range.
size_2d
size_1d
callback
g
b
size_3d
idx_out
('channels', 'target_mode', '_copy_table')
Generates new LUT using provided callback.

        :param size: Size of the table. Passed to the constructor.
        :param callback: Function with three parameters which correspond
                         three color channels. Will be called ``size**3``
                         times with values from 0.0 to 1.0 and should return
                         a tuple with ``channels`` elements.
        :param channels: The number of channels which should return callback.
        :param target_mode: Passed to the constructor of the resulting
                            lookup table.
        
(None, 3, 4)
self
idx_in
ch_in
ch_out
Transforms the table values using provided callback and returns
        a new LUT with altered values.

        :param callback: A function which takes old lookup table values
                         and returns a new set of values. The number
                         of arguments which function should take is
                         ``self.channels`` or ``3 + self.channels``
                         if ``with_normals`` flag is set.
                         Should return a tuple of ``self.channels`` or
                         ``channels`` elements if it is set.
        :param with_normals: If true, ``callback`` will be called with
                             coordinates in the color cube as the first
                             three arguments. Otherwise, ``callback``
                             will be called only with actual color values.
        :param channels: The number of channels in the resulting lookup table.
        :param target_mode: Passed to the constructor of the resulting
                            lookup table.
        
__name__
 from 
size={:d}x{:d}x{:d}
format
channels=
d
target_mode=
<{}>
 
r
('Image',)
Image
color_lut_3d
Resampling
BILINEAR
__doc__
__file__
__spec__
origin
has_location
__cached__
PIL.ImageFilter
__module__
Filter
__qualname__
()
__prepare__
MultibandFilter
__getitem__
%s.__prepare__() must return a mapping, not %s
<metaclass>
__orig_bases__
BuiltinFilter
BuiltinFilter.filter
Kernel

    Create a convolution kernel. The current version only
    supports 3x3 and 5x5 integer and floating point kernels.

    In the current version, kernels can only be applied to
    "L" and "RGB" images.

    :param size: Kernel size, given as (width, height). In the current
                    version, this must be (3,3) or (5,5).
    :param kernel: A sequence containing kernel weights. The kernel will
                   be flipped vertically before being applied to the image.
    :param scale: Scale factor. If given, the result for each pixel is
                    divided by this value. The default is the sum of the
                    kernel weights.
    :param offset: Offset. If given, this value is added to the result,
                    after it has been divided by the scale factor.
    
name
(None, 0)
__init__
Kernel.__init__
RankFilter

    Create a rank filter.  The rank filter sorts all pixels in
    a window of the given size, and returns the ``rank``'th value.

    :param size: The kernel size, in pixels.
    :param rank: What pixel value to pick.  Use 0 for a min filter,
                 ``size * size / 2`` for a median filter, ``size * size - 1``
                 for a max filter, etc.
    
Rank
RankFilter.__init__
RankFilter.filter
MedianFilter

    Create a median filter. Picks the median pixel value in a window with the
    given size.

    :param size: The kernel size, in pixels.
    
Median
(3,)
MedianFilter.__init__
MinFilter

    Create a min filter.  Picks the lowest pixel value in a window with the
    given size.

    :param size: The kernel size, in pixels.
    
Min
MinFilter.__init__
MaxFilter

    Create a max filter.  Picks the largest pixel value in a window with the
    given size.

    :param size: The kernel size, in pixels.
    
Max
MaxFilter.__init__
ModeFilter

    Create a mode filter. Picks the most frequent pixel value in a box with the
    given size.  Pixel values that occur only once or twice are ignored; if no
    pixel value occurs more than twice, the original pixel value is preserved.

    :param size: The kernel size, in pixels.
    
Mode
ModeFilter.__init__
ModeFilter.filter
GaussianBlur
Blurs the image with a sequence of extended box filters, which
    approximates a Gaussian kernel. For details on accuracy see
    <https://www.mia.uni-saarland.de/Publications/gwosdek-ssvm11.pdf>

    :param radius: Standard deviation of the Gaussian kernel.
    
(2,)
GaussianBlur.__init__
GaussianBlur.filter
BoxBlur
Blurs the image by setting each pixel to the average value of the pixels
    in a square box extending radius pixels in each direction.
    Supports float radius of arbitrary size. Uses an optimized implementation
    which runs in linear time relative to the size of the image
    for any radius value.

    :param radius: Size of the box in one direction. Radius 0 does not blur,
                   returns an identical image. Radius 1 takes 1 pixel
                   in each direction, i.e. 9 pixels in total.
    
BoxBlur.__init__
BoxBlur.filter
UnsharpMask
Unsharp mask filter.

    See Wikipedia's entry on `digital unsharp masking`_ for an explanation of
    the parameters.

    :param radius: Blur Radius
    :param percent: Unsharp strength, in percent
    :param threshold: Threshold controls the minimum brightness change that
      will be sharpened

    .. _digital unsharp masking: https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking

    
(2, 150, 3)
UnsharpMask.__init__
UnsharpMask.filter
BLUR
Blur
((5, 5), 16, 0, (1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1))
CONTOUR
Contour
((3, 3), 1, 255, (-1, -1, -1, -1, 8, -1, -1, -1, -1))
DETAIL
Detail
((3, 3), 6, 0, (0, -1, 0, -1, 10, -1, 0, -1, 0))
EDGE_ENHANCE
Edge-enhance
((3, 3), 2, 0, (-1, -1, -1, -1, 10, -1, -1, -1, -1))
EDGE_ENHANCE_MORE
Edge-enhance More
((3, 3), 1, 0, (-1, -1, -1, -1, 9, -1, -1, -1, -1))
EMBOSS
Emboss
((3, 3), 1, 128, (-1, 0, 0, 0, 1, 0, 0, 0, 0))
FIND_EDGES
Find Edges
((3, 3), 1, 0, (-1, -1, -1, -1, 8, -1, -1, -1, -1))
SHARPEN
Sharpen
((3, 3), 16, 0, (-2, -2, -2, -2, 32, -2, -2, -2, -2))
SMOOTH
Smooth
((3, 3), 13, 0, (1, 1, 1, 1, 5, 1, 1, 1, 1))
SMOOTH_MORE
Smooth More
((5, 5), 100, 0, (1, 1, 1, 1, 1, 1, 5, 5, 5, 1, 1, 5, 44, 5, 1, 1, 5, 5, 5, 1, 1, 1, 1, 1, 1))
Color3DLUT
Three-dimensional color lookup table.

    Transforms 3-channel pixels using the values of the channels as coordinates
    in the 3D lookup table and interpolating the nearest elements.

    This method allows you to apply almost any color transformation
    in constant time by using pre-calculated decimated tables.

    .. versionadded:: 5.2.0

    :param size: Size of the table. One int or tuple of (int, int, int).
                 Minimal size in any dimension is 2, maximum is 65.
    :param table: Flat lookup table. A list of ``channels * size**3``
                  float elements or a list of ``size**3`` channels-sized
                  tuples with floats. Channels are changed first,
                  then first dimension, then second, then third.
                  Value 0.0 corresponds lowest value of output, 1.0 highest.
    :param channels: Number of channels in the table. Could be 3 or 4.
                     Default is 3.
    :param target_mode: A mode for the result image. Should have not less
                        than ``channels`` channels. Default is ``None``,
                        which means that mode wouldn't be changed.
    
Color 3D LUT
(3, None)
Color3DLUT.__init__
staticmethod
Color3DLUT._check_size
classmethod
generate
Color3DLUT.generate
(False, None, None)
transform
Color3DLUT.transform
__repr__
Color3DLUT.__repr__
Color3DLUT.filter
PIL\ImageFilter.py
('a', 'b')
<module PIL.ImageFilter>
('__class__',)
('self', 'radius')
('self', 'radius', 'msg')
('self', 'radius', 'percent', 'threshold')
('self', 'size')
('self', 'size', 'kernel', 'scale', 'offset', 'msg')
('self', 'size', 'rank')
('self', 'size', 'table', 'channels', 'target_mode', 'kwargs', 'msg', 'copy_table', 'items', 'wrong_size', 'numpy', 'raw_table', 'pixel')
('self', 'r')
('size', '_', 'e', 'msg', 'size_1d')
('self', 'image')
('self', 'image', 'Image')
('self', 'image', 'msg')
('cls', 'size', 'callback', 'channels', 'target_mode', 'size_1d', 'size_2d', 'size_3d', 'msg', 'table', 'idx_out', 'b', 'g', 'r')
('self', 'callback', 'with_normals', 'channels', 'target_mode', 'msg', 'ch_in', 'ch_out', 'size_1d', 'size_2d', 'size_3d', 'table', 'idx_in', 'idx_out', 'b', 'g', 'r', 'values')

------------------------------ [modulecode_PIL.ImageMode] ------------------------------
mode
bands
basemode
basetype
typestr
_modes
{'1': ('L', 'L', ('1',), '|b1'), 'L': ('L', 'L', ('L',), '|u1'), 'I': ('L', 'I', ('I',), '<i4'), 'F': ('L', 'F', ('F',), '<f4'), 'P': ('P', 'L', ('P',), '|u1'), 'RGB': ('RGB', 'L', ('R', 'G', 'B'), '|u1'), 'RGBX': ('RGB', 'L', ('R', 'G', 'B', 'X'), '|u1'), 'RGBA': ('RGB', 'L', ('R', 'G', 'B', 'A'), '|u1'), 'CMYK': ('RGB', 'L', ('C', 'M', 'Y', 'K'), '|u1'), 'YCbCr': ('RGB', 'L', ('Y', 'Cb', 'Cr'), '|u1'), 'LAB': ('RGB', 'L', ('L', 'A', 'B'), '|u1'), 'HSV': ('RGB', 'L', ('H', 'S', 'V'), '|u1'), 'RGBa': ('RGB', 'L', ('R', 'G', 'B', 'a'), '|u1'), 'BGR;15': ('RGB', 'L', ('B', 'G', 'R'), '|u1'), 'BGR;16': ('RGB', 'L', ('B', 'G', 'R'), '|u1'), 'BGR;24': ('RGB', 'L', ('B', 'G', 'R'), '|u1'), 'LA': ('L', 'L', ('L', 'A'), '|u1'), 'La': ('L', 'L', ('L', 'a'), '|u1'), 'PA': ('RGB', 'L', ('P', 'A'), '|u1')}
too many values to unpack (expected 2)
too many values to unpack (expected 4)
ModeDescriptor
modes
{'I;16': '<u2', 'I;16S': '<i2', 'I;16L': '<u2', 'I;16LS': '<i2', 'I;16B': '>u2', 'I;16BS': '>i2', 'I;16N': '<u2', 'I;16NS': '<i2', 'I;32': '<u4', 'I;32B': '>u4', 'I;32L': '<u4', 'I;32S': '<i4', 'I;32BS': '>i4', 'I;32LS': '<i4'}
('I',)
L
Gets a mode descriptor for the given mode.
__doc__
__file__
__spec__
origin
has_location
__cached__
sys
PIL.ImageMode
__module__
Wrapper for mode strings.
__qualname__
__init__
ModeDescriptor.__init__
__str__
ModeDescriptor.__str__
()
getmode
PIL\ImageMode.py
<module PIL.ImageMode>
('self', 'mode', 'bands', 'basemode', 'basetype', 'typestr')
('self',)
('mode', 'modes', 'endian', 'm', 'basemode', 'basetype', 'bands', 'typestr', 'i16mode')


------------------------------ [modulecode_PIL.ImageOps] ------------------------------
too many values to unpack (expected 2)
too many values to unpack (expected 4)
left
top
right
bottom

('ImageColor',)
1
ImageColor
0
getcolor
mode
P
mode P support coming soon
('L', 'RGB')
RGB
lut
point
not supported for this image mode
convert
('L',)
histogram
256
ignore
h
cutoff
(0, 256, 1)
n
100
cut
(255, -1, -1)
hi
lo
extend
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]
255.0
scale
offset
255
append
_lut
image

    Maximize (normalize) image contrast. This function calculates a
    histogram of the input image (or mask region), removes ``cutoff`` percent of the
    lightest and darkest pixels from the histogram, and remaps the image
    so that the darkest pixel becomes black (0), and the lightest
    becomes white (255).

    :param image: The image to process.
    :param cutoff: The percent to cut off from the histogram on the low and
                   high ends. Either a tuple of (low, high), or a single
                   number for both.
    :param ignore: The background pixel value (use None for no background).
    :param mask: Histogram used in contrast operation is computed using pixels
                 within the mask. If no mask is given the entire image is used
                 for histogram computation.
    :param preserve_tone: Preserve image tone in Photoshop-like style autocontrast.

                          .. versionadded:: 8.2.0

    :return: An image.
    
L
_color
blackpoint
red
green
blue
2
whitepoint
midpoint
('RGB',)

    Colorize grayscale image.
    This function calculates a color wedge which maps all black pixels in
    the source image to the first color and all white pixels to the
    second color. If ``mid`` is specified, it uses three-color mapping.
    The ``black`` and ``white`` arguments should be RGB tuples or color names;
    optionally you can use three-color mapping by also specifying ``mid``.
    Mapping positions for any of the colors can be specified
    (e.g. ``blackpoint``), where these parameters are the integer
    value corresponding to where the corresponding color should be mapped.
    These parameters must have logical order, such that
    ``blackpoint <= midpoint <= whitepoint`` (if ``mid`` is specified).

    :param image: The image to colorize.
    :param black: The color to use for black input pixels.
    :param white: The color to use for white input pixels.
    :param mid: The color to use for midtone input pixels.
    :param blackpoint: an int value [0, 255] for the black mapping.
    :param whitepoint: an int value [0, 255] for the white mapping.
    :param midpoint: an int value [0, 255] for the midtone mapping.
    :return: An image.
    
width
height
round
resize
('resample',)

    Returns a resized version of the image, set to the maximum width and height
    within the requested size, while maintaining the original aspect ratio.

    :param image: The image to resize and crop.
    :param size: The requested output size in pixels, given as a
                 (width, height) tuple.
    :param method: Resampling method to use. Default is
                   :py:attr:`~PIL.Image.Resampling.BICUBIC`.
                   See :ref:`concept-filters`.
    :return: An image.
    
contain
size
Image
new
palette
putpalette
getpalette
max
min
out
paste

    Returns a resized and padded version of the image, expanded to fill the
    requested aspect ratio and size.

    :param image: The image to resize and crop.
    :param size: The requested output size in pixels, given as a
                 (width, height) tuple.
    :param method: Resampling method to use. Default is
                   :py:attr:`~PIL.Image.Resampling.BICUBIC`.
                   See :ref:`concept-filters`.
    :param color: The background color of the padded image.
    :param centering: Control the position of the original image within the
                      padded version.

                          (0.5, 0.5) will keep the image centered
                          (0, 0) will keep the image aligned to the top left
                          (1, 1) will keep the image aligned to the bottom
                          right
    :return: An image.
    
_border
crop

    Remove border from image.  The same amount of pixels are removed
    from all four sides.  This function works on all image modes.

    .. seealso:: :py:meth:`~PIL.Image.Image.crop`

    :param image: The image to crop.
    :param border: The number of pixels to remove.
    :return: An image.
    
copy
the factor must be greater than 0

    Returns a rescaled image by a specific factor given in parameter.
    A factor greater than 1 expands the image, between 0 and 1 contracts the
    image.

    :param image: The image to rescale.
    :param factor: The expansion factor, as a float.
    :param resample: Resampling method to use. Default is
                     :py:attr:`~PIL.Image.Resampling.BICUBIC`.
                     See :ref:`concept-filters`.
    :returns: An :py:class:`~PIL.Image.Image` object.
    
transform
Transform
MESH
getmesh

    Deform the image.

    :param image: The image to deform.
    :param deformer: A deformer object.  Any object that implements a
                    ``getmesh`` method can be used.
    :param resample: An optional resampling filter. Same values possible as
       in the PIL.Image.transform function.
    :return: An image.
    
functools
reduce
operator
add
-1
step
b

    Equalize the image histogram. This function applies a non-linear
    mapping to the input image, in order to create a uniform
    distribution of grayscale values in the output image.

    :param image: The image to equalize.
    :param mask: An optional mask.  If given, only the pixels selected by
                 the mask are included in the analysis.
    :return: An image.
    
ImagePalette
('palette',)

    Add border to the image

    :param image: The image to expand.
    :param border: Border width, in pixels.
    :param fill: Pixel fill value (a color value).  Default is 0 (black).
    :return: An image.
    
0.0
1.0
0.5
centering
bleed
('box',)

    Returns a resized and cropped version of the image, cropped to the
    requested aspect ratio and size.

    This function was contributed by Kevin Cazabon.

    :param image: The image to resize and crop.
    :param size: The requested output size in pixels, given as a
                 (width, height) tuple.
    :param method: Resampling method to use. Default is
                   :py:attr:`~PIL.Image.Resampling.BICUBIC`.
                   See :ref:`concept-filters`.
    :param bleed: Remove a border around the outside of the image from all
                  four edges. The value is a decimal percentage (use 0.01 for
                  one percent). The default value is 0 (no border).
                  Cannot be greater than or equal to 0.5.
    :param centering: Control the cropping position.  Use (0.5, 0.5) for
                      center cropping (e.g. if cropping the width, take 50% off
                      of the left side, and therefore 50% off the right side).
                      (0.0, 0.0) will crop from the top left corner (i.e. if
                      cropping the width, take all of the crop off of the right
                      side, and if cropping the height, take all of it off the
                      bottom).  (1.0, 0.0) will crop from the bottom left
                      corner, etc. (i.e. if cropping the width, take all of the
                      crop off the left side, and if cropping the height take
                      none from the top, and therefore all off the bottom).
    :return: An image.
    
transpose
Transpose
FLIP_TOP_BOTTOM

    Flip the image vertically (top to bottom).

    :param image: The image to flip.
    :return: An image.
    

    Convert the image to grayscale.

    :param image: The image to convert.
    :return: An image.
    
1

    Invert (negate) the image.

    :param image: The image to invert.
    :return: An image.
    
FLIP_LEFT_RIGHT

    Flip image horizontally (left to right).

    :param image: The image to mirror.
    :return: An image.
    
8
mask

    Reduce the number of bits for each color channel.

    :param image: The image to posterize.
    :param bits: The number of bits to keep for each channel (1-8).
    :return: An image.
    

    Invert all pixel values above a threshold.

    :param image: The image to solarize.
    :param threshold: All pixels above this greyscale level are inverted.
    :return: An image.
    
getexif
get
ExifTags
Base
Orientation
3
ROTATE_180
4
5
TRANSPOSE
6
ROTATE_270
7
TRANSVERSE
ROTATE_90
im
pyaccess
_size
transposed_image
exif
info
tobytes
Raw profile type exif
hex
XML:com.adobe.xmp
('tiff:Orientation="([0-9])"', '<tiff:Orientation>([0-9])</tiff:Orientation>')
re
sub
exif_image

    If an image has an EXIF Orientation tag, other than 1, transpose the image
    accordingly, and remove the orientation data.

    :param image: The image to transpose.
    :param in_place: Boolean. Keyword-only argument.
        If ``True``, the original image is modified in-place, and ``None`` is returned.
        If ``False`` (default), a new :py:class:`~PIL.Image.Image` object is returned
        with the transposition applied. If there is no transposition, a copy of the
        image will be returned.
    
__doc__
__file__
__spec__
origin
has_location
__cached__
('ExifTags', 'Image', 'ImagePalette')
(0, None, None, False)
autocontrast
(None, 0, 255, 127)
colorize
Resampling
BICUBIC
(0.5, 0.5)
pad
(0,)
BILINEAR
deform
(None,)
equalize
(0, 0)
expand
fit
flip
grayscale
invert
mirror
posterize
(128,)
solarize
{'in_place': False}
exif_transpose
PIL\ImageOps.py
<module PIL.ImageOps>
('border', 'left', 'top', 'right', 'bottom')
('color', 'mode', 'ImageColor')
('image', 'lut', 'msg')
('image', 'cutoff', 'ignore', 'mask', 'preserve_tone', 'histogram', 'lut', 'layer', 'h', 'ix', 'n', 'cut', 'lo', 'hi', 'scale', 'offset')
('image', 'black', 'white', 'mid', 'blackpoint', 'whitepoint', 'midpoint', 'red', 'green', 'blue', 'i', 'range_map', 'range_map1', 'range_map2')
('image', 'size', 'method', 'im_ratio', 'dest_ratio', 'new_height', 'new_width')
('image', 'border', 'left', 'top', 'right', 'bottom')
('image', 'deformer', 'resample')
('image', 'mask', 'h', 'lut', 'b', 'histo', 'step', 'n', 'i')
('image', 'in_place', 'image_exif', 'orientation', 'method', 'transposed_image', 'exif_image', 'exif', 'pattern')
('image', 'border', 'fill', 'left', 'top', 'right', 'bottom', 'width', 'height', 'color', 'palette', 'out')
('image', 'size', 'method', 'bleed', 'centering', 'bleed_pixels', 'live_size', 'live_size_ratio', 'output_ratio', 'crop_width', 'crop_height', 'crop_left', 'crop_top', 'crop')
('image',)
('image', 'lut', 'i')
('image', 'size', 'method', 'color', 'centering', 'resized', 'out', 'x', 'y')
('image', 'bits', 'lut', 'mask', 'i')
('image', 'factor', 'resample', 'msg', 'size')
('image', 'threshold', 'lut', 'i')

------------------------------ [modulecode_PIL.ImagePalette] ------------------------------
mode
rawmode
bytearray(b'')
palette
dirty
_palette
_colors
0
self
mode_len
ImagePalette
[None, None, None]
tobytes

        Get palette contents in format suitable for the low-level
        ``im.putpalette`` primitive.

        .. warning:: This method is experimental.
        
palette contains raw palette data
array
B
Convert palette to bytes.

        .. warning:: This method is experimental.
        
RGB
3
255
cannot add non-opaque RGBA color to RGB palette
[None, 3, None]
RGBA
(255,)
colors
color
()
info
get
('background',)
('transparency',)
index
image
histogram
too many values to unpack (expected 2)
256
cannot allocate more than 256 colors
1
unknown color specifier: 

Given an rgb tuple, allocate palette entry.

        .. warning:: This method is experimental.
        
w
write
('# Palette\n',)
# Mode: 


(0, 256, 1)
fp
 
(' 0',)
('\n',)
close
Save palette to text file.

        .. warning:: This method is experimental.
        
lut
append
white
255.0
exp
0.5
random
('randint',)
randint
(0, 255)
ImageColor
getrgb
make_linear_lut
(0, 768, 1)
rb
__enter__
__exit__
GimpPaletteFile
GimpGradientFile
PaletteFile
seek
(0,)
getpalette
(None, None)
cannot load palette
(None, None, None)
__doc__
__file__
__spec__
origin
has_location
__cached__
('GimpGradientFile', 'GimpPaletteFile', 'ImageColor', 'PaletteFile')
PIL.ImagePalette
__module__

    Color palette for palette mapped images

    :param mode: The mode to use for the palette. See:
        :ref:`concept-modes`. Defaults to "RGB"
    :param palette: An optional palette. If given, it must be a bytearray,
        an array or a list of ints between 0-255. The list must consist of
        all channels for one color followed by the next color (e.g. RGBRGBRGB).
        Defaults to an empty palette.
    
__qualname__
('RGB', None)
__init__
ImagePalette.__init__
ImagePalette.palette
setter
ImagePalette.colors
copy
ImagePalette.copy
getdata
ImagePalette.getdata
ImagePalette.tobytes
tostring
(None,)
getcolor
ImagePalette.getcolor
save
ImagePalette.save
raw
make_gamma_lut
('RGB',)
negative
('#fff0c0',)
sepia
wedge
load
PIL\ImagePalette.py
<module PIL.ImagePalette>
('__class__',)
('self', 'mode', 'palette')
('self', 'colors')
('self', 'mode_len', 'i', 'color')
('self', 'new')
('self', 'color', 'image', 'msg', 'e', 'index', 'special_colors', 'i', 'count')
('self',)
('filename', 'fp', 'paletteHandler', 'lut', 'msg')
('exp', 'lut', 'i')
('black', 'white', 'lut', 'i')
('mode', 'palette')
('self', 'palette')
('mode', 'randint', 'palette', 'i')
('rawmode', 'data', 'palette')
('self', 'fp', 'msg', 'i', 'j')
('white', 'bands')
('self', 'msg', 'arr')

------------------------------ [modulecode_PIL.ImageSequence] ------------------------------
seek
im must have seek method
im
_min_frame
0
position
1
tell
ims
Iterator
copy
func

    Applies a given function to all frames in an image or a list of images.
    The frames are returned as a list of separate images.

    :param im: An image, or a list of images.
    :param func: The function to apply to all of the image frames.
    :returns: A list of images.
    
__doc__
__file__
__spec__
origin
has_location
__cached__
PIL.ImageSequence
__module__

    This class implements an iterator object that can be used to loop
    over an image sequence.

    You can use the ``[]`` operator to access elements by index. This operator
    will raise an :py:exc:`IndexError` if you try to access a nonexistent
    frame.

    :param im: An image object.
    
__qualname__
__init__
Iterator.__init__
__getitem__
Iterator.__getitem__
__iter__
Iterator.__iter__
__next__
Iterator.__next__
()
(None,)
all_frames
PIL\ImageSequence.py
<module PIL.ImageSequence>
('self', 'ix', 'e')
('self', 'im', 'msg')
('self',)
('self', 'e')
('im', 'func', 'ims', 'imSequence', 'current')


------------------------------ [modulecode_PIL.ImageShow] ------------------------------
Viewer
0
_viewers
append
viewer
insert

    The :py:func:`register` function is used to register additional viewers::

        from PIL import ImageShow
        ImageShow.register(MyViewer())  # MyViewer will be used as a last resort
        ImageShow.register(MySecondViewer(), 0)  # MySecondViewer will be prioritised
        ImageShow.register(ImageShow.XVViewer(), 0)  # XVViewer will be prioritised

    :param viewer: The viewer to be registered.
    :param order:
        Zero or a negative integer to prepend this viewer to the list,
        a positive integer to append it.
    
show
title

    Display a given image.

    :param image: An image object.
    :param title: Optional title. Not all viewers can display the title.
    :param \**options: Additional viewer options.
    :returns: ``True`` if a suitable viewer was found, ``False`` otherwise.
    
mode
('1', 'RGBA')
format
PNG
('I;16', 'LA')
Image
getmodebase
convert
self
show_image
image

        The main function for displaying an image.
        Converts the given image to the target format and displays it.
        
Return format name, or ``None`` to save as PGM/PPM.

        Returns the command used to display the file.
        Not implemented in the base class.
        
_dump
get_format
options
Save to temporary file and return filename.
show_file
save_image
Display the given image.
os
system
get_command
1

        Display given file.
        
start "Pillow" /WAIT "

" && ping -n 4 127.0.0.1 >NUL && del /f "
"
(open -a Preview.app 
quote
; sleep 20; rm -f 
)&
subprocess
call
open
-a
Preview.app
sys
executable
shutil
which
('python3',)
Popen
-c
import os, sys, time; time.sleep(20); os.remove(sys.argv[1])
get_command_ex
(
 
xdg-open
display
 -title 
-title
gm
eog
-n
xv
 -name 
-name
ipython_display
__doc__
__file__
__spec__
origin
has_location
__cached__
shlex
('quote',)
('Image',)
(1,)
register
(None,)
PIL.ImageShow
__module__
Base class for viewers.
__qualname__
Viewer.show
Viewer.get_format
Viewer.get_command
Viewer.save_image
Viewer.show_image
Viewer.show_file
()
__prepare__
WindowsViewer
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
The default viewer on Windows is the default system application for PNG files.
{'compress_level': 1, 'save_all': True}
WindowsViewer.get_command
__orig_bases__
MacViewer
The default viewer on macOS using ``Preview.app``.
MacViewer.get_command
MacViewer.show_file
UnixViewer
UnixViewer.get_command
XDGViewer

    The freedesktop.org ``xdg-open`` command.
    
('xdg-open', 'xdg-open')
XDGViewer.get_command_ex
XDGViewer.show_file
DisplayViewer

    The ImageMagick ``display`` command.
    This viewer supports the ``title`` parameter.
    
DisplayViewer.get_command_ex
DisplayViewer.show_file
GmDisplayViewer
The GraphicsMagick ``gm display`` command.
('gm display', 'gm')
GmDisplayViewer.get_command_ex
GmDisplayViewer.show_file
EogViewer
The GNOME Image Viewer ``eog`` command.
('eog -n', 'eog')
EogViewer.get_command_ex
EogViewer.show_file
XVViewer

    The X Viewer ``xv`` command.
    This viewer supports the ``title`` parameter.
    
XVViewer.get_command_ex
XVViewer.show_file
IPythonViewer
The viewer for IPython frontends.
IPythonViewer.show_image
PIL\ImageShow.py
<module PIL.ImageShow>
('__class__',)
('self', 'file', 'options')
('self', 'file', 'options', 'command')
('self', 'file', 'options', 'command', 'executable')
('self', 'file', 'options', 'executable', 'command')
('self', 'file', 'title', 'options', 'command', 'executable')
('self', 'image')
('viewer', 'order')
('image', 'title', 'options', 'viewer')
('self', 'image', 'options', 'base')
('self', 'path', 'options')
('self', 'path', 'options', 'args', 'title')
('self', 'path', 'options', 'executable')
('self', 'image', 'options')

------------------------------ [modulecode_PIL.ImageTk] ------------------------------
_pilbitmap_ok
Image
new
('1', (1, 1))
tkinter
BitmapImage
PIL:
im
id

('data',)
1
TclError
0
file
pop
('file',)
data
BytesIO
open
tk
call
('_imagingtk',)
_imagingtk
tkinit
interpaddr
command
_get_image_from_kw
mode
size
P
apply_transparency
load
palette
RGB
too many values to unpack (expected 2)
kw
width
height
['1', 'L', 'RGB', 'RGBA']
getmodebase
_PhotoImage__mode
_PhotoImage__size
PhotoImage
_PhotoImage__photo
image
paste
name
delete

        Get the Tkinter photo image identifier.  This method is automatically
        called by Tkinter whenever a PhotoImage object is passed to a Tkinter
        method.

        :return: A Tkinter photo image identifier (a string).
        

        Get the width of the image.

        :return: The width, in pixels.
        

        Get the height of the image.

        :return: The height, in pixels.
        
isblock
new_block
self
convert2
_pyimagingtkcall
PyImagingPhoto
block

        Paste a PIL image into the photo image.  Note that this can
        be very slow if the photo image is displayed.

        :param im: A PIL image. The size must match the target region.  If the
                   mode does not match, the image is converted to the mode of
                   the bitmap image.
        
_BitmapImage__mode
_BitmapImage__size
_pilbitmap_check
_BitmapImage__im
tobitmap
_BitmapImage__photo

        Get the Tkinter bitmap image identifier.  This method is automatically
        called by Tkinter whenever a BitmapImage object is passed to a Tkinter
        method.

        :return: A Tkinter bitmap image identifier (a string).
        
RGBA
PyImagingPhotoGet
Copies the contents of a PhotoImage to a PIL image memory.
Label
__prepare__
UI
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ImageTk
__module__
_show.<locals>.UI
__qualname__
__init__
_show.<locals>.UI.__init__
__orig_bases__
_default_root
tkinter not initialized
Toplevel
title
top
pack
Helper for the Image.show method.
1
white
('foreground', 'master')
('master',)
__class__
master
black
('image', 'bg', 'bd')
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image',)

    A Tkinter-compatible photo image.  This can be used
    everywhere Tkinter expects an image object.  If the image is an RGBA
    image, pixels having alpha 0 are treated as transparent.

    The constructor takes either a PIL image, or a mode and a size.
    Alternatively, you can use the ``file`` or ``data`` options to initialize
    the photo image object.

    :param image: Either a PIL image, or a mode string.  If a mode string is
                  used, a size must also be given.
    :param size: If the first argument is a mode string, this defines the size
                 of the image.
    :keyword file: A filename to load the image from (using
                   ``Image.open(file)``).
    :keyword data: An 8-bit string containing image data (as loaded from an
                   image file).
    
(None, None)
PhotoImage.__init__
__del__
PhotoImage.__del__
__str__
PhotoImage.__str__
PhotoImage.width
PhotoImage.height
PhotoImage.paste
()

    A Tkinter-compatible bitmap image.  This can be used everywhere Tkinter
    expects an image object.

    The given image must have mode "1".  Pixels having value 0 are treated as
    transparent.  Options, if any, are passed on to Tkinter.  The most commonly
    used option is ``foreground``, which is used to specify the color for the
    non-transparent parts.  See the Tkinter documentation for information on
    how to specify colours.

    :param image: A PIL image.
    
(None,)
BitmapImage.__init__
BitmapImage.__del__
BitmapImage.width
BitmapImage.height
BitmapImage.__str__
getimage
_show
PIL\ImageTk.py
<module PIL.ImageTk>
('__class__',)
('self', 'name')
('self', 'image', 'kw')
('self', 'image', 'size', 'kw', 'mode')
('self', 'master', 'im', '__class__')
('self',)
('kw', 'source')
('im',)
('command', 'photo', 'id', 'tk', '_imagingtk')
('image', 'title', 'UI', 'msg', 'top')
('photo', 'im', 'block')
('self', 'im', 'image', 'block')

------------------------------ [modulecode_PIL.ImageWin] ------------------------------
dc
wnd
mode
size
['1', 'L', 'P', 'RGB']
Image
getmodebase
core
display
image
paste
HWND
getdc
expose
releasedc

        Copy the bitmap contents to a device context.

        :param handle: Device context (HDC), cast to a Python integer, or an
                       HDC or HWND instance.  In PythonWin, you can use
                       ``CDC.GetHandleAttrib()`` to get a suitable handle.
        
(0, 0)
self
draw

        Same as expose, but allows you to specify where to draw the image, and
        what part of it to draw.

        The destination and source areas are given as 4-tuple rectangles. If
        the source is omitted, the entire image is copied. If the source and
        the destination have different sizes, the image is resized as
        necessary.
        
query_palette

        Installs the palette associated with the image in the given device
        context.

        This method should be called upon **QUERYNEWPALETTE** and
        **PALETTECHANGED** events from Windows. If this method returns a
        non-zero value, one or more display palette entries were changed, and
        the image should be redrawn.

        :param handle: Device context (HDC), cast to a Python integer, or an
                       HDC or HWND instance.
        :return: A true value if one or more entries were changed (this
                 indicates that the image should be redrawn).
        
load
convert
im

        Paste a PIL image into the bitmap image.

        :param im: A PIL image.  The size must match the target region.
                   If the mode does not match, the image is converted to the
                   mode of the bitmap image.
        :param box: A 4-tuple defining the left, upper, right, and
                    lower pixel coordinate.  See :ref:`coordinate-system`. If
                    None is given instead of a tuple, all of the image is
                    assumed.
        
frombytes

        Load display memory contents from byte data.

        :param buffer: A buffer containing display data (usually
                       data returned from :py:func:`~PIL.ImageWin.Dib.tobytes`)
        
tobytes

        Copy display memory contents to bytes object.

        :return: A bytes object containing display data.
        
createwindow
_Window__dispatcher
0
hwnd
ui_handle_
eventloop
Dib
too many values to unpack (expected 2)
__class__
__init__
('width', 'height')
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image',)
1
PIL.ImageWin
__module__

    Wraps an HDC integer. The resulting object can be passed to the
    :py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`
    methods.
    
HDC
__qualname__
HDC.__init__
__int__
HDC.__int__
()

    Wraps an HWND integer. The resulting object can be passed to the
    :py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`
    methods, instead of a DC.
    
HWND.__init__
HWND.__int__

    A Windows bitmap with the given mode and size.  The mode can be one of "1",
    "L", "P", or "RGB".

    If the display requires a palette, this constructor creates a suitable
    palette and associates it with the image. For an "L" image, 128 greylevels
    are allocated. For an "RGB" image, a 6x6x6 colour cube is used, together
    with 20 greylevels.

    To make sure that palettes work properly under Windows, you must call the
    ``palette`` method upon certain events from Windows.

    :param image: Either a PIL image, or a mode string. If a mode string is
                  used, a size must also be given.  The mode can be one of "1",
                  "L", "P", or "RGB".
    :param size: If the first argument is a mode string, this
                 defines the size of the image.
    
(None,)
Dib.__init__
Dib.expose
Dib.draw
Dib.query_palette
Dib.paste
Dib.frombytes
Dib.tobytes
Create a Window with the given title size.
Window
('PIL', None, None)
Window.__init__
__dispatcher
Window.__dispatcher
ui_handle_clear
Window.ui_handle_clear
ui_handle_damage
Window.ui_handle_damage
ui_handle_destroy
Window.ui_handle_destroy
ui_handle_repair
Window.ui_handle_repair
ui_handle_resize
Window.ui_handle_resize
mainloop
Window.mainloop
__prepare__
ImageWindow
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
Create an image window which displays the given image.
('PIL',)
ImageWindow.__init__
ImageWindow.ui_handle_repair
__orig_bases__
PIL\ImageWin.py
<module PIL.ImageWin>
('__class__',)
('self', 'action', 'args')
('self', 'dc')
('self', 'image', 'size', 'mode')
('self', 'image', 'title', 'width', 'height', '__class__')
('self', 'title', 'width', 'height')
('self', 'wnd')
('self',)
('self', 'handle', 'dst', 'src', 'dc', 'result')
('self', 'handle', 'dc', 'result')
('self', 'buffer')
('self', 'im', 'box')
('self', 'handle', 'result')
('self', 'dc', 'x0', 'y0', 'x1', 'y1')
('self', 'x0', 'y0', 'x1', 'y1')
('self', 'width', 'height')

------------------------------ [modulecode_PIL.ImtImagePlugin] ------------------------------
fp
read
(100,)
b'\n'
not an IM file
0
buffer
[None, 1, None]
[1, None, None]
self
(1,)
b'\x0c'
raw
(0, 0)
size
tell
mode
1
tile
split
(b'\n',)
pop
(0,)
42
field
match
group
(1, 2)
too many values to unpack (expected 2)
b'width'
ysize
_size
b'height'
xsize
b'pixel'
b'n8'
L
__doc__
__file__
__spec__
origin
has_location
__cached__
re

('Image', 'ImageFile')
Image
ImageFile
compile
(b'([a-z]*) ([^ \\r\\n]*)',)
__prepare__
ImtImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.ImtImagePlugin
__module__
__qualname__
IMT
format
IM Tools
format_description
_open
ImtImageFile._open
__orig_bases__
register_open
PIL\ImtImagePlugin.py
<module PIL.ImtImagePlugin>
('__class__',)
('self', 'buffer', 'msg', 'xsize', 'ysize', 's', 'lines', 'm', 'k', 'v')

------------------------------ [modulecode_PIL.IptcImagePlugin] ------------------------------
i32
PAD
[-4, None, None]
print
%02x
i8
{'end': ' '}
i
info
fp
read
(5,)
(None, 0)
1
2
0
28
9
invalid IPTC/NAA file
3
132
illegal field length in IPTC/NAA file
128
i16
self
tell
field
too many values to unpack (expected 2)
(8, 10)
append
(3, 60)
(3, 65)
L
mode
RGB
4
CMYK
getint
((3, 20),)
((3, 30),)
_size
COMPRESSION
((3, 120),)
Unknown IPTC image compression
iptc
size
tile
ImageFile
load
too many values to unpack (expected 3)
seek
tempfile
mkstemp
(False,)
('text',)
os
fdopen
raw
write
P5
%d %d
255

min
8192
o
close
Image
open
__enter__
__exit__
im
(None, None, None)
unlink

('JpegImagePlugin', 'TiffImagePlugin')
JpegImagePlugin
TiffImagePlugin
IptcImageFile
JpegImageFile
get
('photoshop',)
(1028,)
TiffImageFile
tag
tagdata
IPTC_NAA_CHUNK
(None, None)
PIL.IptcImagePlugin
__module__
getiptcinfo.<locals>.FakeImage
__qualname__
FakeImage
()
BytesIO
_open
(None, None)

    Get IPTC information from TIFF, JPEG, or IPTC file.

    :param im: An image containing IPTC data.
    :returns: A dictionary containing IPTC information, or None if
        no IPTC information block was found.
    
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
_binary
('i8',)
('i16be',)
i16be
('i32be',)
i32be
('o8',)
o8
{1: 'raw', 5: 'jpeg'}
(0,)
dump
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
IPTC
format
IPTC/NAA
format_description
IptcImageFile.getint
IptcImageFile.field
IptcImageFile._open
IptcImageFile.load
__orig_bases__
register_open
register_extension
.iim
getiptcinfo
PIL\IptcImagePlugin.py
<module PIL.IptcImagePlugin>
('__class__',)
('self', 'offset', 'tag', 'size', 'tagdata', 'layers', 'component', 'id', 'compression', 'e', 'msg')
('c', 'i')
('self', 's', 'tag', 'msg', 'size')
('self', 'key')
('im', 'io', 'JpegImagePlugin', 'TiffImagePlugin', 'data', 'photoshop', 'FakeImage')
('c',)
('self', 'type', 'tile', 'box', 'encoding', 'offset', 'o_fd', 'outfile', 'o', 'size', 's', '_im')

------------------------------ [modulecode_PIL.Jpeg2KImagePlugin] ------------------------------
fp
0
has_length
length
-1
remaining_in_box
tell
num_bytes
_can_read
Not enough data in header
read
Expected to read 

 bytes but only got 
.
struct
calcsize
_read_bytes
unpack
BoxReader
BytesIO
seek
os
SEEK_CUR
read_fields
('>I4s',)
too many values to unpack (expected 2)
1
('>Q',)
16
8
Invalid header length
lbox
hlen
(2,)
_binary
i16be
2
unpack_from
>HHIIIIIIIIH
too many values to unpack (expected 11)
>BBB
siz
36
3
too many values to unpack (expected 3)
ssiz
xrsiz
yrsiz
127
I;16
L
LA
RGB
4
RGBA
Parse the JPEG 2000 codestream to extract the size and component
    count from the SIZ marker segment, returning a PIL (size, mode) tuple.
254
10
10000
Convert JPEG2000's (numerator, denominator, exponent-base-10) resolution,
    calculated as (num / denom) * 10^exp and stored in dots per meter,
    to floating-point dots per inch.
reader
has_next_box
next_box_type
b'jp2h'
read_boxes
b'ftyp'
('>4s',)
b'jpx '
image/jpx
header
b'ihdr'
('>IIHB',)
too many values to unpack (expected 4)
b'res '
res
b'resc'
('>HHHHBB',)
too many values to unpack (expected 6)
_res_to_dpi
size
mode
Malformed JP2 header
mimetype
dpi
Parse the JP2 header box to extract size, component count,
    color space information, and optionally DPI information,
    returning a (size, mode, mimetype, dpi) tuple.
(4,)
b'\xffO\xffQ'
j2k
codec
_parse_codestream
_size
(8,)
b'\x00\x00\x00\x0cjP  \r\n\x87\n'
jp2
_parse_jp2_header
custom_mimetype
info
(12,)
endswith
(b'jp2c\xffO\xffQ',)
_parse_comment
not a JPEG 2000 file
unable to determine size/mode
_reduce
layers
fileno
fstat
st_size
io
SEEK_END
jpeg2k
(0, 0)
fd
tile
self
(144, 217)
100
[2, None, None]
comment
__class__
reduce
ImageFile
load
[None, 4, None]
[None, 12, None]
encoderinfo
('.j2k',)
get
('no_jp2', False)
('offset', None)
('tile_offset', None)
('tile_size', None)
('quality_mode', 'rates')
('quality_layers', None)
(<class 'list'>, <class 'tuple'>)
(<class 'int'>, <class 'float'>)
quality_layers must be a sequence of numbers
('num_resolutions', 0)
('codeblock_size', None)
('precinct_size', None)
('irreversible', False)
('progression', 'LRCP')
('cinema_mode', 'no')
('mct', 0)
('signed', False)
('comment',)
encode
('plt', False)
quality_layers
encoderconfig
_save
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile', '_binary')
Image
PIL.Jpeg2KImagePlugin
__module__

    A small helper class to read fields stored in JPEG2000 header boxes
    and to easily step into and read sub-boxes.
    
__qualname__
(-1,)
__init__
BoxReader.__init__
BoxReader._can_read
BoxReader._read_bytes
BoxReader.read_fields
BoxReader.read_boxes
BoxReader.has_next_box
BoxReader.next_box_type
()
__prepare__
Jpeg2KImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
JPEG2000
format
JPEG 2000 (ISO 15444)
format_description
_open
Jpeg2KImageFile._open
Jpeg2KImageFile._parse_comment
property
Jpeg2KImageFile.reduce
setter
Jpeg2KImageFile.load
__orig_bases__
_accept
register_open
register_save
register_extensions
['.jp2', '.j2k', '.jpc', '.jpf', '.jpx', '.j2c']
register_mime
image/jp2
PIL\Jpeg2KImagePlugin.py
<module PIL.Jpeg2KImagePlugin>
('__class__',)
('self', 'fp', 'length')
('prefix',)
('self', 'num_bytes')
('self', 'sig', 'header', 'dpi', 'msg', 'fd', 'length', 'pos')
('fp', 'hdr', 'lsiz', 'siz', 'rsiz', 'xsiz', 'ysiz', 'xosiz', 'yosiz', '_', 'csiz', 'ssiz', 'xrsiz', 'yrsiz', 'i', 'size', 'mode')
('self', 'hdr', 'length', 'marker', 'typ')
('fp', 'reader', 'header', 'mimetype', 'tbox', 'size', 'mode', 'bpc', 'nc', 'dpi', 'height', 'width', 'res', 'tres', 'vrcn', 'vrcd', 'hrcn', 'hrcd', 'vrce', 'hrce', 'hres', 'vres', 'msg')
('self', 'num_bytes', 'msg', 'data')
('num', 'denom', 'exp')
('im', 'fp', 'filename', 'info', 'kind', 'offset', 'tile_offset', 'tile_size', 'quality_mode', 'quality_layers', 'msg', 'num_resolutions', 'cblk_size', 'precinct_size', 'irreversible', 'progression', 'cinema_mode', 'mct', 'signed', 'comment', 'plt', 'fd')
('self',)
('self', 'power', 'adjust', 't', 't3')
('self', 'lbox', 'tbox', 'hlen', 'msg')
('self', 'size', 'data')
('self', 'field_format', 'size', 'data')
('self', '__class__')
('self', 'value')

------------------------------ [modulecode_PIL.JpegImagePlugin] ------------------------------
i16
fp
read
(2,)
2
ImageFile
_safe_read
APP%d
15
app
applist
append
65504
[None, 4, None]
b'JFIF'
5
info
jfif
256
jfif_version
7
8
10
jfif_unit
1
jfif_density
dpi
65505
[None, 5, None]
b'Exif\x00'
exif
tell
6
_exif_offset
65506
b'FPXR\x00'
flashpix
[None, 12, None]
b'ICC_PROFILE\x00'
icclist
65517
[None, 14, None]
b'Photoshop 3.0\x00'
14
setdefault
photoshop
s
offset
4
b'8BIM'
i32
1005
XResolution
0
65536
DisplayedUnitsX
YResolution
DisplayedUnitsY
12
struct
error
65518
b'Adobe'
adobe
11
adobe_transform
b'MPF\x00'
[4, None, None]
mp
mpoffset
getexif
296
282
math
isnan
3
2.54
(None, None, None, None, None)
(72, 72)
comment
COM
_size
bits
cannot handle 

-bit layers
layers
L
mode
RGB
CMYK
-layer images
[65474, 65478, 65482, 65486]
progressive
progression
sort
13
profile
[14, None, None]
b''
icc_profile
self
layer
16
64
bad quantization table marker
array
B
H
sys
byteorder
little
byteswap
zigzag_index
data
quantization
[None, 3, None]
b'\xff\xd8\xff'
(3,)
_accept
not a JPEG file
b'\xff'
huffman_dc
huffman_ac
255
(1,)
MARKER
too many values to unpack (expected 3)
i
65498
CMYK;I
jpeg
(0, 0)
size
tile
65535
65280
no marker found
LOAD_TRUNCATED_IMAGES
_ended
b'\xff\xd9'

        internal: read more image data
        For premature EOF and LOAD_TRUNCATED_IMAGES adds EOI marker
        so libjpeg can finish decoding
        
decoderconfig
too many values to unpack (expected 4)
YCbCr
min
(8, 4, 2, 1)
tempfile
mkstemp
too many values to unpack (expected 2)
os
close
filename
subprocess
check_call
djpeg
-outfile
unlink
Invalid Filename
Image
open
__enter__
__exit__
load
im
(None, None, None)
_getexif
_getmp
APP1
rsplit
(b'\x00', 1)
b'http://ns.adobe.com/xap/1.0/'
_getxmp

        Returns a dictionary containing the XMP tags.
        Requires defusedxml to be installed.

        :returns: XMP tags in a dictionary.
        
_get_merged_dict
BytesIO
(8,)
b'MM\x00*'
>
<
('TiffImagePlugin',)
TiffImagePlugin
ImageFileDirectory_v2
seek
next
malformed MP Index (unreadable directory)
45057
malformed MP Index (no number of images)
45058
unpack_from
LLLHH
rawmpentries
('Attribute', 'Size', 'DataOffset', 'EntryNo1', 'EntryNo2')
DependentParentImageFlag
Attribute
2147483648
DependentChildImageFlag
1073741824
RepresentativeImageFlag
536870912
Reserved
402653184
27
ImageDataFormat
117440512
24
MPType
16777215
JPEG
unsupported picture format in MPO
{0: 'Undefined', 65537: 'Large Thumbnail (VGA Equivalent)', 65538: 'Large Thumbnail (Full HD Equivalent)', 131073: 'Multi-Frame Image (Panorama)', 131074: 'Multi-Frame Image: (Disparity)', 131075: 'Multi-Frame Image: (Multi-Angle)', 196608: 'Baseline MP Primary Image'}
Unknown
mpentries
malformed MP Index (bad MP Entry)
(1, 4)
-1
[1, 3, None]
samplings
get
width
height
cannot write empty image as JPEG
RAWMODE
cannot write mode 
 as JPEG
encoderinfo
('dpi', (0, 0))
round
('quality', -1)
('subsampling', -1)
('qtables',)
keep
presets
('quantization',)
Invalid quality setting
4:4:4
4:2:2
4:2:0
4:1:1
format
Cannot use 'keep' when original image is not a JPEG
get_sampling
validate_qtables
_save.<locals>.validate_qtables
('extra', b'')
('icc_profile',)
markers
o16
ICC_OVERHEAD_LEN
extra
b'\xff\xe2'
o8
('comment',)
('progressive', False)
('progression', False)
('optimize', False)
('exif', b'')
Exif
tobytes
EXIF data is too long
('smooth', 0)
('streamtype', 0)
encoderconfig
95
max
MAXBLOCK
_save
splitlines
split
('#', 1)
Invalid quantization table
(<class 'tuple'>, <class 'list'>, <class 'dict'>)
None or too many quantization tables
qtables
_dump
cjpeg
JpegImageFile
MpoImagePlugin
('MpoImageFile',)
MpoImageFile
adopt
(None, None)
warnings
warn
('Image appears to be a malformed MPO file, it will be interpreted as a base JPEG file',)
__doc__
__file__
__spec__
origin
has_location
__cached__
io
('Image', 'ImageFile')
_binary
('i16be',)
i16be
('i32be',)
i32be
('o8',)
('o16be',)
o16be
JpegPresets
('presets',)
Skip
APP
SOF
DQT
65472
SOF0
Baseline DCT
65473
SOF1
Extended Sequential DCT
65474
SOF2
Progressive DCT
65475
SOF3
Spatial lossless
65476
DHT
Define Huffman table
65477
SOF5
Differential sequential DCT
65478
SOF6
Differential progressive DCT
65479
SOF7
Differential spatial
65480
('JPG', 'Extension', None)
65481
SOF9
Extended sequential DCT (AC)
65482
SOF10
Progressive DCT (AC)
65483
SOF11
Spatial lossless DCT (AC)
65484
DAC
Define arithmetic coding conditioning
65485
SOF13
Differential sequential DCT (AC)
65486
SOF14
Differential progressive DCT (AC)
65487
SOF15
Differential spatial (AC)
65488
('RST0', 'Restart 0', None)
65489
('RST1', 'Restart 1', None)
65490
('RST2', 'Restart 2', None)
65491
('RST3', 'Restart 3', None)
65492
('RST4', 'Restart 4', None)
65493
('RST5', 'Restart 5', None)
65494
('RST6', 'Restart 6', None)
65495
('RST7', 'Restart 7', None)
65496
('SOI', 'Start of image', None)
65497
('EOI', 'End of image', None)
SOS
Start of scan
65499
Define quantization table
65500
DNL
Define number of lines
65501
DRI
Define restart interval
65502
DHP
Define hierarchical progression
65503
EXP
Expand reference component
APP0
Application segment 0
Application segment 1
APP2
Application segment 2
65507
APP3
Application segment 3
65508
APP4
Application segment 4
65509
APP5
Application segment 5
65510
APP6
Application segment 6
65511
APP7
Application segment 7
65512
APP8
Application segment 8
65513
APP9
Application segment 9
65514
APP10
Application segment 10
65515
APP11
Application segment 11
65516
APP12
Application segment 12
APP13
Application segment 13
APP14
Application segment 14
65519
APP15
Application segment 15
65520
('JPG0', 'Extension 0', None)
65521
('JPG1', 'Extension 1', None)
65522
('JPG2', 'Extension 2', None)
65523
('JPG3', 'Extension 3', None)
65524
('JPG4', 'Extension 4', None)
65525
('JPG5', 'Extension 5', None)
65526
('JPG6', 'Extension 6', None)
65527
('JPG7', 'Extension 7', None)
65528
('JPG8', 'Extension 8', None)
65529
('JPG9', 'Extension 9', None)
65530
('JPG10', 'Extension 10', None)
65531
('JPG11', 'Extension 11', None)
65532
('JPG12', 'Extension 12', None)
65533
('JPG13', 'Extension 13', None)
65534
Comment
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.JpegImagePlugin
__module__
__qualname__
JPEG (ISO 10918)
format_description
_open
JpegImageFile._open
load_read
JpegImageFile.load_read
draft
JpegImageFile.draft
load_djpeg
JpegImageFile.load_djpeg
JpegImageFile._getexif
JpegImageFile._getmp
getxmp
JpegImageFile.getxmp
__orig_bases__
{'1': 'L', 'L': 'L', 'RGB': 'RGB', 'RGBX': 'RGB', 'CMYK': 'CMYK;I', 'YCbCr': 'YCbCr'}
(0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63)
{(1, 1, 1, 1, 1, 1): 0, (2, 1, 1, 1, 1, 1): 1, (2, 2, 1, 1, 1, 1): 2}
_save_cjpeg
(None, None)
jpeg_factory
register_open
register_save
register_extensions
['.jfif', '.jpe', '.jpg', '.jpeg']
register_mime
image/jpeg
PIL\JpegImagePlugin.py
<module PIL.JpegImagePlugin>
('self', 'marker', 'n', 's', 'app', 'version', 'jfif_unit', 'jfif_density', 'offset', 'photoshop', 'code', 'name_len', 'size', 'data', 'adobe_transform', 'exif', 'resolution_unit', 'x_resolution', 'dpi')
('self', 'marker', 'n', 's')
('self', 'marker', 'n', 's', 'v', 'precision', 'qt_length', 'msg', 'data')
('__class__',)
('self', 'marker', 'n', 's', 'msg', 'profile', 'p', 'icc_profile', 'i', 't')
('self', 'marker', 'n')
('prefix',)
('self',)
('self', 'data', 'file_contents', 'head', 'endianness', 'TiffImagePlugin', 'info', 'mp', 'e', 'msg', 'quant', 'mpentries', 'rawmpentries', 'entrynum', 'unpackedentry', 'labels', 'mpentry', 'mpentryattr', 'mptypemap')
('self', 's', 'msg', 'i', 'name', 'description', 'handler', 'rawmode')
('im', 'fp', 'filename', 'msg', 'rawmode', 'e', 'info', 'dpi', 'quality', 'subsampling', 'qtables', 'preset', 'validate_qtables', 'extra', 'MAX_BYTES_IN_MARKER', 'icc_profile', 'ICC_OVERHEAD_LEN', 'MAX_DATA_BYTES_IN_MARKER', 'markers', 'i', 'marker', 'size', 'comment', 'progressive', 'optimize', 'exif', 'bufsize')
('im', 'fp', 'filename', 'tempfile')
('self', 'mode', 'size', 'd', 'e', 'o', 'a', 'scale', 'original_size', 's', 'box')
('im', 'sampling')
('self', 'segment', 'content', 'marker', 'xmp_tags')
('fp', 'filename', 'im', 'mpheader', 'MpoImageFile')
('self', 'f', 'path', 'msg', '_im')
('self', 'read_bytes', 's')
('qtables', 'lines', 'e', 'msg', 'idx', 'table')

------------------------------ [modulecode_PIL.JpegPresets] ------------------------------
\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff
__doc__
__file__
__spec__
origin
has_location
__cached__
{'web_low': {'subsampling': 2, 'quantization': [[20, 16, 25, 39, 50, 46, 62, 68, 16, 18, 23, 38, 38, 53, 65, 68, 25, 23, 31, 38, 53, 65, 68, 68, 39, 38, 38, 53, 65, 68, 68, 68, 50, 38, 53, 65, 68, 68, 68, 68, 46, 53, 65, 68, 68, 68, 68, 68, 62, 65, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68], [21, 25, 32, 38, 54, 68, 68, 68, 25, 28, 24, 38, 54, 68, 68, 68, 32, 24, 32, 43, 66, 68, 68, 68, 38, 38, 43, 53, 68, 68, 68, 68, 54, 54, 66, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68]]}, 'web_medium': {'subsampling': 2, 'quantization': [[16, 11, 11, 16, 23, 27, 31, 30, 11, 12, 12, 15, 20, 23, 23, 30, 11, 12, 13, 16, 23, 26, 35, 47, 16, 15, 16, 23, 26, 37, 47, 64, 23, 20, 23, 26, 39, 51, 64, 64, 27, 23, 26, 37, 51, 64, 64, 64, 31, 23, 35, 47, 64, 64, 64, 64, 30, 30, 47, 64, 64, 64, 64, 64], [17, 15, 17, 21, 20, 26, 38, 48, 15, 19, 18, 17, 20, 26, 35, 43, 17, 18, 20, 22, 26, 30, 46, 53, 21, 17, 22, 28, 30, 39, 53, 64, 20, 20, 26, 30, 39, 48, 64, 64, 26, 26, 30, 39, 48, 63, 64, 64, 38, 35, 46, 53, 64, 64, 64, 64, 48, 43, 53, 64, 64, 64, 64, 64]]}, 'web_high': {'subsampling': 0, 'quantization': [[6, 4, 4, 6, 9, 11, 12, 16, 4, 5, 5, 6, 8, 10, 12, 12, 4, 5, 5, 6, 10, 12, 14, 19, 6, 6, 6, 11, 12, 15, 19, 28, 9, 8, 10, 12, 16, 20, 27, 31, 11, 10, 12, 15, 20, 27, 31, 31, 12, 12, 14, 19, 27, 31, 31, 31, 16, 12, 19, 28, 31, 31, 31, 31], [7, 7, 13, 24, 26, 31, 31, 31, 7, 12, 16, 21, 31, 31, 31, 31, 13, 16, 17, 31, 31, 31, 31, 31, 24, 21, 31, 31, 31, 31, 31, 31, 26, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]]}, 'web_very_high': {'subsampling': 0, 'quantization': [[2, 2, 2, 2, 3, 4, 5, 6, 2, 2, 2, 2, 3, 4, 5, 6, 2, 2, 2, 2, 4, 5, 7, 9, 2, 2, 2, 4, 5, 7, 9, 12, 3, 3, 4, 5, 8, 10, 12, 12, 4, 4, 5, 7, 10, 12, 12, 12, 5, 5, 7, 9, 12, 12, 12, 12, 6, 6, 9, 12, 12, 12, 12, 12], [3, 3, 5, 9, 13, 15, 15, 15, 3, 4, 6, 11, 14, 12, 12, 12, 5, 6, 9, 14, 12, 12, 12, 12, 9, 11, 14, 12, 12, 12, 12, 12, 13, 14, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12]]}, 'web_maximum': {'subsampling': 0, 'quantization': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 3, 1, 1, 1, 1, 2, 2, 3, 3, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, 'low': {'subsampling': 2, 'quantization': [[18, 14, 14, 21, 30, 35, 34, 17, 14, 16, 16, 19, 26, 23, 12, 12, 14, 16, 17, 21, 23, 12, 12, 12, 21, 19, 21, 23, 12, 12, 12, 12, 30, 26, 23, 12, 12, 12, 12, 12, 35, 23, 12, 12, 12, 12, 12, 12, 34, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12], [20, 19, 22, 27, 20, 20, 17, 17, 19, 25, 23, 14, 14, 12, 12, 12, 22, 23, 14, 14, 12, 12, 12, 12, 27, 14, 14, 12, 12, 12, 12, 12, 20, 14, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12]]}, 'medium': {'subsampling': 2, 'quantization': [[12, 8, 8, 12, 17, 21, 24, 17, 8, 9, 9, 11, 15, 19, 12, 12, 8, 9, 10, 12, 19, 12, 12, 12, 12, 11, 12, 21, 12, 12, 12, 12, 17, 15, 19, 12, 12, 12, 12, 12, 21, 19, 12, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12], [13, 11, 13, 16, 20, 20, 17, 17, 11, 14, 14, 14, 14, 12, 12, 12, 13, 14, 14, 14, 12, 12, 12, 12, 16, 14, 14, 12, 12, 12, 12, 12, 20, 14, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12]]}, 'high': {'subsampling': 0, 'quantization': [[6, 4, 4, 6, 9, 11, 12, 16, 4, 5, 5, 6, 8, 10, 12, 12, 4, 5, 5, 6, 10, 12, 12, 12, 6, 6, 6, 11, 12, 12, 12, 12, 9, 8, 10, 12, 12, 12, 12, 12, 11, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 12, 12, 12, 12, 12, 12, 12], [7, 7, 13, 24, 20, 20, 17, 17, 7, 12, 16, 14, 14, 12, 12, 12, 13, 16, 14, 14, 12, 12, 12, 12, 24, 14, 14, 12, 12, 12, 12, 12, 20, 14, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12]]}, 'maximum': {'subsampling': 0, 'quantization': [[2, 2, 2, 2, 3, 4, 5, 6, 2, 2, 2, 2, 3, 4, 5, 6, 2, 2, 2, 2, 4, 5, 7, 9, 2, 2, 2, 4, 5, 7, 9, 12, 3, 3, 4, 5, 8, 10, 12, 12, 4, 4, 5, 7, 10, 12, 12, 12, 5, 5, 7, 9, 12, 12, 12, 12, 6, 6, 9, 12, 12, 12, 12, 12], [3, 3, 5, 9, 13, 15, 15, 15, 3, 4, 6, 10, 14, 12, 12, 12, 5, 6, 9, 14, 12, 12, 12, 12, 9, 10, 14, 12, 12, 12, 12, 12, 13, 14, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12]]}}
presets
PIL\JpegPresets.py
<module PIL.JpegPresets>


------------------------------ [modulecode_PIL.McIdasImagePlugin] ------------------------------
[None, 8, None]
b'\x00\x00\x00\x00\x00\x00\x00\x04'
fp
read
(256,)
_accept
not an McIdas area file
area_descriptor_raw
0
struct
unpack
!64i
area_descriptor
11
1
L
2
I
I;16B
4
I;32B
unsupported McIdas format
mode
10
9
_size
34
15
14
raw
(0, 0)
size
tile
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
Image
ImageFile
__prepare__
McIdasImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.McIdasImagePlugin
__module__
__qualname__
MCIDAS
format
McIdas area file
format_description
_open
McIdasImageFile._open
__orig_bases__
register_open
PIL\McIdasImagePlugin.py
<module PIL.McIdasImagePlugin>
('__class__',)
('s',)
('self', 's', 'msg', 'w', 'mode', 'rawmode', 'offset', 'stride')

------------------------------ [modulecode_PIL.MicImagePlugin] ------------------------------
[None, 8, None]
olefile
MAGIC
OleFileIO
fp
ole
not an MIC file; invalid OLE file
images
listdir
[1, None, None]
0
[-4, None, None]
.ACI
1
Image
self
append
not an MIC file; no image entries
frame
_n_frames
is_animated
seek
(0,)
_seek_check
no such frame
openstream
TiffImagePlugin
TiffImageFile
_open
close
__class__
__exit__
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'TiffImagePlugin')
_accept
__prepare__
MicImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.MicImagePlugin
__module__
__qualname__
MIC
format
Microsoft Image Composer
format_description
_close_exclusive_fp_after_loading
MicImageFile._open
MicImageFile.seek
tell
MicImageFile.tell
MicImageFile.close
MicImageFile.__exit__
__orig_bases__
register_open
register_extension
.mic
PIL\MicImagePlugin.py
<module PIL.MicImagePlugin>
('__class__',)
('self', 'args', '__class__')
('prefix',)
('self', 'e', 'msg', 'path')
('self', '__class__')
('self', 'frame', 'filename', 'e', 'msg')
('self',)

------------------------------ [modulecode_PIL.MpegImagePlugin] ------------------------------
fp
0
bits
bitbuffer
i8
read
(1,)
self
next
8
1
peek
BitStream
(32,)
435
not an MPEG file
RGB
mode
(12,)
_size
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
Image
ImageFile
_binary
('i8',)
PIL.MpegImagePlugin
__module__
__qualname__
__init__
BitStream.__init__
BitStream.next
BitStream.peek
skip
BitStream.skip
BitStream.read
()
__prepare__
MpegImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
MPEG
format
format_description
_open
MpegImageFile._open
__orig_bases__
register_open
register_extensions
.mpg
.mpeg
register_mime
video/mpeg
PIL\MpegImagePlugin.py
<module PIL.MpegImagePlugin>
('__class__',)
('self', 'fp')
('self', 's', 'msg')
('self',)
('self', 'bits', 'c')
('self', 'bits', 'v')
('self', 'bits')

------------------------------ [modulecode_PIL.MpoImagePlugin] ------------------------------
JpegImagePlugin
_save
encoderinfo
get
append_images
is_animated
28
itertools
chain
ImageSequence
Iterator
offsets
b'\xff\xe2'
struct
pack
('>H', 88)
b'MPF\x00'
b'                                                                                  '
extra
('exif',)
Image
Exif
tobytes
exif
mpf_offset
fp
filename
append
tell
save
JPEG
-1
TiffImagePlugin
ImageFileDirectory_v2
b'0100'
45056
45057
b''
0
too many values to unpack (expected 2)
196608
mpentries
<LLLHH
data_offset
45058
seek
write
b'II*\x00'
o32le
(8,)
os
SEEK_END
(0,)
JpegImageFile
_open
_after_jpeg_open
size
_initial_size
_getmp
mpinfo
n_frames
DataOffset
self
info
mpoffset
_MpoImageFile__mpoffsets
1
_fp
_MpoImageFile__frame
offset
readonly
_seek_check
2
read
(2,)
No data found for frame
_size
i16
65505
ImageFile
_safe_read
_reload_exif
Attribute
MPType
startswith
('Large Thumbnail',)
getexif
get_ifd
ExifTags
IFD
40962
40963
jpeg
(0, 0)
mode

tile
MpoImageFile

        Transform the instance of JpegImageFile into
        an instance of MpoImageFile.
        After the call, the JpegImageFile is extended
        to be an MpoImageFile.

        This is essentially useful when opening a JPEG
        file that reveals itself as an MPO, to avoid
        double call to _open.
        
__doc__
__file__
__spec__
origin
has_location
__cached__
('ExifTags', 'Image', 'ImageFile', 'ImageSequence', 'JpegImagePlugin', 'TiffImagePlugin')
_binary
('i16be',)
i16be
('o32le',)
_save_all
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.MpoImagePlugin
__module__
__qualname__
MPO
format
MPO (CIPA DC-007)
format_description
_close_exclusive_fp_after_loading
MpoImageFile._open
(None,)
MpoImageFile._after_jpeg_open
load_seek
MpoImageFile.load_seek
MpoImageFile.seek
MpoImageFile.tell
staticmethod
adopt
MpoImageFile.adopt
__orig_bases__
register_save
register_save_all
register_extension
.mpo
register_mime
image/mpo
PIL\MpoImagePlugin.py
<module PIL.MpoImagePlugin>
('__class__',)
('self', 'mpheader')
('self',)
('im', 'fp', 'filename')
('im', 'fp', 'filename', 'append_images', 'animated', 'mpf_offset', 'offsets', 'imSequence', 'im_frame', 'exif', 'ifd', 'mpentries', 'data_offset', 'i', 'size', 'mptype')
('jpeg_instance', 'mpheader')
('self', 'pos')
('self', 'frame', 'segment', 'msg', 'n', 'mptype', 'exif')

------------------------------ [modulecode_PIL.MspImagePlugin] ------------------------------
[None, 4, None]
b'DanM'
b'LinS'
fp
read
(32,)
_accept
not an MSP file
0
(0, 32, 2)
checksum
i16
s
bad MSP checksum
1
mode
4
6
_size
raw
(0, 0)
size
32
('1', 0, 1)
tile
MSP
BytesIO
(255,)
state
xsize
7
8
fd
seek
struct
unpack_from
<
ysize

H
2
error
Truncated MSP file in row map
too many values to unpack (expected 2)
img
write
blank_line
self
Truncated MSP file, expected 
 bytes on row 
idx
row
1
Bc
Corrupted MSP file in row 
set_as_raw
getvalue
(-1, 0)
cannot write mode 
 as MSP
(b'Da',)
(b'nM',)
3
(1, 1)
5
9
12
o16
ImageFile
_save
__doc__
__file__
__spec__
origin
has_location
__cached__
io
('Image', 'ImageFile')
Image
_binary
('i16le',)
i16le
('o16le',)
o16le
__prepare__
MspImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.MspImagePlugin
__module__
__qualname__
format
Windows Paint
format_description
_open
MspImageFile._open
__orig_bases__
PyDecoder
MspDecoder
_pulls_fd
decode
MspDecoder.decode
register_decoder
register_open
register_save
register_extension
.msp
PIL\MspImagePlugin.py
<module PIL.MspImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'checksum', 'i')
('im', 'fp', 'filename', 'msg', 'header', 'checksum', 'h')
('self', 'buffer', 'img', 'blank_line', 'rowmap', 'e', 'msg', 'x', 'rowlen', 'row', 'idx', 'runtype', 'runcount', 'runval')

------------------------------ [modulecode_PIL.PaletteFile] ------------------------------
(0, 256, 1)
palette
fp
readline
[None, 1, None]
b'#'
bad palette file
split
too many values to unpack (expected 4)
too many values to unpack (expected 2)
0
255
o8
r
self
b''
rawmode
__doc__
__file__
__spec__
origin
has_location
__cached__
_binary
('o8',)
1
PIL.PaletteFile
__module__
File handler for Teragon-style palette files.
PaletteFile
__qualname__
RGB
__init__
PaletteFile.__init__
getpalette
PaletteFile.getpalette
()
PIL\PaletteFile.py
<module PIL.PaletteFile>
('self', 'fp', 's', 'msg', 'v', 'i', 'r', 'g', 'b')
('self',)


------------------------------ [modulecode_PIL.PalmImagePlugin] ------------------------------
Image
new
L
1
_Palm8BitColormapValues
putdata
()
palettedata
(0, 0, 0)
putpalette
mode
P
8
encoderinfo
get
('bpp',)
(1, 2, 4)
bpp
point
<lambda>
_save.<locals>.<lambda>
info
cannot write mode 

 as Palm
P;
1
1;I
0
im
load
size
16
2
_COMPRESSION_TYPES
none
custom-colormap
_FLAGS
1026
palette
getdata
getpalette
offset
3
4
write
o16b
o8
(0,)
(256,)
(0, 256, 1)
fp
colormapmode
RGB
colormap
RGBA
ImageFile
_save
raw
(0, 0)
flush
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
_binary
('o8',)
('o16be',)
o16be
((255, 255, 255), (255, 204, 255), (255, 153, 255), (255, 102, 255), (255, 51, 255), (255, 0, 255), (255, 255, 204), (255, 204, 204), (255, 153, 204), (255, 102, 204), (255, 51, 204), (255, 0, 204), (255, 255, 153), (255, 204, 153), (255, 153, 153), (255, 102, 153), (255, 51, 153), (255, 0, 153), (204, 255, 255), (204, 204, 255), (204, 153, 255), (204, 102, 255), (204, 51, 255), (204, 0, 255), (204, 255, 204), (204, 204, 204), (204, 153, 204), (204, 102, 204), (204, 51, 204), (204, 0, 204), (204, 255, 153), (204, 204, 153), (204, 153, 153), (204, 102, 153), (204, 51, 153), (204, 0, 153), (153, 255, 255), (153, 204, 255), (153, 153, 255), (153, 102, 255), (153, 51, 255), (153, 0, 255), (153, 255, 204), (153, 204, 204), (153, 153, 204), (153, 102, 204), (153, 51, 204), (153, 0, 204), (153, 255, 153), (153, 204, 153), (153, 153, 153), (153, 102, 153), (153, 51, 153), (153, 0, 153), (102, 255, 255), (102, 204, 255), (102, 153, 255), (102, 102, 255), (102, 51, 255), (102, 0, 255), (102, 255, 204), (102, 204, 204), (102, 153, 204), (102, 102, 204), (102, 51, 204), (102, 0, 204), (102, 255, 153), (102, 204, 153), (102, 153, 153), (102, 102, 153), (102, 51, 153), (102, 0, 153), (51, 255, 255), (51, 204, 255), (51, 153, 255), (51, 102, 255), (51, 51, 255), (51, 0, 255), (51, 255, 204), (51, 204, 204), (51, 153, 204), (51, 102, 204), (51, 51, 204), (51, 0, 204), (51, 255, 153), (51, 204, 153), (51, 153, 153), (51, 102, 153), (51, 51, 153), (51, 0, 153), (0, 255, 255), (0, 204, 255), (0, 153, 255), (0, 102, 255), (0, 51, 255), (0, 0, 255), (0, 255, 204), (0, 204, 204), (0, 153, 204), (0, 102, 204), (0, 51, 204), (0, 0, 204), (0, 255, 153), (0, 204, 153), (0, 153, 153), (0, 102, 153), (0, 51, 153), (0, 0, 153), (255, 255, 102), (255, 204, 102), (255, 153, 102), (255, 102, 102), (255, 51, 102), (255, 0, 102), (255, 255, 51), (255, 204, 51), (255, 153, 51), (255, 102, 51), (255, 51, 51), (255, 0, 51), (255, 255, 0), (255, 204, 0), (255, 153, 0), (255, 102, 0), (255, 51, 0), (255, 0, 0), (204, 255, 102), (204, 204, 102), (204, 153, 102), (204, 102, 102), (204, 51, 102), (204, 0, 102), (204, 255, 51), (204, 204, 51), (204, 153, 51), (204, 102, 51), (204, 51, 51), (204, 0, 51), (204, 255, 0), (204, 204, 0), (204, 153, 0), (204, 102, 0), (204, 51, 0), (204, 0, 0), (153, 255, 102), (153, 204, 102), (153, 153, 102), (153, 102, 102), (153, 51, 102), (153, 0, 102), (153, 255, 51), (153, 204, 51), (153, 153, 51), (153, 102, 51), (153, 51, 51), (153, 0, 51), (153, 255, 0), (153, 204, 0), (153, 153, 0), (153, 102, 0), (153, 51, 0), (153, 0, 0), (102, 255, 102), (102, 204, 102), (102, 153, 102), (102, 102, 102), (102, 51, 102), (102, 0, 102), (102, 255, 51), (102, 204, 51), (102, 153, 51), (102, 102, 51), (102, 51, 51), (102, 0, 51), (102, 255, 0), (102, 204, 0), (102, 153, 0), (102, 102, 0), (102, 51, 0), (102, 0, 0), (51, 255, 102), (51, 204, 102), (51, 153, 102), (51, 102, 102), (51, 51, 102), (51, 0, 102), (51, 255, 51), (51, 204, 51), (51, 153, 51), (51, 102, 51), (51, 51, 51), (51, 0, 51), (51, 255, 0), (51, 204, 0), (51, 153, 0), (51, 102, 0), (51, 51, 0), (51, 0, 0), (0, 255, 102), (0, 204, 102), (0, 153, 102), (0, 102, 102), (0, 51, 102), (0, 0, 102), (0, 255, 51), (0, 204, 51), (0, 153, 51), (0, 102, 51), (0, 51, 51), (0, 0, 51), (0, 255, 0), (0, 204, 0), (0, 153, 0), (0, 102, 0), (0, 51, 0), (17, 17, 17), (34, 34, 34), (68, 68, 68), (85, 85, 85), (119, 119, 119), (136, 136, 136), (170, 170, 170), (187, 187, 187), (221, 221, 221), (238, 238, 238), (192, 192, 192), (128, 0, 0), (128, 0, 128), (0, 128, 0), (0, 128, 128), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0))
build_prototype_image
Palm8BitColormapImage
{'custom-colormap': 16384, 'is-compressed': 32768, 'has-transparent': 8192}
{'none': 255, 'rle': 1, 'scanline': 0}
register_save
Palm
register_extension
('Palm', '.palm')
register_mime
('Palm', 'image/palm')
PIL\PalmImagePlugin.py
('x', 'maxval')
('x', 'shift', 'maxval')
<module PIL.PalmImagePlugin>
('im', 'fp', 'filename', 'rawmode', 'bpp', 'version', 'msg', 'cols', 'rows', 'rowbytes', 'transparent_index', 'compression_type', 'flags', 'colormapsize', 'colormapmode', 'colormap', 'offset', 'i')
('image', 'palettedata', 'colormapValue')

------------------------------ [modulecode_PIL.PcdImagePlugin] ------------------------------
fp
seek
(2048,)
read
[None, 4, None]
b'PCD_'
not a PCD file
1538
3
tile_post_rotate
1
90
-90
RGB
mode
(768, 512)
_size
pcd
(0, 0)
size
196608
tile
im
rotate
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
Image
0
ImageFile
__prepare__
PcdImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PcdImagePlugin
__module__
__qualname__
PCD
format
Kodak PhotoCD
format_description
_open
PcdImageFile._open
load_end
PcdImageFile.load_end
__orig_bases__
register_open
register_extension
.pcd
PIL\PcdImagePlugin.py
<module PIL.PcdImagePlugin>
('__class__',)
('self', 's', 'msg', 'orientation')
('self',)

------------------------------ [modulecode_PIL.PcxImagePlugin] ------------------------------
0
10
1
[0, 2, 3, 5]
fp
read
(128,)
_accept
not a PCX file
i16
4
6
8
2
3
bad PCX image size
logger
debug
('BBox: %s %s %s %s',)
65
66
PCX version %s, bits %s, planes %s, stride %s
12
14
info
dpi
1
(2, 4)
P
P;%dL
ImagePalette
raw
RGB
[16, 64, None]
palette
5
L
seek
-769
io
SEEK_END
(769,)
(0, 256, 1)
o8
[1, None, None]
RGB;L
unknown PCX mode
mode
_size
7
(0, 0)
size
('size: %sx%s',)
pcx
tell
tile
SAVE
too many values to unpack (expected 4)
Cannot save 

 images as PCX
PcxImagePlugin._save: xwidth: %d, bits: %d, stride: %d
write
(10,)
(1,)
o16
(0,)
(100,)
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
b'\x00'
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
128
ImageFile
_save
(12,)
im
getpalette
('RGB', 'RGB')
__doc__
__file__
__spec__
origin
has_location
__cached__
logging
('Image', 'ImageFile', 'ImagePalette')
Image
_binary
('i16le',)
i16le
('o8',)
('o16le',)
o16le
getLogger
('PIL.PcxImagePlugin',)
__prepare__
PcxImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PcxImagePlugin
__module__
__qualname__
PCX
format
Paintbrush
format_description
_open
PcxImageFile._open
__orig_bases__
{'1': (2, 1, 1, '1'), 'L': (5, 8, 1, 'L'), 'P': (5, 8, 1, 'P'), 'RGB': (5, 8, 3, 'RGB;L')}
register_open
register_save
register_extension
.pcx
register_mime
image/x-pcx
PIL\PcxImagePlugin.py
<module PIL.PcxImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'bbox', 'version', 'bits', 'planes', 'provided_stride', 'mode', 'rawmode', 'i', 'stride')
('im', 'fp', 'filename', 'version', 'bits', 'planes', 'rawmode', 'e', 'msg', 'stride', 'screen', 'dpi', 'palette', 'i')

------------------------------ [modulecode_PIL.PdfImagePlugin] ------------------------------
_save
{'save_all': True}
encoderinfo
get
('append', False)
PdfParser
r+b
('f', 'filename', 'mode')
w+b
('dpi',)
0
1
('resolution', 72.0)
title
splitext
filename
author
subject
keywords
creator
producer
creationDate
time
gmtime
modDate
too many values to unpack (expected 2)
im
existing_pdf
info
upper
[1, None, None]
load
start_writing
write_header
write_comment
created by Pillow 
__version__

 PDF driver
append_images
copy
ims
append
n_frames
number_of_pages
image_refs
next_object_id
(0,)
page_refs
contents_refs
pages
-1
write_catalog
ImageSequence
Iterator
8
size
mode
1
features
check
('libtiff',)
CCITTFaxDecode
PdfArray
PdfDict
K
BlackIs1
Columns
Rows
DCTDecode
PdfName
('DeviceGray',)
ImageB
L
P
ASCIIHexDecode
getpalette
('Indexed',)
('DeviceRGB',)
255
PdfBinary
ImageI
RGB
ImageC
RGBA
JPXDecode
CMYK
('DeviceCMYK',)
[1, 0, 1, 0, 1, 0, 1, 0]
cannot save mode 
io
BytesIO
ImageFile
hex
(0, 0)
save
TIFF
group4
math
ceil
width
height
('compression', 'strip_size')
Image
SAVE
JPEG
JPEG2000
FlateDecode
zip
RunLengthDecode
packbits
unsupported PDF filter (
)
op
getvalue
[8, None, None]
write_obj
page_number
('XObject',)
('Image',)
('stream', 'Type', 'Subtype', 'Width', 'Height', 'Filter', 'BitsPerComponent', 'Decode', 'DecodeParms', 'ColorSpace')
write_page
('PDF',)
('image',)
('ProcSet', 'XObject')
72.0
x_resolution
y_resolution
('Resources', 'MediaBox', 'Contents')
b'q %f 0 0 %f 0 0 cm /image Do Q\n'
('stream',)
write_xref_and_trailer
fp
flush
close
__doc__
__file__
__spec__
origin
has_location
__cached__
os
('Image', 'ImageFile', 'ImageSequence', 'PdfParser', '__version__', 'features')
_save_all
(False,)
register_save
PDF
register_save_all
register_extension
('PDF', '.pdf')
register_mime
('PDF', 'application/pdf')
PIL\PdfImagePlugin.py
<module PIL.PdfImagePlugin>
('im', 'fp', 'filename', 'save_all', 'is_appending', 'existing_pdf', 'dpi', 'x_resolution', 'y_resolution', 'info', 'k', 'default', 'v', 'ims', 'append_images', 'append_im', 'number_of_pages', 'image_refs', 'page_refs', 'contents_refs', 'im_number_of_pages', 'i', 'page_number', 'im_sequence', 'im_pages', 'bits', 'params', 'decode', 'width', 'height', 'filter', 'colorspace', 'procset', 'palette', 'msg', 'op', 'stream', 'page_contents')
('im', 'fp', 'filename')

------------------------------ [modulecode_PIL.PdfParser] ------------------------------
codecs
BOM_UTF16_BE
encode
('utf_16_be',)
decode

PDFDocEncoding
get
<genexpr>
decode_text.<locals>.<genexpr>
PdfFormatError
%s %s R
__str__
('us-ascii',)
object_id
generation
%s %s obj
existing_entries
new_entries
{0: 65536}
deleted_entries
reading_finished
key
1
object ID 
 cannot be deleted because it doesn't exist
keys
sorted
tell
write
(b'xref\n',)
too many values to unpack (expected 2)
prev
f
b'%d %d\n'
contiguous_keys
0
self
b'%010d %05d n \n'
deleted_keys
pop
(0,)
check_format_condition
expected the next deleted object ID to be 
, instead found 
b'%010d %05d f \n'
PdfName
name
other
PdfName(
)
PdfParser
interpret_name
bytearray(b'/')
allowed_chars
result
append
extend
b'#%02X'
b'[ '
b' '
b' ]'
pdf_repr
PdfArray.__bytes__.<locals>.<genexpr>
data
collections
UserDict
__setattr__
decode_text
endswith
('Date',)
startswith
('D:',)
[2, None, None]
Z
value
14
[15, 17, None]
60
[18, 20, None]
%Y%m%d%H%M%S
time
strptime
+
-
offset
-1
gmtime
calendar
timegm
bytearray(b'<<')
items
out
(b'\n',)
(b' ',)
(b'\n>>',)
b'<%s>'
b''
b'%02X'
PdfBinary.__bytes__.<locals>.<genexpr>
dictionary
buf
Filter
b'FlateDecode'
DL
Length
zlib
decompress
('bufsize',)
stream filter 
 unknown/unsupported
b'true'
b'false'
b'null'
PdfDict
PdfArray
PdfBinary
(<class 'int'>, <class 'float'>)
struct_time
b'(D:'
strftime
%Y%m%d%H%M%SZ
b')'
encode_text
replace
(b'\\', b'\\\\')
(b'(', b'\\(')
(b')', b'\\)')
b'('
specify buf or f or filename, but not both buf and f
filename
start_offset
should_close_buf
should_close_file
get_buf_from_file
cached_objects
read_pdf_info
file_size_total
file_size_this
root
root_ref
info
info_ref
page_tree_root
pages
orig_pages
pages_ref
last_xref_section_offset
trailer_dict
XrefTable
xref_table
seek_end
close
close_buf
seek
os
SEEK_END
(b'%PDF-1.4\n',)
% 


del_root
next_object_id
rewrite_pages
write_obj
(b'Catalog',)
('Type', 'Pages')
(b'Pages',)
('Type', 'Count', 'Kids')
pages_tree_nodes_to_delete
(b'Parent',)
stringified_page_info
name_as_str
Parent
write_page
(None,)
new_page_ref
pages_tree_node_ref
(b'Parent', None)
b'Root'
b'Size'
b'Prev'
b'Info'
b'trailer\n'
b'\nstartxref\n%d\n%%%%EOF'
Type
(b'Page',)
dict_obj
IndirectObjectDef
ref
stream
(b'stream\n',)
(b'\nendstream\n',)
(b'endobj\n',)
b'Pages'
getbuffer
getvalue
mmap
fileno
ACCESS_READ
('access',)
read_trailer
(b'Info', None)
read_indirect
b'Type'
/Type missing in Root
b'Catalog'
/Type in Root is not /Catalog
/Pages missing in Root
IndirectReference
/Pages in Root is not an indirect reference
linearize_page_tree
[None, None, None]
max
(1, 0)
reference
re_trailer_end
search
trailer end not found
m
start
16
last_match
group
(1,)
(2,)
interpret_trailer
read_xref_table
('xref_section_offset',)
read_prev_trailer
re_trailer_prev
16384
previous trailer not found
xref section offset in previous trailer doesn't match what was expected
cls
re_name
match
trailer_data
re_dict_end
end
name not found in trailer, remaining data: 
get_value
trailer
/Size not in trailer or not an integer
/Root not in trailer or not an indirect reference
re_hashes_in_name
finditer
(3,)
fromhex
('utf-8',)
(None, None)
re_comment
re_indirect_def_start
indirect object definition: object ID must be greater than 0
indirect object definition: generation must be non-negative
indirect object definition different than expected
('max_nesting',)
re_indirect_def_end
indirect object definition end not found
indirect object definition not found
re_indirect_reference
indirect object reference: object ID must be greater than 0
indirect object reference: generation must be non-negative
re_dict_start
max_nesting
re_stream_start
b'Length'
(None, None, None)
bad or missing Length in stream dict (%r)
(b'Length', None)
re_stream_end
stream end not found
PdfStream
re_array_start
re_array_end
re_null
re_true
re_false
re_int
re_real
re_string_hex
2
(48,)
re_string_lit
get_literal_string
unrecognized object: 
32
b'0123456789abcdefABCDEF'
PdfParser.get_value.<locals>.<genexpr>
bytearray(b'')
re_lit_str_token
escaped_chars
[1, None, None]
8
(5,)
(6,)
(b'(',)
nesting_depth
(7,)
(b')',)
('unfinished literal string',)
re_xref_section_start
xref section start not found
re_xref_subsection_start
subsection_found
xref subsection start not found
re_xref_entry
xref entry not found
b'f'
expected to find generation 
 for object ID 
 in xref table, instead found generation 
 at offset 
('expect_indirect', 'max_nesting')
/Type of page tree node is not /Pages
b'Kids'
b'Page'
('node',)
__doc__
__file__
__spec__
origin
has_location
__cached__
re
{22: '\\uffff', 24: '\\u02d8', 25: '\\u02c7', 26: '\\u02c6', 27: '\\u02d9', 28: '\\u02dd', 29: '\\u02db', 30: '\\u02da', 31: '\\u02dc', 128: '\\u2022', 129: '\\u2020', 130: '\\u2021', 131: '\\u2026', 132: '\\u2014', 133: '\\u2013', 134: '\\u0192', 135: '\\u2044', 136: '\\u2039', 137: '\\u203a', 138: '\\u2212', 139: '\\u2030', 140: '\\u201e', 141: '\\u201c', 142: '\\u201d', 143: '\\u2018', 144: '\\u2019', 145: '\\u201a', 146: '\\u2122', 147: '\\ufb01', 148: '\\ufb02', 149: '\\u0141', 150: '\\u0152', 151: '\\u0160', 152: '\\u0178', 153: '\\u017d', 154: '\\u0131', 155: '\\u0142', 156: '\\u0153', 157: '\\u0161', 158: '\\u017e', 160: '\\u20ac'}
(None,)
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PdfParser
__module__
An error that probably indicates a syntactic or semantic error in the
    PDF file structure
__qualname__
__orig_bases__
namedtuple
IndirectReferenceTuple
IndirectReference.__str__
__bytes__
IndirectReference.__bytes__
__eq__
IndirectReference.__eq__
__ne__
IndirectReference.__ne__
__hash__
IndirectReference.__hash__
IndirectObjectDef.__str__
__init__
XrefTable.__init__
__setitem__
XrefTable.__setitem__
XrefTable.__getitem__
__delitem__
XrefTable.__delitem__
__contains__
XrefTable.__contains__
__len__
XrefTable.__len__
XrefTable.keys
XrefTable.write
()
PdfName.__init__
PdfName.name_as_str
PdfName.__eq__
PdfName.__hash__
__repr__
PdfName.__repr__
from_pdf_stream
PdfName.from_pdf_stream
{33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}
#%/()<>[]{}
PdfName.__bytes__
(<class 'list'>,)
PdfArray.__bytes__
PdfDict.__setattr__
__getattr__
PdfDict.__getattr__
PdfDict.__bytes__
PdfBinary.__init__
PdfBinary.__bytes__
PdfStream.__init__
PdfStream.decode
Based on
    https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf
    Supports PDF up to 1.4
    
(None, None, None, 0, 'rb')
PdfParser.__init__
__enter__
PdfParser.__enter__
__exit__
PdfParser.__exit__
start_writing
PdfParser.start_writing
PdfParser.close_buf
PdfParser.close
PdfParser.seek_end
write_header
PdfParser.write_header
write_comment
PdfParser.write_comment
write_catalog
PdfParser.write_catalog
PdfParser.rewrite_pages
write_xref_and_trailer
PdfParser.write_xref_and_trailer
PdfParser.write_page
PdfParser.write_obj
PdfParser.del_root
PdfParser.get_buf_from_file
PdfParser.read_pdf_info
PdfParser.next_object_id
b'[][()<>{}/%]'
delimiter
b'[][()<>{}/%\\000\\011\\012\\014\\015\\040]'
delimiter_or_ws
b'[\\000\\011\\012\\014\\015\\040]'
whitespace
b'[\\000\\011\\012\\014\\015\\0400-9a-fA-F]'
whitespace_or_hex
b'*'
whitespace_optional
b'+'
whitespace_mandatory
b'[\\000\\011\\014\\040]*'
whitespace_optional_no_nl
b'[\\r\\n]+'
newline_only
newline
compile
b'trailer'
b'<<(.*>>)'
b'startxref'
b'([0-9]+)'
b'%%EOF'
b'$'
DOTALL
b'<<(.*?>>)'
PdfParser.read_trailer
PdfParser.read_prev_trailer
re_whitespace_optional
b"/([!-$&'*-.0-;=?-Z\\\\^-z|~]+)(?="
b'<<'
b'>>'
PdfParser.interpret_trailer
(b'([^#]*)(#([0-9a-fA-F]{2}))?',)
(False,)
PdfParser.interpret_name
b'null(?='
b'true(?='
b'false(?='
b'([-+]?[0-9]+)(?='
b'([-+]?([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+))(?='
b'\\['
b']'
b'<('
b'*)>'
b'\\('
b'([-+]?[0-9]+)'
b'R(?='
b'obj(?='
b'endobj(?='
b'%[^\\r\\n]*'
b')*'
b'stream\\r?\\n'
b'endstream(?='
(None, -1)
PdfParser.get_value
(b'(\\\\[nrtbf()\\\\])|(\\\\[0-9]{1,3})|(\\\\(\\r\\n|\\r|\\n))|(\\r\\n|\\r|\\n)|(\\()|(\\))',)
{b'n': b'\n', b'r': b'\r', b't': b'\t', b'b': b'\x08', b'f': b'\x0c', b'(': b'(', b')': b')', b'\\': b'\\', 110: b'\n', 114: b'\r', 116: b'\t', 98: b'\x08', 102: b'\x0c', 40: b'(', 41: b')', 92: b'\\'}
PdfParser.get_literal_string
b'xref'
(b'([0-9]{10}) ([0-9]{5}) ([fn])( \\r| \\n|\\r\\n)',)
PdfParser.read_xref_table
(-1,)
PdfParser.read_indirect
PdfParser.linearize_page_tree
PIL\PdfParser.py
('.0', 'b')
('.0', 'byte')
('.0', 'x')
<module PIL.PdfParser>
('__class__',)
('self',)
('self', 'out', 'key', 'value')
('self', 'result', 'b')
('self', 'key')
('self', 'key', 'generation', 'msg')
('self', 'other')
('self', 'exc_type', 'exc_value', 'traceback')
('self', 'key', 'value', 'e', 'relationship', 'offset', 'format')
('self', 'data')
('self', 'dictionary', 'buf')
('self', 'filename', 'f', 'buf', 'start_offset', 'mode', 'msg')
('self', 'name')
('self', 'key', 'value')
('condition', 'error_message')
('self', 'filter', 'expected_length', 'msg')
('b',)
('s',)
('cls', 'data')
('f',)
('cls', 'data', 'offset', 'nesting_depth', 'result', 'm', 'msg')
('cls', 'data', 'offset', 'expect_indirect', 'max_nesting', 'm', 'object', 'result', 'key', 'value', 'stream_len', 'e', 'msg', 'stream_data', 'hex_string')
('cls', 'raw', 'as_text', 'name', 'm')
('cls', 'trailer_data', 'trailer', 'offset', 'm', 'key', 'value')
('self', 'node', 'pages', 'kid', 'kid_object')
('self', 'offset', 'reference')
('x',)
('self', 'ref', 'max_nesting', 'offset', 'generation', 'value')
('self', 'xref_section_offset', 'trailer_offset', 'm', 'trailer_data', 'trailer_dict')
('self', 'search_start_offset', 'm', 'last_match', 'trailer_data')
('self', 'xref_section_offset', 'subsection_found', 'm', 'offset', 'first_object', 'num_objects', 'i', 'is_free', 'generation', 'new_entry')
('self', 'pages_tree_nodes_to_delete', 'i', 'page_ref', 'page_info', 'stringified_page_info', 'key', 'value', 'new_page_ref', 'j', 'cur_page_ref', 'pages_tree_node_ref', 'pages_tree_node')
('self', 'f', 'keys', 'deleted_keys', 'startxref', 'prev', 'index', 'key', 'contiguous_keys', 'object_id', 'this_deleted_object_id', 'next_in_linked_list')
('self', 's')
('self', 'ref', 'objs', 'dict_obj', 'f', 'stream', 'obj')
('self', 'ref', 'objs', 'dict_obj')
('self', 'new_root_ref', 'start_xref', 'num_entries', 'trailer_dict')

------------------------------ [modulecode_PIL.PixarImagePlugin] ------------------------------
[None, 4, None]
b'\x80\xe8\x00\x00'
fp
read
(4,)
_accept
not a PIXAR file
(508,)
i16
418
416
_size
424
426
(14, 2)
RGB
mode
raw
(0, 0)
size
1024
0
1
tile
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
Image
ImageFile
_binary
('i16le',)
i16le
__prepare__
PixarImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PixarImagePlugin
__module__
__qualname__
PIXAR
format
PIXAR raster image
format_description
_open
PixarImageFile._open
__orig_bases__
register_open
register_extension
.pxr
PIL\PixarImagePlugin.py
<module PIL.PixarImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'mode')

------------------------------ [modulecode_PIL.PngImagePlugin] ------------------------------
zlib
decompressobj
decompress
MAX_TEXT_CHUNK
unconsumed_tail
Decompressed Data Too Large
crc32
4294967295
fp
queue
pop
too many values to unpack (expected 3)
seek
read
(8,)
[4, None, None]
tell
i32
is_cid
ImageFile
LOAD_TRUNCATED_IMAGES
broken PNG file (chunk 

)
pos
Fetch a new chunk. Returns header information.
close
append
logger
debug
STREAM %r %s %s
chunk_
decode
('ascii',)
Call the appropriate chunk handler
0
5
1
crc_skip
_crc32
(4,)
broken PNG file (bad header checksum in 
struct
error
broken PNG file (incomplete checksum in 
Read and verify checksum
Read checksum
self
truncated PNG file
crc
_safe_read
cids
__new__
lang
tkey

        :param cls: the class to use when creating the instance
        :param text: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        
chunks
chunk
Appends an arbitrary chunk. Use with caution.

        :param cid: a byte string, 4 bytes long.
        :param data: a byte string of the encoded data
        :param after_idat: for use with private chunks. Whether the chunk
                           should be written after IDAT

        
encode
('latin-1', 'strict')
('utf-8', 'strict')
add
b'iTXt'
b'\x00\x01\x00'
b'\x00'
compress
b'\x00\x00\x00'
Appends an iTXt chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        :param zip: compression flag

        
iTXt
add_itxt
('zip',)
b'zTXt'
b'\x00\x00'
b'tEXt'
Appends a text chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key, text or an
           :py:class:`PIL.PngImagePlugin.iTXt` instance
        :param zip: compression flag

        
__class__
__init__
im_info
im_text
(0, 0)
im_size
im_mode
im_tile
im_palette
im_custom_mimetype
im_n_frames
_seq_num
rewind_state
text_memory
MAX_TEXT_MEMORY
Too much memory used in text chunks: 
>MAX_TEXT_MEMORY
info
copy
tile
seq_num
find
(b'\x00',)
iCCP profile name %r
Compression method %s
Unknown compression method 
 in iCCP chunk
_safe_zlib_decompress
2
icc_profile
13
Truncated IHDR chunk
4
_MODES
8
9
too many values to unpack (expected 2)
im_rawmode
12
interlace
11
unknown filter category
bbox
zip
default_image
im_idat
P
RGB
_simple_palette
match
transparency
('1', 'L', 'I')
i16
s
100000.0
gamma
unpack
>%dI
chromaticity
<genexpr>
PngStream.chunk_cHRM.<locals>.<genexpr>
Truncated sRGB chunk
srgb
Truncated pHYs chunk
0.0254
dpi
aspect
split
(b'\x00', 1)
b''
('latin-1', 'replace')
exif
check_text_memory
 in zTXt chunk
[1, None, None]
[2, None, None]
(b'\x00', 2)
b'Exif\x00\x00'
APNG contains truncated acTL chunk
warnings
warn
('Invalid APNG, will use default PNG image if possible',)
2147483648
loop
image/apng
26
APNG contains truncated fcTL chunk
APNG contains frame sequence errors
seq
16
APNG contains invalid frames
py
height
20
22
100
1000
duration
24
disposal
25
blend
APNG contains truncated fDAT chunk
chunk_IDAT
[None, 8, None]
_MAGIC
_accept
not a PNG file
_fp
_PngImageFile__frame
private_chunks
PngStream
png
call
%r %s %s (unknown)
[1, 2, None]
islower
mode
_size
_text
custom_mimetype
n_frames
get
('default_image', False)
ImagePalette
raw
palette
b'fdAT'
_PngImageFile__prepare_idat
_close_exclusive_fp_after_loading
save_rewind
_PngImageFile__rewind_idat
_PngImageFile__rewind
_seek
(0,)
is_animated
load
frame
verify must be called directly after open
verify
_exclusive_fp
Verify PNG file
_seek_check
(0, True)
no more images in APNG file
rewind
im
pyaccess
_prev_im
dispose
('disposal',)
dispose_op
('blend',)
blend_op
('bbox',)
dispose_extent
cannot seek to frame 
paste
b'IEND'
No more images in APNG file
b'fcTL'
frame_start
APNG missing frame data
length
Disposal
OP_PREVIOUS
OP_BACKGROUND
_crop
Image
core
fill
size
('interlace',)
decoderconfig
(1,)
_PngImageFile__idat
load_prepare
internal: prepare to read PNG file
b'IDAT'
b'DDAT'
push
min
internal: read more image data
Blend
OP_OVER
convert_transparent
RGBA
convert
('RGBA',)
updated
internal: finished reading image data
Raw profile type exif
getexif
_get_merged_dict
XML:com.adobe.xmp
_getxmp

        Returns a dictionary containing the XMP tags.
        Requires defusedxml to be installed.

        :returns: XMP tags in a dictionary.
        
write
o32
Write a PNG chunk (including CRC field)
encoderinfo
('duration', 0)
('loop', 0)
OP_NONE
OP_SOURCE
itertools
chain
ImageSequence
Iterator
rawmode
('palette',)
(<class 'list'>, <class 'tuple'>)
frame_count
im_frames
-1
(0, 0, 0, 0)
crop
-2
ImageChops
subtract_modulo
base_im
getbbox
(False,)
('alpha_only',)
b'acTL'
_save
_idat
im_frame
round
o16
(1000,)
o8
_fdat
{'save_all': True}
('default_image',)
append_images
modes
('RGBA', 'RGB', 'P')
bits
256
max
getdata
3
;
('optimize', False)
('compress_level', -1)
('compress_type', -1)
('dictionary', b'')
encoderconfig
_OUTMODES
cannot write mode 
 as PNG
b'IHDR'
[b'cHRM', b'gAMA', b'sBIT', b'sRGB', b'tIME']
('icc_profile',)
b'ICC Profile\x00\x00'
b'iCCP'
b'sRGB'
('pnginfo',)
[b'sPLT', b'iTXt', b'tEXt', b'zTXt']
[None, 2, None]
remove
[2, 3, None]
colors
getpalette
('RGB',)
palette_bytes
b'PLTE'
('transparency', None)
b'tRNS'
255
b'\xff'
65535
cannot use transparency for this mode
getpalettemode
('RGBA', 'A')
('dpi',)
b'pHYs'
0.5
b'\x01'
b'bKGD'
b'hIST'
('exif',)
Exif
tobytes
startswith
(b'Exif\x00\x00',)
[6, None, None]
b'eXIf'
_write_multiple_frames
flush
PIL.PngImagePlugin
__module__
getchunks.<locals>.collector
__qualname__
data
getchunks.<locals>.collector.write
getchunks.<locals>.collector.append
collector
()
getchunks.<locals>.append
Return a list of PNG chunks representing this image.
__doc__
__file__
__spec__
origin
has_location
__cached__
logging
re
enum
('IntEnum',)
IntEnum
('Image', 'ImageChops', 'ImageFile', 'ImagePalette', 'ImageSequence')
_binary
('i16be',)
i16be
('i32be',)
i32be
('o8',)
('o16be',)
o16be
('o32be',)
o32be
getLogger
('PIL.PngImagePlugin',)
compile
(b'\\w\\w\\w\\w',)
b'\x89PNG\r\n\x1a\n'
{(1, 0): ('1', '1'), (2, 0): ('L', 'L;2'), (4, 0): ('L', 'L;4'), (8, 0): ('L', 'L'), (16, 0): ('I', 'I;16B'), (8, 2): ('RGB', 'RGB'), (16, 2): ('RGB', 'RGB;16B'), (1, 3): ('P', 'P;1'), (2, 3): ('P', 'P;2'), (4, 3): ('P', 'P;4'), (8, 3): ('P', 'P'), (8, 4): ('LA', 'LA'), (16, 4): ('RGBA', 'LA;16B'), (8, 6): ('RGBA', 'RGBA'), (16, 6): ('RGBA', 'RGBA;16B')}
(b'^\xff*\x00\xff*$',)
SAFEBLOCK
64
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
__orig_bases__
ChunkStream
ChunkStream.__init__
ChunkStream.read
__enter__
ChunkStream.__enter__
__exit__
ChunkStream.__exit__
ChunkStream.close
ChunkStream.push
ChunkStream.call
ChunkStream.crc
ChunkStream.crc_skip
(b'IEND',)
ChunkStream.verify
(<class 'str'>,)

    Subclass of string to allow iTXt chunks to look like strings while
    keeping their extra information

    
staticmethod
(None, None)
iTXt.__new__

    PNG chunk container (for use with save(pnginfo=))

    
PngInfo
PngInfo.__init__
PngInfo.add
('', '', False)
PngInfo.add_itxt
add_text
PngInfo.add_text
PngStream.__init__
PngStream.check_text_memory
PngStream.save_rewind
PngStream.rewind
chunk_iCCP
PngStream.chunk_iCCP
chunk_IHDR
PngStream.chunk_IHDR
PngStream.chunk_IDAT
chunk_IEND
PngStream.chunk_IEND
chunk_PLTE
PngStream.chunk_PLTE
chunk_tRNS
PngStream.chunk_tRNS
chunk_gAMA
PngStream.chunk_gAMA
chunk_cHRM
PngStream.chunk_cHRM
chunk_sRGB
PngStream.chunk_sRGB
chunk_pHYs
PngStream.chunk_pHYs
chunk_tEXt
PngStream.chunk_tEXt
chunk_zTXt
PngStream.chunk_zTXt
chunk_iTXt
PngStream.chunk_iTXt
chunk_eXIf
PngStream.chunk_eXIf
chunk_acTL
PngStream.chunk_acTL
chunk_fcTL
PngStream.chunk_fcTL
chunk_fdAT
PngStream.chunk_fdAT
PngImageFile
PNG
format
Portable network graphics
format_description
_open
PngImageFile._open
property
text
PngImageFile.text
PngImageFile.verify
PngImageFile.seek
PngImageFile._seek
PngImageFile.tell
PngImageFile.load_prepare
load_read
PngImageFile.load_read
load_end
PngImageFile.load_end
_getexif
PngImageFile._getexif
PngImageFile.getexif
getxmp
PngImageFile.getxmp
{'1': ('1', b'\x01\x00'), 'L;1': ('L;1', b'\x01\x00'), 'L;2': ('L;2', b'\x02\x00'), 'L;4': ('L;4', b'\x04\x00'), 'L': ('L', b'\x08\x00'), 'LA': ('LA', b'\x08\x04'), 'I': ('I;16B', b'\x10\x00'), 'I;16': ('I;16B', b'\x10\x00'), 'P;1': ('P;1', b'\x01\x03'), 'P;2': ('P;2', b'\x02\x03'), 'P;4': ('P;4', b'\x04\x03'), 'P': ('P', b'\x08\x03'), 'RGB': ('RGB', b'\x08\x02'), 'RGBA': ('RGBA', b'\x08\x06')}
putchunk
_idat.__init__
_idat.write
_fdat.__init__
_fdat.write
_save_all
getchunks
register_open
register_save
register_save_all
register_extensions
.png
.apng
register_mime
image/png
PIL\PngImagePlugin.py
('.0', 'elt')
<module PIL.PngImagePlugin>
('__class__',)
('self',)
('self', 'args')
('self', 'fp')
('self', 'fp', '__class__')
('self', 'fp', 'chunk')
('self', 'fp', 'chunk', 'seq_num')
('cls', 'text', 'lang', 'tkey', 'self')
('prefix',)
('data', 'seed')
('self', 'msg', 'cid', 'pos', 'length', 's', 'rawmode', 'data')
('s', 'dobj', 'plaintext', 'msg')
('im', 'fp', 'filename', 'chunk', 'save_all', 'default_image', 'modes', 'append_images', 'chain', 'im_seq', 'im_frame', 'mode', 'colors', 'bits', 'rawmode', 'e', 'msg', 'chunks', 'icc', 'name', 'data', 'info', 'chunks_multiple_allowed', 'info_chunk', 'cid', 'after_idat', 'palette_byte_number', 'palette_bytes', 'transparency', 'alpha_bytes', 'alpha', 'red', 'green', 'blue', 'dpi', 'exif')
('im', 'fp', 'filename')
('self', 'frame', 'rewind', 'msg', 'frame_start', 'cid', 'pos', 'length')
('im', 'fp', 'chunk', 'rawmode', 'default_image', 'append_images', 'duration', 'loop', 'disposal', 'blend', 'chain', 'im_frames', 'frame_count', 'im_seq', 'im_frame', 'encoderinfo', 'previous', 'prev_disposal', 'prev_blend', 'base_im', 'dispose', 'bbox', 'delta', 'seq_num', 'frame', 'frame_data', 'size', 'frame_duration', 'frame_disposal', 'frame_blend', 'fdat_chunks')
('self', 'cid', 'data', 'after_idat', 'chunk')
('self', 'key', 'value', 'lang', 'tkey', 'zip')
('self', 'key', 'value', 'zip')
('fp', 'cid', 'data', 'crc')
('self', 'chunk')
('self', 'cid', 'pos', 'length')
('self', 'chunklen', 'msg')
('self', 'pos', 'length', 'tile')
('self', 'pos', 'length')
('self', 'pos', 'length', 's', 'msg')
('self', 'pos', 'length', 's')
('self', 'pos', 'length', 's', 'msg', 'n_frames')
('self', 'pos', 'length', 's', 'raw_vals')
('self', 'pos', 'length', 's', 'msg', 'seq', 'width', 'height', 'px', 'py', 'im_w', 'im_h', 'delay_num', 'delay_den')
('self', 'pos', 'length', 's', 'msg', 'seq')
('self', 'pos', 'length', 's', 'i', 'comp_method', 'msg', 'icc_profile')
('self', 'pos', 'length', 'r', 's', 'k', 'cf', 'cm', 'lang', 'tk', 'v')
('self', 'pos', 'length', 's', 'msg', 'px', 'py', 'unit', 'dpi')
('self', 'pos', 'length', 's', 'k', 'v', 'v_str')
('self', 'pos', 'length', 's', 'i')
('self', 'pos', 'length', 's', 'k', 'v', 'comp_method', 'msg')
('self', 'cid', 'data', 'crc1', 'crc2', 'msg', 'e')
('self', 'cid', 'data')
('im', 'params', 'collector', 'append', 'fp')
('self', '__class__')
('self', 'cid', 'pos', 'length', 's', 'updated', 'mask')
('self', 'read_bytes', 'cid', 'pos', 'length')
('self', 'cid', 'pos', 'length', 's', 'msg')
('self', 'frame', 'last_frame', 'f', 'e', 'msg')
('self', 'frame')
('self', 'endchunk', 'cids', 'cid', 'pos', 'length', 'e', 'msg')
('self', 'msg')
('self', 'data')

------------------------------ [modulecode_PIL.PpmImagePlugin] ------------------------------
[None, 1, None]
b'P'
1
b'0123456y'
b''
(0, 6, 1)
self
fp
read
(1,)
b_whitespace
magic
token
b'#'
b'\r\n'
Reached EOF while reading header
Token too long in file header: 
decode

_read_magic
MODES
not a PPM file
(b'P1', b'P4')
image/x-portable-bitmap
custom_mimetype
(b'P2', b'P5')
image/x-portable-graymap
(b'P3', b'P6')
image/x-portable-pixmap
raw
(b'P1', b'P2', b'P3')
ppm_plain
(0, 3, 1)
_read_token
0
mode
1
1;I
2
65536
maxval must be greater than 0 and less than 65536
255
L
I
decoder_name
65535
I;16B
ppm
rawmode
maxval
xsize
ysize
_size
tell
tile
fd
ImageFile
SAFEBLOCK
find
b'\n'
b'\r'
min
max
_comment_spans
block
_find_comment_end
-1
_read_block
(b'#',)
bytearray(b'')
state
data
_ignore_comments
split
(48, 49)
b'Invalid token for this mode: %s'
maketrans
(b'01', b'\xff\x00')
translate

        This is a separate method because in the plain PBM format, all data tokens are
        exactly one byte, so the inter-token whitespace is optional.
        
4
Image
getmodebands
half_token
bytearray(b' ')
[-1, None, None]
isspace
pop
b'Token too long found in data: %s'
[None, 11, None]
tokens
Channel value too large for this mode: 
round
out_max
o32
o8
_decode_bitonal
1;8
args
_decode_blocks
I;32
set_as_raw
(-1, 0)
256
bands
out_byte_count
in_byte_count
pixels
i16
('1;I', b'P4')
too many values to unpack (expected 2)
('L', b'P5')
('I;16B', b'P5')
('RGB', 'RGBA')
('RGB', b'P6')
cannot write mode 
 as PPM
write
b'\n%d %d\n'
size
b'P6'
(b'255\n',)
b'P5'
(b'65535\n',)
_save
(0, 0)
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
_binary
('i16be',)
i16be
('o8',)
('o32le',)
o32le
b' \t\n\x0b\x0c\r'
{b'P1': '1', b'P2': 'L', b'P3': 'RGB', b'P4': '1', b'P5': 'L', b'P6': 'RGB', b'P0CMYK': 'CMYK', b'PyP': 'P', b'PyRGBA': 'RGBA', b'PyCMYK': 'CMYK'}
_accept
__prepare__
PpmImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PpmImagePlugin
__module__
__qualname__
PPM
format
Pbmplus image
format_description
PpmImageFile._read_magic
PpmImageFile._read_token
_open
PpmImageFile._open
__orig_bases__
PyDecoder
PpmPlainDecoder
_pulls_fd
PpmPlainDecoder._read_block
(0,)
PpmPlainDecoder._find_comment_end
PpmPlainDecoder._ignore_comments
PpmPlainDecoder._decode_bitonal
PpmPlainDecoder._decode_blocks
PpmPlainDecoder.decode
PpmDecoder
PpmDecoder.decode
register_open
register_save
register_decoder
register_extensions
['.pbm', '.pgm', '.ppm', '.pnm']
register_mime
image/x-portable-anymap
PIL\PpmImagePlugin.py
<module PIL.PpmImagePlugin>
('__class__',)
('prefix',)
('self', 'data', 'total_bytes', 'block', 'tokens', 'token', 'msg', 'invert')
('self', 'maxval', 'data', 'max_len', 'out_byte_count', 'out_max', 'bands', 'total_bytes', 'half_token', 'block', 'tokens', 'msg', 'token', 'value')
('self', 'block', 'start', 'a', 'b')
('self', 'block', 'comment_end', 'comment_start')
('self', 'magic_number', 'mode', 'msg', 'maxval', 'decoder_name', 'ix', 'token', 'xsize', 'ysize', 'rawmode', 'args')
('self',)
('self', 'magic', '_', 'c')
('self', 'token', 'c', 'msg')
('im', 'fp', 'filename', 'rawmode', 'head', 'msg')
('self', 'buffer', 'data', 'maxval', 'in_byte_count', 'out_byte_count', 'out_max', 'bands', 'pixels', 'b', 'value', 'rawmode')
('self', 'buffer', 'data', 'rawmode', 'maxval')

------------------------------ [modulecode_PIL.PsdImagePlugin] ------------------------------
[None, 4, None]
b'8BPS'
fp
read
(26,)
_accept
i16
4
1
not a PSD file
22
12
24
MODES
too many values to unpack (expected 2)
not enough channels
RGB
RGBA
mode
i32
18
14
_size
(4,)
P
768
ImagePalette
raw
RGB;L
palette
resources
tell
self
(2,)
i8
(1,)
append
1039
info
icc_profile
layers
BytesIO
ImageFile
_safe_read
_layerinfo
seek
n_frames
is_animated
_maketile
(0, 0)
size
tile
_fp
frame
_min_frame
_seek_check
too many values to unpack (expected 4)
no such layer
_layerinfo.<locals>.read
si16
20
Layer block too short for number of layers requested
65535
A
sort
R
L
B
G
['A', 'B', 'G', 'R']
(12,)

16
io
SEEK_CUR
decode
('latin-1', 'replace')
too many values to unpack (expected 3)
bbox
extend
2
0
3
CMYK
;I
offset
xsize
ysize
packbits
bytecount
i
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile', 'ImagePalette')
Image
_binary
('i8',)
('i16be',)
i16be
('i32be',)
i32be
('si16be',)
si16be
{(0, 1): ('1', 1), (0, 8): ('L', 1), (1, 8): ('L', 1), (2, 8): ('P', 1), (3, 8): ('RGB', 3), (4, 8): ('CMYK', 4), (7, 8): ('L', 1), (8, 8): ('L', 1), (9, 8): ('LAB', 3)}
__prepare__
PsdImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.PsdImagePlugin
__module__
__qualname__
PSD
format
Adobe Photoshop
format_description
_close_exclusive_fp_after_loading
_open
PsdImageFile._open
PsdImageFile.seek
PsdImageFile.tell
__orig_bases__
register_open
register_extension
.psd
register_mime
image/vnd.adobe.photoshop
PIL\PsdImagePlugin.py
<module PIL.PsdImagePlugin>
('__class__',)
('prefix',)
('fp', 'ct_bytes', 'layers', 'read', 'ct', 'msg', '_', 'y0', 'x0', 'y1', 'x1', 'mode', 'ct_types', 'types', 'type', 'm', 'name', 'size', 'data_end', 'length', 'i', 'bbox', 'tile', 't')
('file', 'mode', 'bbox', 'channels', 'tile', 'read', 'compression', 'xsize', 'ysize', 'offset', 'channel', 'layer', 'i', 'bytecount', 'y')
('self', 'read', 's', 'msg', 'psd_bits', 'psd_channels', 'psd_mode', 'mode', 'channels', 'size', 'data', 'end', 'id', 'name', '_layer_data')
('size', 'fp')
('fp',)
('self', 'layer', 'name', 'mode', 'bbox', 'tile', 'e', 'msg')
('self',)

------------------------------ [modulecode_PIL.PyAccess] ------------------------------
deprecate
('PyAccess', 11)
im
unsafe_ptrs
readonly
ffi
cast
unsigned char **
image8
int **
image32
image
size
too many values to unpack (expected 2)
xsize
ysize
_img
_im
mode
('P', 'PA')
palette
_palette
_post_init
Attempt to putpixel a read only image
0
check_xy
(<class 'list'>, <class 'tuple'>)
3
4
PA
color
255
[None, 3, None]
getcolor
alpha
set_pixel

        Modifies the pixel at x,y. The color is given as a single
        numerical value for single band images, and a tuple for
        multi-band images

        :param xy: The pixel coordinate, given as (x, y). See
           :ref:`coordinate-system`.
        :param color: The pixel value.
        
self
get_pixel

        Returns the pixel at x,y. The pixel is returned as a single
        value for single band images or a tuple for multiple band
        images

        :param xy: The pixel coordinate, given as (x, y). See
          :ref:`coordinate-system`.
        :returns: a pixel value for single band images, a tuple of
          pixel values for multiband images.
        
pixel location out of range
struct Pixel_RGBA **
pixels
r
a
min
1
g
b
2
unsigned short **
65535
struct Pixel_I16 **
l
256
8
new
int *
unsigned char *
too many values to unpack (expected 4)
reverse
float **
mode_map
get
logger
debug
PyAccess Not Implemented: %s
__doc__
__file__
__spec__
origin
has_location
__cached__
logging
sys
_deprecate
('deprecate',)
cffi
('FFI',)
FFI

    struct Pixel_RGBA {
        unsigned char r,g,b,a;
    };
    struct Pixel_I16 {
        unsigned char l,r;
    };
    
defs
cdef
ex
_util
('DeferredError',)
DeferredError
getLogger
('PIL.PyAccess',)
PIL.PyAccess
__module__
PyAccess
__qualname__
(False,)
__init__
PyAccess.__init__
PyAccess._post_init
__setitem__
PyAccess.__setitem__
__getitem__
PyAccess.__getitem__
putpixel
getpixel
PyAccess.check_xy
()
__prepare__
_PyAccess32_2
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PA, LA, stored in first and last bytes of a 32 bit word
_PyAccess32_2._post_init
_PyAccess32_2.get_pixel
_PyAccess32_2.set_pixel
__orig_bases__
_PyAccess32_3
RGB and friends, stored in the first three bytes of a 32 bit word
_PyAccess32_3._post_init
_PyAccess32_3.get_pixel
_PyAccess32_3.set_pixel
_PyAccess32_4
RGBA etc, all 4 bytes of a 32 bit word
_PyAccess32_4._post_init
_PyAccess32_4.get_pixel
_PyAccess32_4.set_pixel
_PyAccess8
1, L, P, 8 bit images stored as uint8
_PyAccess8._post_init
_PyAccess8.get_pixel
_PyAccess8.set_pixel
_PyAccessI16_N
I;16 access, native bitendian without conversion
_PyAccessI16_N._post_init
_PyAccessI16_N.get_pixel
_PyAccessI16_N.set_pixel
_PyAccessI16_L
I;16L access, with conversion
_PyAccessI16_L._post_init
_PyAccessI16_L.get_pixel
_PyAccessI16_L.set_pixel
_PyAccessI16_B
I;16B access, with conversion
_PyAccessI16_B._post_init
_PyAccessI16_B.get_pixel
_PyAccessI16_B.set_pixel
_PyAccessI32_N
Signed Int32 access, native endian
_PyAccessI32_N._post_init
_PyAccessI32_N.get_pixel
_PyAccessI32_N.set_pixel
_PyAccessI32_Swap
I;32L/B access, with byteswapping conversion
_PyAccessI32_Swap._post_init
_PyAccessI32_Swap.reverse
_PyAccessI32_Swap.get_pixel
_PyAccessI32_Swap.set_pixel
_PyAccessF
32 bit float access
_PyAccessF._post_init
_PyAccessF.get_pixel
_PyAccessF.set_pixel
1
L
P
I;16N
LA
La
RGB
LAB
HSV
YCbCr
RGBA
RGBa
RGBX
CMYK
F
I
I;16
I;16L
I;16B
I;32L
I;32B
PIL\PyAccess.py
<module PIL.PyAccess>
('__class__',)
('self', 'xy', 'x', 'y')
('self', 'img', 'readonly', 'vals')
('self', 'xy', 'color', 'msg', 'x', 'y', 'alpha')
('self',)
('self', 'args', 'kwargs')
('self', 'xy', 'x', 'y', 'msg')
('self', 'x', 'y')
('self', 'x', 'y', 'pixel')
('img', 'readonly', 'access_type')
('self', 'i', 'orig', 'chars')
('self', 'x', 'y', 'color')
('self', 'x', 'y', 'color', 'pixel')


------------------------------ [modulecode_PIL.SgiImagePlugin] ------------------------------
i16
474
fp
read
(512,)
_accept
Not an SGI image file
2
3
4
6
8
10

MODES
Unsupported SGI image mode
_size
split
(';',)
0
mode
RGB
image/rgb
custom_mimetype
-1
SGI16
(0, 0)
size
512
tile
self
append
raw
offset
orientation
pagesize
1
sgi_rle
RGBA
L
encoderinfo
get
('bpc', 1)
(1, 2)
Unsupported number of bytes per pixel
too many values to unpack (expected 2)
getbands
incorrect number of bands in SGI write: 
 vs 
splitext
encode
('ascii', 'ignore')
write
struct
pack
('>h', 474)
o8
(0,)
>H
('>l', 0)
('>l', 255)
('4s', b'')
79s
('s', b'')
('404s', b'')
L;16B
tobytes
rawmode
flush
args
too many values to unpack (expected 3)
state
xsize
ysize
fd
seek
Image
new
frombytes
stride
im
putband
(-1, 0)
__doc__
__file__
__spec__
origin
has_location
__cached__
os
('Image', 'ImageFile')
ImageFile
_binary
('i16be',)
i16be
('o8',)
{(1, 1, 1): 'L', (1, 2, 1): 'L', (2, 1, 1): 'L;16B', (2, 2, 1): 'L;16B', (1, 3, 3): 'RGB', (2, 3, 3): 'RGB;16B', (1, 3, 4): 'RGBA', (2, 3, 4): 'RGBA;16B'}
__prepare__
SgiImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.SgiImagePlugin
__module__
__qualname__
SGI
format
SGI Image File Format
format_description
_open
SgiImageFile._open
__orig_bases__
_save
PyDecoder
SGI16Decoder
_pulls_fd
decode
SGI16Decoder.decode
register_decoder
register_open
register_save
register_mime
image/sgi
register_extensions
['.bw', '.rgb', '.rgba', '.sgi']
PIL\SgiImagePlugin.py
<module PIL.SgiImagePlugin>
('__class__',)
('prefix',)
('self', 'headlen', 's', 'msg', 'compression', 'bpc', 'dimension', 'xsize', 'ysize', 'zsize', 'layout', 'rawmode', 'orientation', 'pagesize', 'offset', 'layer')
('im', 'fp', 'filename', 'msg', 'info', 'bpc', 'orientation', 'magic_number', 'rle', 'dim', 'x', 'y', 'z', 'pinmin', 'pinmax', 'img_name', 'colormap', 'rawmode', 'channel')
('self', 'buffer', 'rawmode', 'stride', 'orientation', 'pagesize', 'zsize', 'band', 'channel')

------------------------------ [modulecode_PIL.SpiderImagePlugin] ------------------------------
0
1
(None, None)
(99,)
(1, 2, 5, 12, 13, 22, 23)
isInt
5
iforms
13
22
23
rb
__enter__
__exit__
read
(92,)
(None, None, None)
struct
unpack
>23f
f
isSpiderHeader
<23f
fp
(108,)
bigendian
>27f
<27f
not a valid Spider file
error
t
not a Spider 2D image
12
2
_size
24
istack
27
imgnumber
_nimages
4
imgbytes
hdrlen
26
stkoffset
inconsistent stack header values
F;32BF
rawmode
F;32F
F
mode
raw
(0, 0)
size
tile
_fp
attempt to seek in a non-stack file
_seek_check
seek
_open
getextrema
too many values to unpack (expected 2)
minimum
point
<lambda>
SpiderImageFile.convert2byte.<locals>.<lambda>
convert
('L',)
Must not call PIL.SpiderImagePlugin.tkPhotoImage
filelist
os
path
exists
print
unable to find 

Image
open
convert2byte
isSpiderImage
 is not a Spider image file
im
info
filename
imglist
append
create a list of :py:class:`~PIL.Image.Image` objects for use in a montage
1024
hdr
(0.0,)
1.0
3
[1, None, None]
pack
('F',)
makeSpiderHeader
Error creating Spider header
writelines
ImageFile
_save
('F;32NF', 0, 1)
splitext
register_extension
SpiderImageFile
format
__doc__
__file__
__spec__
origin
has_location
__cached__
sys
('Image', 'ImageFile')
[1, 3, -11, -12, -21, -22]
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.SpiderImagePlugin
__module__
__qualname__
SPIDER
Spider 2D image
format_description
_close_exclusive_fp_after_loading
SpiderImageFile._open
property
n_frames
SpiderImageFile.n_frames
is_animated
SpiderImageFile.is_animated
tell
SpiderImageFile.tell
SpiderImageFile.seek
(255,)
SpiderImageFile.convert2byte
tkPhotoImage
SpiderImageFile.tkPhotoImage
__orig_bases__
(None,)
loadImageSeries
_save_spider
register_open
register_save
PIL\SpiderImagePlugin.py
('i', 'm', 'b')
<module PIL.SpiderImagePlugin>
('__class__',)
('self', 'n', 'f', 't', 'hdrlen', 'msg', 'e', 'h', 'iform', 'offset')
('im', 'fp', 'filename', 'hdr', 'msg', 'rawmode')
('im', 'fp', 'filename', 'ext')
('self', 'depth', 'minimum', 'maximum', 'm', 'b')
('f', 'i')
('t', 'h', 'i', 'iform', 'labrec', 'labbyt', 'lenbyt')
('filename', 'fp', 'f', 't', 'hdrlen')
('self',)
('filelist', 'imglist', 'img', 'im')
('im', 'nsam', 'nrow', 'lenbyt', 'labrec', 'labbyt', 'nvalues', 'hdr', 'i')
('self', 'frame', 'msg')

------------------------------ [modulecode_PIL.SunImagePlugin] ------------------------------
i32
1504078485
fp
read
(32,)
_accept
not an SUN raster file
32
4
8
_size
12
20
24
28
1
('1', '1;I')
too many values to unpack (expected 2)
mode
('L', 'L;4')
L
3
('RGB', 'RGB')
('RGB', 'BGR')
('RGB', 'RGBX')
('RGB', 'BGRX')
Unsupported Mode/Bit Depth
1024
Unsupported Color Palette Length
Unsupported Palette Type
ImagePalette
raw
RGB;L
palette
P
replace
('L', 'P')
size
0
15
16
2
(0, 1, 3, 4, 5)
(0, 0)
tile
sun_rle
Unsupported Sun Raster file type
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile', 'ImagePalette')
Image
ImageFile
_binary
('i32be',)
i32be
__prepare__
SunImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.SunImagePlugin
__module__
__qualname__
SUN
format
Sun Raster File
format_description
_open
SunImageFile._open
__orig_bases__
register_open
register_extension
.ras
PIL\SunImagePlugin.py
<module PIL.SunImagePlugin>
('__class__',)
('prefix',)
('self', 's', 'msg', 'offset', 'depth', 'file_type', 'palette_type', 'palette_length', 'rawmode', 'stride')

------------------------------ [modulecode_PIL.TgaImagePlugin] ------------------------------
fp
read
(18,)
0
1
2
16
17
i16
12
14
_size
(0, 1)
size
(1, 8, 16, 24, 32)
not a TGA file
(3, 11)
L
mode
1
LA
(1, 9)
P
(2, 10)
RGB
32
RGBA
unknown TGA mode
48
_flip_horizontally
-1
unknown TGA orientation
info
orientation
8
tga_rle
compression
id_section
3
5
7
too many values to unpack (expected 3)
ImagePalette
raw
BGR;15
b'\x00\x00'
palette
24
BGR
b'\x00\x00\x00'
BGRA
b'\x00\x00\x00\x00'
4
MODES
(0, 0)
tell
tile
im
transpose
Image
Transpose
FLIP_LEFT_RIGHT
SAVE
too many values to unpack (expected 4)
cannot write mode 

 as TGA
rle
encoderinfo
get
('compression',)
('id_section', '')
255
[None, 255, None]
warnings
warn
('id_section has been trimmed to 255 characters',)
getpalette
('RGB', 'BGR')
too many values to unpack (expected 2)
('LA', 'RGBA')
('orientation', -1)
write
o8
o16
(0,)
ImageFile
_save
(b'\x00\x00\x00\x00\x00\x00\x00\x00TRUEVISION-XFILE.\x00',)
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile', 'ImagePalette')
_binary
('i16le',)
i16le
('o8',)
('o16le',)
o16le
{(1, 8): 'P', (3, 1): '1', (3, 8): 'L', (3, 16): 'LA', (2, 16): 'BGR;5', (2, 24): 'BGR', (2, 32): 'BGRA'}
__prepare__
TgaImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.TgaImagePlugin
__module__
__qualname__
TGA
format
Targa
format_description
_open
TgaImageFile._open
load_end
TgaImageFile.load_end
__orig_bases__
{'1': ('1', 1, 0, 3), 'L': ('L', 8, 0, 3), 'LA': ('LA', 16, 0, 3), 'P': ('P', 8, 1, 1), 'RGB': ('BGR', 24, 0, 2), 'RGBA': ('BGRA', 32, 0, 2)}
register_open
register_save
register_extensions
['.tga', '.icb', '.vda', '.vst']
register_mime
image/x-tga
PIL\TgaImagePlugin.py
<module PIL.TgaImagePlugin>
('__class__',)
('self', 's', 'id_len', 'colormaptype', 'imagetype', 'depth', 'flags', 'msg', 'orientation', 'start', 'size', 'mapdepth', 'rawmode')
('im', 'fp', 'filename', 'rawmode', 'bits', 'colormaptype', 'imagetype', 'e', 'msg', 'rle', 'compression', 'id_section', 'id_len', 'palette', 'colormaplength', 'colormapentry', 'flags', 'orientation')
('self',)

------------------------------ [modulecode_PIL.TiffImagePlugin] ------------------------------
4
<genexpr>
[None, 4, None]
PREFIXES
1
IFDRational
limit_rational
[None, None, -1]
Fraction
numerator
denominator
min
_limit_rational
max
_numerator
_denominator
_val
0
nan
self
value

        :param value: either an integer numerator, a
        float/rational/other number, or an IFDRational
        :param denominator: Optional integer denominator
        
limit_denominator


        :param max_denominator: Integer, the maximum denominator value
        :returns: Tuple of (numerator, denominator)
        
__hash__
__init__
too many values to unpack (expected 3)
delegate
IFDRational._delegate.<locals>.delegate
op
_accept
not a TIFF file (header 

 not valid)
[None, 2, None]
_prefix
MM
>
_endian
II
<
not a TIFF IFD
2
43
_bigtiff
group
tagtype
reset
_unpack
Q
[8, None, None]
L
[4, None, None]
too many values to unpack (expected 1)
next
_legacy_api
Initialize an ImageFileDirectory.

        To construct an ImageFileDirectory from a real file, pass the 8-byte
        magic header to the constructor.  To only set the endianness, pass it
        as the 'prefix' keyword argument.

        :param ifh: One of the accepted magic headers (cf. PREFIXES); also sets
              endianness.
        :param prefix: Override the endianness of the file.
        
_offset
Not allowing setting of legacy api
_tags_v1
_tags_v2
_tagdata
_next
items
too many values to unpack (expected 2)
TiffTags
lookup
name

        :returns: dict of name|key: value

        Returns the complete tag dictionary, with named tags where possible.
        
_load_dispatch
legacy_api
(<class 'tuple'>, <class 'bytes'>)
_setitem
Number
type
UNDEFINED
RATIONAL
SIGNED_RATIONAL
SHORT
SIGNED_SHORT
LONG
SIGNED_LONG
DOUBLE
ASCII
BYTE
values
encode
('ascii', 'replace')
length
warnings
warn
Metadata Warning, tag 
 had too many entries: 
, expected 1
ImageFileDirectory_v2._setitem.<locals>.<genexpr>
65536
-32768
32768
info
cvt_enum
pop
struct
unpack
pack
decorator
ImageFileDirectory_v2._register_loader.<locals>.decorator
('TYPES',)
TYPES
__name__
startswith
('load_',)
[5, None, None]
replace
('_', ' ')
idx
size
ImageFileDirectory_v2._register_writer.<locals>.decorator
_write_dispatch
calcsize
=
(True,)
<lambda>
ImageFileDirectory_v2._register_basic.<locals>.<lambda>
fmt
b''
_pack
ImageFileDirectory_v2._register_basic.<locals>.<lambda>.<locals>.<genexpr>
endswith
(b'\x00',)
[None, -1, None]
data
decode
('latin-1', 'replace')
b'\x00'
combine
ImageFileDirectory_v2.load_rational.<locals>.combine
[None, None, 2]
[1, None, 2]
ImageFileDirectory_v2.load_rational.<locals>.<genexpr>
('2L',)
4294967295
ImageFileDirectory_v2.write_rational.<locals>.<genexpr>
l
ImageFileDirectory_v2.load_signed_rational.<locals>.combine
ImageFileDirectory_v2.load_signed_rational.<locals>.<genexpr>
('2l',)
_limit_signed_rational
2147483647
-2147483648
ImageFileDirectory_v2.write_signed_rational.<locals>.<genexpr>
read
Corrupt EXIF data.  Expecting to read 
 bytes but only got 
. 
tell
_ensure_read
8
H
HHQ8s
fp
20
HHL4s
12
too many values to unpack (expected 4)
get
unknown
tag: 
 (
) - type: 
)
logger
debug
 - unsupported type 
 Tag Location: 
 - Data Location: 
seek
ImageFile
_safe_read
Possibly corrupt EXIF data.  Expecting to read 
. Skipping tag 
 - value: 
32
<table: %d bytes>
sorted
STRIPOFFSETS
entries
Tag 
, Type: 
, Value: 
b'II*\x00\x08\x00\x00\x00'
b'MM\x00*\x00\x00\x00\x08'
ImageFileDirectory_v2
('group',)
ifd
tobytes
offset
save: 
typ
append
ljust
(4, b'\x00')
stripoffsets
too many values to unpack (expected 5)
multistrip support not yet implemented
 
result
b'\x00\x00\x00\x00'
write
('HL', 42, 8)
__class__
prefix
('prefix',)
Returns an
        :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`
        instance with the same data as is contained in the original
        :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2`
        instance.

        :returns: :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`

        
Returns an
        :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2`
        instance with the same data as is contained in the original
        :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`
        instance.

        :returns: :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2`

        
(False, True)
tag
handler
tag_v2
(8,)
_TiffImageFile__first
_TiffImageFile__next
-1
_TiffImageFile__frame
_fp
_frame_pos
_n_frames
('*** TiffImageFile._open ***',)
- __first: 
- ifh: 
_seek
(0,)
Open the first image in a TIFF file
_seek_check
Image
_decompression_bomb_check
core
new
mode
im
Select a given frame as current image
frame
no more images in TIFF file
Seeking to frame 
, on frame 
, __next 
, location: 
Loading tags, location: %s
load
is_animated
_reload_exif
ImageFileDirectory_v1
from_v2
_setup
Return the current frame number
XMP
_getxmp

        Returns a dictionary containing the XMP tags.
        Requires defusedxml to be installed.

        :returns: XMP tags in a dictionary.
        
ExifTags
Base
ImageResources
val
b'8BIM'
i16
[4, 6, None]
math
ceil
6
i32
10
blocks

        Returns a dictionary of Photoshop "Image Resource Blocks".
        The keys are the image resource ID. For more information, see
        https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/#50577409_pgfId-1037727

        :returns: Photoshop "Image Resource Blocks" in a dictionary.
        
tile
use_load_libtiff
_load_libtiff
_tile_orientation
Transpose
FLIP_LEFT_RIGHT
3
ROTATE_180
FLIP_TOP_BOTTOM
5
TRANSPOSE
ROTATE_270
7
TRANSVERSE
ROTATE_90
transpose
_size
_close_exclusive_fp_after_loading
getexif
TAGS_V2_GROUPS
exif
get_ifd
load_prepare
Not exactly one tile
fileno
flush
_getdecoder
libtiff
args
decoderconfig
setimage
Couldn't set the image
_exclusive_fp
getvalue
('have getvalue. just sending in a string from getvalue',)
('have fileno, calling fileno version of the decoder.',)
(b'fpfp',)
("don't have fileno or getvalue. just reading",)
readonly
load_end
close
Overload method triggered when we detect a compressed tiff
        Calls out to libtiff
48129
Windows Media Photo files not yet supported
COMPRESSION_INFO
COMPRESSION
_compression
PLANAR_CONFIGURATION
_planar_configuration
PHOTOMETRIC_INTERPRETATION
tiff_jpeg
FILLORDER
('*** Summary ***',)
- compression: 
- photometric_interpretation: 
- planar_configuration: 
- fill_order: 
- YCbCr subsampling: 
YCBCRSUBSAMPLING
IMAGEWIDTH
IMAGELENGTH
- size: 
SAMPLEFORMAT
(1,)
BITSPERSAMPLE
EXTRASAMPLES
()
(2, 6, 8)
SAMPLESPERPIXEL
(2, 6)
MAX_SAMPLESPERPIXEL
error
More samples per pixel than can be decoded: %s
Invalid value for samples per pixel
bps_tuple
samples_per_pixel
unknown data organization
sample_format
format key: 
OPEN_INFO
('- unsupported format',)
unknown pixel mode
- raw mode: 
- pil mode: 
compression
X_RESOLUTION
Y_RESOLUTION
RESOLUTION_UNIT
dpi
2.54
resolution
READ_LIBTIFF
raw
[None, 3, None]
I;16
I;16N
;16B
(';16B', ';16N')
;16L
(';16L', ';16N')
jpeg
RGB
TILEOFFSETS
ROWSPERSTRIP
TILEWIDTH
TILELENGTH
x
w
xsize
rawmode
layer
bps_count
y
h
ysize
('- unsupported data organization',)
ICCPROFILE
icc_profile
P
PA
COLORMAP
o8
256
ImagePalette
RGB;L
palette
Orientation
Setup this image object based on current tags
SAVE_INFO
too many values to unpack (expected 6)
cannot write mode 
 as TIFF
encoderinfo
encoderconfig
('compression',)
tiff_deflate
tiff_adobe_deflate
WRITE_LIBTIFF
tiffinfo
Exif
Tiffinfo Keys: %s
to_v2
key
IPTC_NAA_CHUNK
PHOTOSHOP_CHUNK
('icc_profile',)
IMAGEDESCRIPTION
description
x_resolution
y_resolution
resolution_unit
SOFTWARE
software
DATE_TIME
date_time
ARTIST
artist
COPYRIGHT
copyright
('dpi',)
('1', 'L')
1
copy
height
inverted_im
width
px
255
ImageOps
invert
getpalette
('RGB', 'RGB;L')
(0, 3, 1)
colormap
colors
bits
strip_size
STRIP_SIZE
stride
rows_per_strip
STRIPBYTECOUNTS
COMPRESSION_INFO_REV
YCbCr
(1, 1)
REFERENCEBLACKWHITE
(0, 255, 128, 255, 128, 255)
setdefault
TILEBYTECOUNTS
quality
100
Invalid quality setting
quality setting only supported for 'jpeg' compression
JPEGQUALITY
('Saving using libtiff encoder',)
Items: %s
os
dup
io
UnsupportedOperation
TRANSFERFUNCTION
SUBIFD
itertools
chain
LIBTIFF_CORE
libtiff_support_custom_tags
types
(<class 'int'>, <class 'float'>, <class 'str'>, <class 'bytes'>)
atts
Converted items: %s
('I;16B', 'I;16')
sort
_getencoder
(0, 0)
e
(16384,)
[1, None, None]
encoder error 
 when writing image file
save
_save
_debug_multipage
f
close_fp
w+b
r+b
beginning
setup
SEEK_SET
whereToWriteNewIFDOffset
offsetOfNewPage
(4,)
IIMM
isFirst
b'II*\x00'
setEndian
('<',)
b'MM\x00*'
('>',)
Invalid TIFF file header
skipIFDs
goToEnd
IIMM of new page doesn't match IIMM of first page
readLong
writeLong
fixIFD
finalize
SEEK_END
16
endian
longFmt
shortFmt
HHL
tagFormat
readShort
SEEK_CUR
(2,)
-2
wrote only 
 bytes but wanted 4
 bytes but wanted 2
-4
fieldSizes
rewriteLastLong
Tags
fixOffsets
('isShort', 'isLong')
offset is neither short nor long
not implemented
rewriteLastShortToLong
-10
writeShort
rewriteLastShort
append_images
n_frames
AppendingTiffWriter
__enter__
__exit__
ims
tf
filename
newFrame
(None, None, None)
__doc__
__file__
__spec__
origin
has_location
__cached__
logging
collections.abc
('MutableMapping',)
MutableMapping
fractions
('Fraction',)
numbers
('Number', 'Rational')
Rational
('ExifTags', 'Image', 'ImageFile', 'ImageOps', 'ImagePalette', 'TiffTags')
_binary
('i16be',)
i16be
('i32be',)
i32be
('o8',)
getLogger
('PIL.TiffImagePlugin',)
IFD_LEGACY_API
b'II'
b'MM'
257
258
259
262
266
270
273
277
278
279
282
283
284
296
301
305
306
315
317
PREDICTOR
320
322
323
324
325
330
338
339
347
JPEGTABLES
530
532
33432
33723
34377
34675
34665
EXIFIFD
700
65537
50838
IMAGEJ_META_DATA_BYTE_COUNTS
50839
IMAGEJ_META_DATA
{1: 'raw', 2: 'tiff_ccitt', 3: 'group3', 4: 'group4', 5: 'tiff_lzw', 6: 'tiff_jpeg', 7: 'jpeg', 8: 'tiff_adobe_deflate', 32771: 'tiff_raw_16', 32773: 'packbits', 32809: 'tiff_thunderscan', 32946: 'tiff_deflate', 34676: 'tiff_sgilog', 34677: 'tiff_sgilog24', 34925: 'lzma', 50000: 'zstd', 50001: 'webp'}
('1', '1;I')
('1', '1;IR')
('1', '1')
('1', '1;R')
('L', 'L;2I')
('L', 'L;2IR')
('L', 'L;2')
('L', 'L;2R')
('L', 'L;4I')
('L', 'L;4IR')
('L', 'L;4')
('L', 'L;4R')
('L', 'L;I')
('L', 'L;IR')
('L', 'L')
('L', 'L;R')
(12,)
('I;16', 'I;12')
(16,)
('I;16', 'I;16')
('I;16B', 'I;16B')
('I;16', 'I;16R')
('I', 'I;16S')
('I', 'I;16BS')
(3,)
(32,)
('F', 'F;32F')
('F', 'F;32BF')
('I', 'I;32N')
('I', 'I;32S')
('I', 'I;32BS')
(8, 8)
('LA', 'LA')
(8, 8, 8)
('RGB', 'RGB')
('RGB', 'RGB;R')
(8, 8, 8, 8)
('RGBA', 'RGBA')
('RGBX', 'RGBX')
(8, 8, 8, 8, 8)
('RGBX', 'RGBXX')
(8, 8, 8, 8, 8, 8)
(0, 0, 0)
('RGBX', 'RGBXXX')
('RGBA', 'RGBa')
(1, 0)
('RGBA', 'RGBaX')
(1, 0, 0)
('RGBA', 'RGBaXX')
(2, 0)
('RGBA', 'RGBAX')
(2, 0, 0)
('RGBA', 'RGBAXX')
(999,)
(16, 16, 16)
('RGB', 'RGB;16L')
('RGB', 'RGB;16B')
(16, 16, 16, 16)
('RGBA', 'RGBA;16L')
('RGBA', 'RGBA;16B')
('RGBX', 'RGBX;16L')
('RGBX', 'RGBX;16B')
('RGBA', 'RGBa;16L')
('RGBA', 'RGBa;16B')
('P', 'P;1')
('P', 'P;1R')
('P', 'P;2')
('P', 'P;2R')
('P', 'P;4')
('P', 'P;4R')
('P', 'P')
('PA', 'PA')
('P', 'P;R')
('CMYK', 'CMYK')
('CMYK', 'CMYKX')
('CMYK', 'CMYKXX')
('CMYK', 'CMYK;16L')
('RGB', 'RGBX')
('LAB', 'LAB')
[b'MM\x00*', b'II*\x00', b'MM*\x00', b'II\x00*', b'MM\x00+', b'II+\x00']
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
<metaclass>
PIL.TiffImagePlugin
__module__
Implements a rational class where 0/0 is a legal value to match
    the in the wild use of exif rationals.

    e.g., DigitalZoomRatio - 0.00/0.00  indicates that no digital zoom was used
    
__qualname__
('_numerator', '_denominator', '_val')
__slots__
IFDRational.__init__
property
IFDRational.numerator
IFDRational.denominator
IFDRational.limit_rational
__repr__
IFDRational.__repr__
IFDRational.__hash__
__eq__
IFDRational.__eq__
__getstate__
IFDRational.__getstate__
__setstate__
IFDRational.__setstate__
_delegate
IFDRational._delegate
('__add__',)
__add__
('__radd__',)
__radd__
('__sub__',)
__sub__
('__rsub__',)
__rsub__
('__mul__',)
__mul__
('__rmul__',)
__rmul__
('__truediv__',)
__truediv__
('__rtruediv__',)
__rtruediv__
('__floordiv__',)
__floordiv__
('__rfloordiv__',)
__rfloordiv__
('__mod__',)
__mod__
('__rmod__',)
__rmod__
('__pow__',)
__pow__
('__rpow__',)
__rpow__
('__pos__',)
__pos__
('__neg__',)
__neg__
('__abs__',)
__abs__
('__trunc__',)
__trunc__
('__lt__',)
__lt__
('__gt__',)
__gt__
('__le__',)
__le__
('__ge__',)
__ge__
('__bool__',)
__bool__
('__ceil__',)
__ceil__
('__floor__',)
__floor__
('__round__',)
__round__
hasattr
__int__
('__int__',)
__orig_bases__
This class represents a TIFF tag directory.  To speed things up, we
    don't decode tags unless they're asked for.

    Exposes a dictionary interface of the tags in the directory::

        ifd = ImageFileDirectory_v2()
        ifd[key] = 'Some Data'
        ifd.tagtype[key] = TiffTags.ASCII
        print(ifd[key])
        'Some Data'

    Individual values are returned as the strings or numbers, sequences are
    returned as tuples of the values.

    The tiff metadata type of each item is stored in a dictionary of
    tag types in
    :attr:`~PIL.TiffImagePlugin.ImageFileDirectory_v2.tagtype`. The types
    are read from a tiff file, guessed from the type added, or added
    manually.

    Data Structures:

        * ``self.tagtype = {}``

          * Key: numerical TIFF tag number
          * Value: integer corresponding to the data type from
            :py:data:`.TiffTags.TYPES`

          .. versionadded:: 3.0.0

    'Internal' data structures:

        * ``self._tags_v2 = {}``

          * Key: numerical TIFF tag number
          * Value: decoded data, as tuple for multiple values

        * ``self._tagdata = {}``

          * Key: numerical TIFF tag number
          * Value: undecoded byte string from file

        * ``self._tags_v1 = {}``

          * Key: numerical TIFF tag number
          * Value: decoded data in the v1 format

    Tags will be found in the private attributes ``self._tagdata``, and in
    ``self._tags_v2`` once decoded.

    ``self.legacy_api`` is a value for internal use, and shouldn't be changed
    from outside code. In cooperation with
    :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`, if ``legacy_api``
    is true, then decoded tags will be populated into both ``_tags_v1`` and
    ``_tags_v2``. ``_tags_v2`` will be used if this IFD is used in the TIFF
    save routine. Tags should be read from ``_tags_v1`` if
    ``legacy_api == true``.

    
(b'II*\x00\x00\x00\x00\x00', None, None)
ImageFileDirectory_v2.__init__
ImageFileDirectory_v2.<lambda>
setter
ImageFileDirectory_v2.legacy_api
ImageFileDirectory_v2.reset
__str__
ImageFileDirectory_v2.__str__
named
ImageFileDirectory_v2.named
__len__
ImageFileDirectory_v2.__len__
ImageFileDirectory_v2.__getitem__
__contains__
ImageFileDirectory_v2.__contains__
__setitem__
ImageFileDirectory_v2.__setitem__
ImageFileDirectory_v2._setitem
__delitem__
ImageFileDirectory_v2.__delitem__
__iter__
ImageFileDirectory_v2.__iter__
ImageFileDirectory_v2._unpack
ImageFileDirectory_v2._pack
_register_loader
ImageFileDirectory_v2._register_loader
_register_writer
ImageFileDirectory_v2._register_writer
_register_basic
ImageFileDirectory_v2._register_basic
list
map
short
long
SIGNED_BYTE
b
signed byte
signed short
signed long
FLOAT
float
d
double
IFD
LONG8
long8
load_byte
ImageFileDirectory_v2.load_byte
write_byte
ImageFileDirectory_v2.write_byte
(2, 1)
load_string
ImageFileDirectory_v2.load_string
write_string
ImageFileDirectory_v2.write_string
(5, 8)
load_rational
ImageFileDirectory_v2.load_rational
(5,)
write_rational
ImageFileDirectory_v2.write_rational
(7, 1)
load_undefined
ImageFileDirectory_v2.load_undefined
(7,)
write_undefined
ImageFileDirectory_v2.write_undefined
(10, 8)
load_signed_rational
ImageFileDirectory_v2.load_signed_rational
(10,)
write_signed_rational
ImageFileDirectory_v2.write_signed_rational
ImageFileDirectory_v2._ensure_read
ImageFileDirectory_v2.load
ImageFileDirectory_v2.tobytes
ImageFileDirectory_v2.save
(' ', '_')
load_
write_
This class represents the **legacy** interface to a TIFF tag directory.

    Exposes a dictionary interface of the tags in the directory::

        ifd = ImageFileDirectory_v1()
        ifd[key] = 'Some Data'
        ifd.tagtype[key] = TiffTags.ASCII
        print(ifd[key])
        ('Some Data',)

    Also contains a dictionary of tag types as read from the tiff image file,
    :attr:`~PIL.TiffImagePlugin.ImageFileDirectory_v1.tagtype`.

    Values are returned as a tuple.

    ..  deprecated:: 3.0.0
    
__annotations__
ImageFileDirectory_v1.__init__
ImageFileDirectory_v1.<lambda>
tags
tagdata
dict
classmethod
ImageFileDirectory_v1.from_v2
ImageFileDirectory_v1.to_v2
ImageFileDirectory_v1.__contains__
ImageFileDirectory_v1.__len__
ImageFileDirectory_v1.__iter__
ImageFileDirectory_v1.__setitem__
ImageFileDirectory_v1.__getitem__
ImageFileDirectory
TiffImageFile
TIFF
format
Adobe TIFF
format_description
(None, None)
TiffImageFile.__init__
_open
TiffImageFile._open
TiffImageFile.n_frames
TiffImageFile.seek
TiffImageFile._seek
TiffImageFile.tell
getxmp
TiffImageFile.getxmp
get_photoshop_blocks
TiffImageFile.get_photoshop_blocks
TiffImageFile.load
TiffImageFile.load_end
TiffImageFile._load_libtiff
TiffImageFile._setup
LA
I
I;32S
I;16S
F
F;32F
RGBX
RGBA
CMYK
LAB
I;32BS
I;16B
I;16BS
F;32BF
[0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 4, 2, 4, 8]
{288, 324, 519, 520, 521, 273}
(False,)
AppendingTiffWriter.__init__
AppendingTiffWriter.setup
AppendingTiffWriter.finalize
AppendingTiffWriter.newFrame
AppendingTiffWriter.__enter__
AppendingTiffWriter.__exit__
AppendingTiffWriter.tell
AppendingTiffWriter.seek
AppendingTiffWriter.goToEnd
AppendingTiffWriter.setEndian
AppendingTiffWriter.skipIFDs
AppendingTiffWriter.write
AppendingTiffWriter.readShort
AppendingTiffWriter.readLong
AppendingTiffWriter.rewriteLastShortToLong
AppendingTiffWriter.rewriteLastShort
AppendingTiffWriter.rewriteLastLong
AppendingTiffWriter.writeShort
AppendingTiffWriter.writeLong
AppendingTiffWriter.close
AppendingTiffWriter.fixIFD
(False, False)
AppendingTiffWriter.fixOffsets
_save_all
register_open
register_save
register_save_all
register_extensions
.tif
.tiff
register_mime
image/tiff
PIL\TiffImagePlugin.py
('.0', 'frac', 'self')
('.0', 'key_tp')
('.0', 'num', 'denom', 'combine')
('.0', 'v')
('.0', 'value', 'info')
('.0', 'value', 'self', 'fmt')
('fmt',)
('self',)
('self', 'data', 'legacy_api', 'size', 'fmt')
('fmt', 'size')
('self', 'values')
<module PIL.TiffImagePlugin>
('__class__',)
('self', 'tag')
('self', 'other', 'val')
('self', 'exc_type', 'exc_value', 'traceback')
('self', 'tag', 'data', 'typ', 'size', 'handler', 'legacy', 'val')
('self', 'tag', 'data', 'typ', 'size', 'handler', 'val')
('self', 'args', 'kwargs', '__class__')
('self', 'fn', 'new')
('self', 'fp', 'filename', '__class__')
('self', 'ifh', 'prefix', 'group', 'msg')
('self', 'value', 'denominator')
('self', 'tag', 'value')
('self', 'tag', 'value', 'legacy_api')
('self', 'state', '_val', '_numerator', '_denominator')
('op', 'delegate')
('self', 'fp', 'size', 'ret', 'msg')
('val', 'max_val', 'inv', 'n_d')
('val', 'max_val', 'min_val', 'frac', 'n_d')
('self', 'msg', 'extents', 'args', 'fp', 'decoder', 'e', 'close_self_fp', 'n', 'err')
('self', 'ifh')
('self', 'fmt', 'values')
('idx_fmt_name', 'TYPES', 'idx', 'fmt', 'name', 'size')
('idx', 'size', 'decorator')
('idx', 'decorator')
('im', 'fp', 'filename', 'rawmode', 'prefix', 'photo', 'format', 'bits', 'extra', 'e', 'msg', 'ifd', 'encoderinfo', 'encoderconfig', 'compression', 'libtiff', 'info', 'exif', 'key', 'icc', 'name', 'dpi', 'inverted_im', 'px', 'y', 'x', 'lut', 'colormap', 'colors', 'i', 'stride', 'im_strip_size', 'rows_per_strip', 'strip_byte_counts', 'strips_per_image', 'tag', 'value', 'blocklist', 'quality', '_fp', 'types', 'atts', 'legacy_ifd', 'supplied_tags', 'type', 'tags', 'a', 'errcode', 'data', 'offset')
('im', 'fp', 'filename', 'encoderinfo', 'encoderconfig', 'append_images', 'cur_idx', 'tf', 'ims', 'nfr', 'idx')
('self', 'frame', 'msg')
('self', 'tag', 'value', 'legacy_api', 'basetypes', 'info', 'values', 'is_ifd', 'dest')
('self', 'msg', 'photo', 'fillorder', 'xsize', 'ysize', 'sample_format', 'bps_tuple', 'extra_tuple', 'bps_count', 'bps_actual_count', 'samples_per_pixel', 'key', 'rawmode', 'e', 'xres', 'yres', 'resunit', 'x', 'y', 'layer', 'a', 'offsets', 'h', 'w', 'offset', 'stride', 'tile_rawmode', 'palette')
('self', 'fmt', 'data')
('a', 'b', 'legacy_api')
('legacy_api',)
('func', 'TYPES', 'idx', 'size')
('idx', 'size')
('func', 'idx')
('idx',)
('self', 'args', 'op')
('op',)
('self', 'iimm', 'msg', 'ifd_offset')
('self', 'num_tags', 'i', 'tag', 'field_type', 'count', 'field_size', 'total_size', 'is_local', 'offset', 'cur_pos')
('self', 'count', 'isShort', 'isLong', 'msg', 'i', 'offset')
('cls', 'original', 'ifd')
('self', 'blocks', 'val', 'id', 'n', 'size', 'data')
('self', 'pos', 'pad_bytes')
('self', 'value', 'msg')
('self', 'max_denominator', 'f')
('self', '__class__')
('self', 'fp', 'tag_count', 'i', 'tag', 'typ', 'count', 'data', 'tagname', 'typname', 'msg', 'unit_size', 'handler', 'size', 'here', 'offset')
('self', 'data', 'legacy_api')
('self', 'method', 'exif', 'key')
('self', 'data', 'legacy_api', 'vals', 'combine')
('self', 'current')
('self', 'value')
('self', 'value', 'bytes_written', 'msg')
('self', 'fp', 'offset', 'result')
('self', 'frame')
('self', 'offset', 'whence')
('self', 'endian')
('self', 'iimm', 'msg')
('self', 'ifd_offset', 'num_tags')
('self', 'ifd')
('self', 'offset', 'result', 'entries', 'stripoffsets', 'tag', 'value', 'typ', 'is_ifd', 'ifh', 'ifd', 'values', 'ifd_tag', 'ifd_value', 'data', 'tagname', 'typname', 'msg', 'count')
('self', 'data')

------------------------------ [modulecode_PIL.TiffTags] ------------------------------
__class__
__new__
enum
get
TAGS_V2_GROUPS
TAGS_V2
TagInfo
tag
TAGS
unknown

    :param tag: Integer tag number
    :param group: Which :py:data:`~PIL.TiffTags.TAGS_V2_GROUPS` to look in

    .. versionadded:: 8.3.0

    :returns: Taginfo namedtuple, From the ``TAGS_V2`` info if possible,
        otherwise just populating the value and name from ``TAGS``.
        If the tag is not recognized, "unknown" is returned for the name

    
items
too many values to unpack (expected 2)
0
3
tags
__doc__
__file__
__spec__
origin
has_location
__cached__
collections
('namedtuple',)
namedtuple
('_TagInfo', 'value name type length enum')
__prepare__
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.TiffTags
__module__
__qualname__
__slots__
(None, 'unknown', None, None, None)
TagInfo.__new__
cvt_enum
TagInfo.cvt_enum
__orig_bases__
(None,)
lookup
1
BYTE
2
ASCII
SHORT
4
LONG
5
RATIONAL
6
SIGNED_BYTE
7
UNDEFINED
8
SIGNED_SHORT
9
SIGNED_LONG
10
SIGNED_RATIONAL
11
FLOAT
12
DOUBLE
13
IFD
16
LONG8
254
NewSubfileType
255
SubfileType
256
ImageWidth
257
ImageLength
258
BitsPerSample
259
Compression
{'Uncompressed': 1, 'CCITT 1d': 2, 'Group 3 Fax': 3, 'Group 4 Fax': 4, 'LZW': 5, 'JPEG': 6, 'PackBits': 32773}
262
PhotometricInterpretation
{'WhiteIsZero': 0, 'BlackIsZero': 1, 'RGB': 2, 'RGB Palette': 3, 'Transparency Mask': 4, 'CMYK': 5, 'YCbCr': 6, 'CieLAB': 8, 'CFA': 32803, 'LinearRaw': 32892}
263
Threshholding
264
CellWidth
265
CellLength
266
FillOrder
269
DocumentName
270
ImageDescription
271
Make
272
Model
273
StripOffsets
274
Orientation
277
SamplesPerPixel
278
RowsPerStrip
279
StripByteCounts
280
MinSampleValue
281
MaxSampleValue
282
XResolution
283
YResolution
284
PlanarConfiguration
{'Contiguous': 1, 'Separate': 2}
285
PageName
286
XPosition
287
YPosition
288
FreeOffsets
289
FreeByteCounts
290
GrayResponseUnit
291
GrayResponseCurve
292
T4Options
293
T6Options
296
ResolutionUnit
{'none': 1, 'inch': 2, 'cm': 3}
297
PageNumber
301
TransferFunction
305
Software
306
DateTime
315
Artist
316
HostComputer
317
Predictor
{'none': 1, 'Horizontal Differencing': 2}
318
WhitePoint
319
PrimaryChromaticities
320
ColorMap
321
HalftoneHints
322
TileWidth
323
TileLength
324
TileOffsets
325
TileByteCounts
330
SubIFDs
332
InkSet
333
InkNames
334
NumberOfInks
336
DotRange
337
TargetPrinter
338
ExtraSamples
339
SampleFormat
340
SMinSampleValue
341
SMaxSampleValue
342
TransferRange
347
JPEGTables
512
JPEGProc
513
JPEGInterchangeFormat
514
JPEGInterchangeFormatLength
515
JPEGRestartInterval
517
JPEGLosslessPredictors
518
JPEGPointTransforms
519
JPEGQTables
520
JPEGDCTables
521
JPEGACTables
529
YCbCrCoefficients
530
YCbCrSubSampling
531
YCbCrPositioning
532
ReferenceBlackWhite
700
XMP
33432
Copyright
33723
IptcNaaInfo
34377
PhotoshopInfo
34665
ExifIFD
34675
ICCProfile
34853
GPSInfoIFD
36864
ExifVersion
37724
ImageSourceData
40965
InteroperabilityIFD
41730
CFAPattern
45056
MPFVersion
45057
NumberOfImages
45058
MPEntry
45059
ImageUIDList
45060
TotalFrames
45313
MPIndividualNum
45569
PanOrientation
45570
PanOverlap_H
45571
PanOverlap_V
45572
BaseViewpointNum
45573
ConvergenceAngle
45574
BaselineLength
45575
VerticalDivergence
45576
AxisDistance_X
45577
AxisDistance_Y
45578
AxisDistance_Z
45579
YawAngle
45580
PitchAngle
45581
RollAngle
40960
FlashPixVersion
50741
MakerNoteSafety
{'Unsafe': 0, 'Safe': 1}
50780
BestQualityScale
50838
ImageJMetaDataByteCounts
50839
ImageJMetaData
GPSVersionID
GPSLatitudeRef
GPSLatitude
GPSLongitudeRef
GPSLongitude
GPSAltitudeRef
GPSAltitude
GPSTimeStamp
GPSSatellites
GPSStatus
GPSMeasureMode
GPSDOP
GPSSpeedRef
GPSSpeed
14
GPSTrackRef
15
GPSTrack
GPSImgDirectionRef
17
GPSImgDirection
18
GPSMapDatum
19
GPSDestLatitudeRef
20
GPSDestLatitude
21
GPSDestLongitudeRef
22
GPSDestLongitude
23
GPSDestBearingRef
24
GPSDestBearing
25
GPSDestDistanceRef
26
GPSDestDistance
27
GPSProcessingMethod
28
GPSAreaInformation
29
GPSDateStamp
30
GPSDifferential
InteropIndex
InteropVersion
{347: 'JPEGTables', 700: 'XMP', 32932: 'Wang Annotation', 33434: 'ExposureTime', 33437: 'FNumber', 33445: 'MD FileTag', 33446: 'MD ScalePixel', 33447: 'MD ColorTable', 33448: 'MD LabName', 33449: 'MD SampleInfo', 33450: 'MD PrepDate', 33451: 'MD PrepTime', 33452: 'MD FileUnits', 33550: 'ModelPixelScaleTag', 33723: 'IptcNaaInfo', 33918: 'INGR Packet Data Tag', 33919: 'INGR Flag Registers', 33920: 'IrasB Transformation Matrix', 33922: 'ModelTiepointTag', 34264: 'ModelTransformationTag', 34377: 'PhotoshopInfo', 34735: 'GeoKeyDirectoryTag', 34736: 'GeoDoubleParamsTag', 34737: 'GeoAsciiParamsTag', 34850: 'ExposureProgram', 34852: 'SpectralSensitivity', 34855: 'ISOSpeedRatings', 34856: 'OECF', 34864: 'SensitivityType', 34865: 'StandardOutputSensitivity', 34866: 'RecommendedExposureIndex', 34867: 'ISOSpeed', 34868: 'ISOSpeedLatitudeyyy', 34869: 'ISOSpeedLatitudezzz', 34908: 'HylaFAX FaxRecvParams', 34909: 'HylaFAX FaxSubAddress', 34910: 'HylaFAX FaxRecvTime', 36864: 'ExifVersion', 36867: 'DateTimeOriginal', 36868: 'DateTimeDigitized', 37121: 'ComponentsConfiguration', 37122: 'CompressedBitsPerPixel', 37724: 'ImageSourceData', 37377: 'ShutterSpeedValue', 37378: 'ApertureValue', 37379: 'BrightnessValue', 37380: 'ExposureBiasValue', 37381: 'MaxApertureValue', 37382: 'SubjectDistance', 37383: 'MeteringMode', 37384: 'LightSource', 37385: 'Flash', 37386: 'FocalLength', 37396: 'SubjectArea', 37500: 'MakerNote', 37510: 'UserComment', 37520: 'SubSec', 37521: 'SubSecTimeOriginal', 37522: 'SubsecTimeDigitized', 40960: 'FlashPixVersion', 40961: 'ColorSpace', 40962: 'PixelXDimension', 40963: 'PixelYDimension', 40964: 'RelatedSoundFile', 40965: 'InteroperabilityIFD', 41483: 'FlashEnergy', 41484: 'SpatialFrequencyResponse', 41486: 'FocalPlaneXResolution', 41487: 'FocalPlaneYResolution', 41488: 'FocalPlaneResolutionUnit', 41492: 'SubjectLocation', 41493: 'ExposureIndex', 41495: 'SensingMethod', 41728: 'FileSource', 41729: 'SceneType', 41730: 'CFAPattern', 41985: 'CustomRendered', 41986: 'ExposureMode', 41987: 'WhiteBalance', 41988: 'DigitalZoomRatio', 41989: 'FocalLengthIn35mmFilm', 41990: 'SceneCaptureType', 41991: 'GainControl', 41992: 'Contrast', 41993: 'Saturation', 41994: 'Sharpness', 41995: 'DeviceSettingDescription', 41996: 'SubjectDistanceRange', 42016: 'ImageUniqueID', 42032: 'CameraOwnerName', 42033: 'BodySerialNumber', 42034: 'LensSpecification', 42035: 'LensMake', 42036: 'LensModel', 42037: 'LensSerialNumber', 42112: 'GDAL_METADATA', 42113: 'GDAL_NODATA', 42240: 'Gamma', 50215: 'Oce Scanjob Description', 50216: 'Oce Application Selector', 50217: 'Oce Identification Number', 50218: 'Oce ImageLogic Characteristics', 50706: 'DNGVersion', 50707: 'DNGBackwardVersion', 50708: 'UniqueCameraModel', 50709: 'LocalizedCameraModel', 50710: 'CFAPlaneColor', 50711: 'CFALayout', 50712: 'LinearizationTable', 50713: 'BlackLevelRepeatDim', 50714: 'BlackLevel', 50715: 'BlackLevelDeltaH', 50716: 'BlackLevelDeltaV', 50717: 'WhiteLevel', 50718: 'DefaultScale', 50719: 'DefaultCropOrigin', 50720: 'DefaultCropSize', 50721: 'ColorMatrix1', 50722: 'ColorMatrix2', 50723: 'CameraCalibration1', 50724: 'CameraCalibration2', 50725: 'ReductionMatrix1', 50726: 'ReductionMatrix2', 50727: 'AnalogBalance', 50728: 'AsShotNeutral', 50729: 'AsShotWhiteXY', 50730: 'BaselineExposure', 50731: 'BaselineNoise', 50732: 'BaselineSharpness', 50733: 'BayerGreenSplit', 50734: 'LinearResponseLimit', 50735: 'CameraSerialNumber', 50736: 'LensInfo', 50737: 'ChromaBlurRadius', 50738: 'AntiAliasStrength', 50740: 'DNGPrivateData', 50778: 'CalibrationIlluminant1', 50779: 'CalibrationIlluminant2', 50784: 'Alias Layer Metadata'}
_populate
TYPES
{256, 257, 258, 259, 65537, 262, 263, 266, 269, 274, 531, 530, 277, 278, 532, 280, 281, 282, 283, 284, 286, 287, 296, 297, 301, 320, 321, 322, 323, 330, 333, 338, 339, 340, 341, 32995, 32996, 32997, 32998, 255}
LIBTIFF_CORE
remove
(255,)
(322,)
(323,)
(333,)
PIL\TiffTags.py
<module PIL.TiffTags>
('__class__',)
('cls', 'value', 'name', 'type', 'length', 'enum', '__class__')
('k', 'v', 'sk', 'sv', 'group', 'tags')
('self', 'value')
('tag', 'group', 'info')


------------------------------ [modulecode_PIL.WebPImagePlugin] ------------------------------
[None, 4, None]
b'RIFF'
[8, 12, None]
b'WEBP'
[12, 16, None]
_VP8_MODES_BY_IDENTIFIER
SUPPORTED
image file could not be identified because WEBP support not installed
_webp
HAVE_WEBPANIM
WebPDecode
fp
read
too many values to unpack (expected 6)
mode
info
icc_profile
exif
_size
BytesIO
raw
(0, 0)
size
0
tile
1
n_frames
is_animated
WebPAnimDecoder
_decoder
get_info
loop
24
255
16
8
too many values to unpack (expected 4)
background
RGBX
RGB
rawmode
get_chunk
('ICCP',)
('EXIF',)
('XMP ',)
xmp
_reset
(False,)
('reset',)
getexif
_get_merged_dict
_getxmp

        Returns a dictionary containing the XMP tags.
        Requires defusedxml to be installed.

        :returns: XMP tags in a dictionary.
        
_seek_check
_WebPImageFile__logical_frame
reset
self
_WebPImageFile__physical_frame
-1
_WebPImageFile__loaded
_WebPImageFile__timestamp
get_next
seek
(0,)
failed to decode next frame in WebP file
too many values to unpack (expected 2)
_get_next
_seek
too many values to unpack (expected 3)
timestamp
duration
_exclusive_fp
close
__class__
load
tell
encoderinfo
copy
get
append_images
total
_save
(0, 0, 0, 0)
getpalette
3
('duration', 0)
('loop', 0)
('minimize_size', False)
('kmin', None)
('kmax', None)
('allow_mixed', False)
('lossless', False)
('quality', 80)
('method', 0)
('icc_profile',)

('exif', '')
Image
Exif
tobytes
('xmp', '')
9
17
5
(<class 'list'>, <class 'tuple'>)
Background color is not an RGBA tuple clamped to (0-255): 
WebPAnimEncoder
ims
_VALID_WEBP_MODES
A
a
P
im
getpalettemode
RGBA
convert
enc
add
round
lossless
quality
method
frame_idx
assemble
cannot write file as WebP (encoder returned None)
write
256
<genexpr>
_save_all.<locals>.<genexpr>
('exif', b'')
startswith
(b'Exif\x00\x00',)
[6, None, None]
('method', 4)
('exact',)
_VALID_WEBP_LEGACY_MODES
transparency
WebPEncode
__doc__
__file__
__spec__
origin
has_location
__cached__
('Image', 'ImageFile')
ImageFile
('_webp',)
{'RGBX': True, 'RGBA': True, 'RGB': True}
{'RGB': True, 'RGBA': True}
{b'VP8 ': 'RGB', b'VP8X': 'RGBA', b'VP8L': 'RGBA'}
_accept
__prepare__
WebPImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.WebPImagePlugin
__module__
__qualname__
WEBP
format
WebP image
format_description
_open
WebPImageFile._open
_getexif
WebPImageFile._getexif
getxmp
WebPImageFile.getxmp
WebPImageFile.seek
(True,)
WebPImageFile._reset
WebPImageFile._get_next
WebPImageFile._seek
WebPImageFile.load
WebPImageFile.tell
__orig_bases__
_save_all
register_open
register_save
register_save_all
register_extension
.webp
register_mime
image/webp
PIL\WebPImagePlugin.py
('.0', 'v')
<module PIL.WebPImagePlugin>
('__class__',)
('prefix', 'is_riff_file_format', 'is_webp_file', 'is_valid_vp8_mode')
('self', 'ret', 'msg', 'data', 'timestamp', 'duration')
('self',)
('self', 'data', 'width', 'height', 'icc_profile', 'exif', 'loop_count', 'bgcolor', 'frame_count', 'mode', 'bg_a', 'bg_r', 'bg_g', 'bg_b', 'xmp')
('self', 'reset')
('im', 'fp', 'filename', 'lossless', 'quality', 'icc_profile', 'exif', 'xmp', 'method', 'exact', 'alpha', 'data', 'msg')
('im', 'fp', 'filename', 'encoderinfo', 'append_images', 'total', 'ims', 'background', 'palette', 'r', 'g', 'b', 'duration', 'loop', 'minimize_size', 'kmin', 'kmax', 'allow_mixed', 'verbose', 'lossless', 'quality', 'method', 'icc_profile', 'exif', 'xmp', 'msg', 'bg_r', 'bg_g', 'bg_b', 'bg_a', 'enc', 'frame_idx', 'timestamp', 'cur_idx', 'nfr', 'idx', 'frame', 'rawmode', 'alpha', 'data')
('self', 'frame')
('self', 'data', 'timestamp', 'duration', '__class__')
('self', '__class__')

------------------------------ [modulecode_PIL.WmfImagePlugin] ------------------------------
_handler

    Install application-specific WMF image handler.

    :param handler: Handler object.
    
RGB
mode
info
wmf_bbox
bbox
fp
seek
(0,)
Image
frombytes
size
core
drawwmf
read
raw
BGR
0
3
-4
-1
[None, 6, None]
b'\xd7\xcd\xc6\x9a\x00\x00'
[None, 4, None]
b'\x01\x00\x00\x00'
_inch
(80,)
word
14
short
6
8
10
12
72
dpi
[22, 26, None]
b'\x01\x00\t\x00'
Unsupported WMF file format
[40, 44, None]
b' EMF'
_long
16
20
24
28
32
36
2540.0
2
1
Unsupported file format
_size
_load
open
self
too many values to unpack (expected 4)
__class__
load
save
WMF save handler not installed
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile')
ImageFile
_binary
('i16le',)
i16le
('si16le',)
si16le
('si32le',)
si32le
register_handler
PIL.WmfImagePlugin
__module__
WmfHandler
__qualname__
WmfHandler.open
WmfHandler.load
()
_accept
StubImageFile
__prepare__
WmfStubImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
WMF
format
Windows Metafile
format_description
_open
WmfStubImageFile._open
WmfStubImageFile._load
(None,)
WmfStubImageFile.load
__orig_bases__
_save
register_open
register_save
register_extensions
.wmf
.emf
PIL\WmfImagePlugin.py
<module PIL.WmfImagePlugin>
('__class__',)
('prefix',)
('self',)
('self', 's', 'x0', 'y0', 'x1', 'y1', 'size', 'msg', 'frame', 'xdpi', 'ydpi', 'loader')
('im', 'fp', 'filename', 'msg')
('self', 'dpi', 'x0', 'y0', 'x1', 'y1', '__class__')
('self', 'im')
('handler',)

------------------------------ [modulecode_PIL.XVThumbImagePlugin] ------------------------------
[None, 6, None]
_MAGIC
_accept
fp
read
(6,)
not an XV thumbnail file
readline
self
Unexpected EOF reading XV thumbnail file
0
35
strip
split
P
mode
1
_size
ImagePalette
raw
RGB
PALETTE
palette
(0, 0)
size
tell
tile
__doc__
__file__
__spec__
origin
has_location
__cached__

('Image', 'ImageFile', 'ImagePalette')
Image
ImageFile
_binary
('o8',)
o8
b'P7 332'
b''
(0, 8, 1)
r
g
(0, 4, 1)
b
255
7
3
__prepare__
XVThumbImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.XVThumbImagePlugin
__module__
__qualname__
XVThumb
format
XV thumbnail image
format_description
_open
XVThumbImageFile._open
__orig_bases__
register_open
PIL\XVThumbImagePlugin.py
<module PIL.XVThumbImagePlugin>
('__class__',)
('prefix',)
('self', 'msg', 's')

------------------------------ [modulecode_PIL.XbmImagePlugin] ------------------------------
lstrip
[None, 7, None]
b'#define'
xbm_head
match
fp
read
(512,)
not a XBM file
group
('width',)
('height',)
('hotspot',)
('xhot',)
('yhot',)
info
hotspot
1
mode
_size
xbm
(0, 0)
size
end
tile
cannot write mode 

 as XBM
write
#define im_width 
0


ascii
#define im_height 
1
encoderinfo
get
#define im_x_hot 
#define im_y_hot 
(b'static char im_bits[] = {\n',)
ImageFile
_save
(b'};\n',)
__doc__
__file__
__spec__
origin
has_location
__cached__
re
('Image', 'ImageFile')
Image
compile
(b'\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[]',)
_accept
__prepare__
XbmImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.XbmImagePlugin
__module__
__qualname__
XBM
format
X11 Bitmap
format_description
_open
XbmImageFile._open
__orig_bases__
register_open
register_save
register_extension
.xbm
register_mime
image/xbm
PIL\XbmImagePlugin.py
<module PIL.XbmImagePlugin>
('__class__',)
('prefix',)
('self', 'm', 'msg', 'xsize', 'ysize')
('im', 'fp', 'filename', 'msg', 'hotspot')

------------------------------ [modulecode_PIL.XpmImagePlugin] ------------------------------
[None, 9, None]
b'/* XPM */'
_accept
fp
read
(9,)
not an XPM file
self
readline
broken XPM file
xpm_head
match
group
(1,)
(2,)
_size
(3,)
(4,)
256
1
cannot read this XPM file
b'\x00\x00\x00'
[-2, None, None]
b'\r\n'
[None, -2, None]
[-1, None, None]
[None, -1, None]
[2, -2, None]
split
0
2
b'c'
b'None'
info
transparency
[None, 1, None]
b'#'
[1, None, None]
16
o8
255
8
palette
P
mode
ImagePalette
raw
RGB
b''
(0, 0)
size
tell
('P', 0, 1)
tile
too many values to unpack (expected 2)
xsize
ljust
s
__doc__
__file__
__spec__
origin
has_location
__cached__
re

('Image', 'ImageFile', 'ImagePalette')
Image
ImageFile
_binary
('o8',)
compile
(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)',)
__prepare__
XpmImageFile
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL.XpmImagePlugin
__module__
__qualname__
XPM
format
X11 Pixel Map
format_description
_open
XpmImageFile._open
load_read
XpmImageFile.load_read
__orig_bases__
register_open
register_extension
.xpm
register_mime
image/xpm
PIL\XpmImagePlugin.py
<module PIL.XpmImagePlugin>
('__class__',)
('prefix',)
('self', 'msg', 's', 'm', 'pal', 'bpp', 'palette', '_', 'c', 'i', 'rgb')
('self', 'bytes', 'xsize', 'ysize', 's', 'i')

------------------------------ [modulecode_PIL._binary] ------------------------------
0
255
unpack_from
<H

    Converts a 2-bytes (16 bits) string to an unsigned integer.

    :param c: string containing bytes to convert
    :param o: offset of bytes to convert in string
    
<h

    Converts a 2-bytes (16 bits) string to a signed integer.

    :param c: string containing bytes to convert
    :param o: offset of bytes to convert in string
    
>h

    Converts a 2-bytes (16 bits) string to a signed integer, big endian.

    :param c: string containing bytes to convert
    :param o: offset of bytes to convert in string
    
<I

    Converts a 4-bytes (32 bits) string to an unsigned integer.

    :param c: string containing bytes to convert
    :param o: offset of bytes to convert in string
    
<i

    Converts a 4-bytes (32 bits) string to a signed integer.

    :param c: string containing bytes to convert
    :param o: offset of bytes to convert in string
    
>H
>I
pack
Binary input/output support routines.
__doc__
__file__
__spec__
origin
has_location
__cached__
struct
('pack', 'unpack_from')
i8
o8
(0,)
i16le
si16le
si16be
i32le
si32le
i16be
i32be
o16le
o32le
o16be
o32be
PIL\_binary.py
<module PIL._binary>
('c', 'o')
('c',)
('i',)


------------------------------ [modulecode_PIL._deprecate] ------------------------------
are
is
a future version
__version__
split
('.',)
0

 
 deprecated and should be removed.
11
Pillow 11 (2024-10-15)
Unknown removal version: 
. Update PIL._deprecate?
Use only one of 'replacement' and 'action'
. Use 
 instead.
. 
rstrip
.
warnings
warn
 deprecated and will be removed in 
DeprecationWarning
{'stacklevel': 3}

    Deprecations helper.

    :param deprecated: Name of thing to be deprecated.
    :param when: Pillow major version to be removed in.
    :param replacement: Name of replacement.
    :param action: Instead of "replacement", give a custom call to action
        e.g. "Upgrade to new thing".
    :param plural: if the deprecated thing is plural, needing "are" instead of "is".

    Usually of the form:

        "[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).
        Use [replacement] instead."

    You can leave out the replacement sentence:

        "[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd)"

    Or with another call to action:

        "[deprecated] is deprecated and will be removed in Pillow [when] (yyyy-mm-dd).
        [action]."
    
__doc__
__file__
__spec__
origin
has_location
__cached__
annotations
('__version__',)
1
(None,)
{'action': None, 'plural': False}
{'deprecated': 'str', 'when': 'int | None', 'replacement': 'str | None', 'action': 'str | None', 'plural': 'bool', 'return': 'None'}
deprecate
PIL\_deprecate.py
<module PIL._deprecate>
('deprecated', 'when', 'replacement', 'action', 'plural', 'is_', 'removed', 'msg')

------------------------------ [modulecode_PIL._tkinter_finder] ------------------------------
 Find compiled module linking to Tcl / Tk libraries

__doc__
__file__
__spec__
origin
has_location
__cached__
sys
tkinter
0
('_tkinter',)
_tkinter
tk
pypy_find_executable
tklib_cffi
TKINTER_LIB
TkVersion
tk_version
PIL\_tkinter_finder.py
<module PIL._tkinter_finder>


------------------------------ [modulecode_PIL._util] ------------------------------
Path
is_path
Checks if an object is a string, and that it points to a directory.
ex
__doc__
__file__
__spec__
origin
has_location
__cached__
os
pathlib
('Path',)
0
is_directory
PIL._util
__module__
DeferredError
__qualname__
__init__
DeferredError.__init__
__getattr__
DeferredError.__getattr__
()
PIL\_util.py
<module PIL._util>
('self', 'elt')
('self', 'ex')
('f',)


------------------------------ [modulecode_PIL._version] ------------------------------
__doc__
__file__
__spec__
origin
has_location
__cached__
10.0.0
__version__
PIL\_version.py
<module PIL._version>


------------------------------ [modulecode_PIL] ------------------------------
Pillow (Fork of the Python Imaging Library)

Pillow is the friendly PIL fork by Jeffrey A. Clark (Alex) and contributors.
    https://github.com/python-pillow/Pillow/

Pillow is forked from PIL 1.1.7.

PIL is the Python Imaging Library by Fredrik Lundh and contributors.
Copyright (c) 1999 by Secret Labs AB.

Use PIL.__version__ for this Pillow version.

;-)

__doc__
__file__
path
dirname
environ
get
('NUITKA_PACKAGE_PIL', '\\not_existing')
__path__
__spec__
origin
has_location
submodule_search_locations
__cached__

('_version',)
1
_version
0
__version__
['BlpImagePlugin', 'BmpImagePlugin', 'BufrStubImagePlugin', 'CurImagePlugin', 'DcxImagePlugin', 'DdsImagePlugin', 'EpsImagePlugin', 'FitsImagePlugin', 'FliImagePlugin', 'FpxImagePlugin', 'FtexImagePlugin', 'GbrImagePlugin', 'GifImagePlugin', 'GribStubImagePlugin', 'Hdf5StubImagePlugin', 'IcnsImagePlugin', 'IcoImagePlugin', 'ImImagePlugin', 'ImtImagePlugin', 'IptcImagePlugin', 'JpegImagePlugin', 'Jpeg2KImagePlugin', 'McIdasImagePlugin', 'MicImagePlugin', 'MpegImagePlugin', 'MpoImagePlugin', 'MspImagePlugin', 'PalmImagePlugin', 'PcdImagePlugin', 'PcxImagePlugin', 'PdfImagePlugin', 'PixarImagePlugin', 'PngImagePlugin', 'PpmImagePlugin', 'PsdImagePlugin', 'QoiImagePlugin', 'SgiImagePlugin', 'SpiderImagePlugin', 'SunImagePlugin', 'TgaImagePlugin', 'TiffImagePlugin', 'WebPImagePlugin', 'WmfImagePlugin', 'XbmImagePlugin', 'XpmImagePlugin', 'XVThumbImagePlugin']
_plugins
(None,)
__prepare__
UnidentifiedImageError
__getitem__
%s.__prepare__() must return a mapping, not %s
__name__
<metaclass>
PIL
__module__

    Raised in :py:meth:`PIL.Image.open` if an image cannot be opened and identified.

    If a PNG image raises this error, setting :data:`.ImageFile.LOAD_TRUNCATED_IMAGES`
    to true may allow the image to be opened after all. The setting will ignore missing
    data and checksum failures.
    
__qualname__
__orig_bases__
PIL\__init__.py
<module PIL>

------------------------------ [modulecode_PIL.features] ------------------------------
modules
Unknown module 

too many values to unpack (expected 2)
warnings
warn

    Checks if a module is available.

    :param feature: The module to check for.
    :returns: ``True`` if available, ``False`` otherwise.
    :raises ValueError: If the module is not defined in this version of Pillow.
    
check_module

    :param feature: The module to check for.
    :returns:
        The loaded version number as a string, or ``None`` if unknown or not available.
    :raises ValueError: If the module is not defined in this version of Pillow.
    

    :returns: A list of all supported modules.
    
codecs
Unknown codec 
_encoder
Image
core

    Checks if a codec is available.

    :param feature: The codec to check for.
    :returns: ``True`` if available, ``False`` otherwise.
    :raises ValueError: If the codec is not defined in this version of Pillow.
    
check_codec
_version
libtiff
split
('\n',)
0
('Version ',)
1

    :param feature: The codec to check for.
    :returns:
        The version number as a string, or ``None`` if not available.
        Checked at compile time for ``jpg``, run-time otherwise.
    :raises ValueError: If the codec is not defined in this version of Pillow.
    

    :returns: A list of all supported codecs.
    
features
Unknown feature 
too many values to unpack (expected 3)
PIL

    Checks if a feature is available.

    :param feature: The feature to check for.
    :returns: ``True`` if available, ``False`` if unavailable, ``None`` if unknown.
    :raises ValueError: If the feature is not defined in this version of Pillow.
    
check_feature

    :param feature: The feature to check for.
    :returns: The version number as a string, or ``None`` if not available.
    :raises ValueError: If the feature is not defined in this version of Pillow.
    

    :returns: A list of all supported features.
    
Unknown feature '
'.
{'stacklevel': 2}

    :param feature: A module, codec, or feature name.
    :returns:
        ``True`` if the module, codec, or feature is available,
        ``False`` or ``None`` otherwise.
    
version_module
version_codec
version_feature

    :param feature:
        The module, codec, or feature to check for.
    :returns:
        The version number as a string, or ``None`` if unknown or not available.
    
get_supported_modules
extend
get_supported_features
get_supported_codecs

    :returns: A list of all supported modules, features, and codecs.
    
init
print
('--------------------------------------------------------------------',)
('file',)
Pillow 
__version__
3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
Python 
strip
[1, None, None]
       
Python modules loaded from 
dirname
__file__
Binary modules loaded from 
(('pil', 'PIL CORE'), ('tkinter', 'TKINTER'), ('freetype2', 'FREETYPE2'), ('littlecms2', 'LITTLECMS2'), ('webp', 'WEBP'), ('transp_webp', 'WEBP Transparency'), ('webp_mux', 'WEBPMUX'), ('webp_anim', 'WEBP Animation'), ('jpg', 'JPEG'), ('jpg_2000', 'OPENJPEG (JPEG2000)'), ('zlib', 'ZLIB (PNG/ZIP)'), ('libtiff', 'LIBTIFF'), ('raqm', 'RAQM (Bidirectional Text)'), ('libimagequant', 'LIBIMAGEQUANT (Quantization method)'), ('xcb', 'XCB (X protocol)'))
check
jpg
('libjpeg_turbo',)
libjpeg-turbo 
version
('pil', 'jpg')
littlecms2
('.',)
(2, 7)
compiled for
loaded
raqm
('fribidi', 'harfbuzz')
v
, 
 
---
support ok,
support ok
***
support not installed
collections
defaultdict
(<class 'list'>,)
EXTENSION
items
append
sorted
ID
MIME
Extensions: {}
OPEN
open
SAVE
save
SAVE_ALL
('save_all',)
DECODERS
('decode',)
ENCODERS
('encode',)
Features: {}

    Prints information about this installation of Pillow.
    This function can be called with ``python3 -m PIL``.

    :param out:
        The output stream to print to. Defaults to ``sys.stdout`` if ``None``.
    :param supported_formats:
        If ``True``, a list of all supported image file formats will be printed.
    
<genexpr>
pilinfo.<locals>.<genexpr>
__doc__
__spec__
origin
has_location
__cached__
os
sys
('Image',)
{'pil': ('PIL._imaging', 'PILLOW_VERSION'), 'tkinter': ('PIL._tkinter_finder', 'tk_version'), 'freetype2': ('PIL._imagingft', 'freetype2_version'), 'littlecms2': ('PIL._imagingcms', 'littlecms_version'), 'webp': ('PIL._webp', 'webpdecoder_version')}
{'jpg': ('jpeg', 'jpeglib'), 'jpg_2000': ('jpeg2k', 'jp2klib'), 'zlib': ('zip', 'zlib'), 'libtiff': ('libtiff', 'libtiff')}
{'webp_anim': ('PIL._webp', 'HAVE_WEBPANIM', None), 'webp_mux': ('PIL._webp', 'HAVE_WEBPMUX', None), 'transp_webp': ('PIL._webp', 'HAVE_TRANSPARENCY', None), 'raqm': ('PIL._imagingft', 'HAVE_RAQM', 'raqm_version'), 'fribidi': ('PIL._imagingft', 'HAVE_FRIBIDI', 'fribidi_version'), 'harfbuzz': ('PIL._imagingft', 'HAVE_HARFBUZZ', 'harfbuzz_version'), 'libjpeg_turbo': ('PIL._imaging', 'HAVE_LIBJPEGTURBO', 'libjpeg_turbo_version'), 'libimagequant': ('PIL._imaging', 'HAVE_LIBIMAGEQUANT', 'imagequant_version'), 'xcb': ('PIL._imaging', 'HAVE_XCB', None)}
get_supported
(None, True)
pilinfo
PIL\features.py
('.0', 'x')
<module PIL.features>
('feature',)
('feature', 'msg', 'codec', 'lib')
('feature', 'msg', 'module', 'flag', 'ver', 'imported_module', 'ex')
('feature', 'msg', 'module', 'ver', 'ex')
('ret',)
('out', 'supported_formats', 'py_version', 'name', 'feature', 'v', 'version_static', 't', 'f', 'v2', 'extensions', 'ext', 'i', 'line', 'features')
('feature', 'codec', 'lib', 'version')
('feature', 'module', 'flag', 'ver')
('feature', 'module', 'ver')

------------------------------ [modulecode___main__] ------------------------------
join
dirname
sys
argv
0
Config
conf_name
open
rb
__enter__
__exit__
base64
b64decode
read
bytes
[34, 17, 145, 255]
d_json
append
cxk
i
1
len
json
loads
decode
('utf-8',)
0
title
1
10
food
2
score
3
incr
Exception
print
('[!] bad configuration file - using prod configuration',)
('[!] configuration file found and decoded with key - using demo configuration',)
(None, None, None)
[!] could not find configuration file in directory 
.

 - using prod configuration
XOR-encode d3m0_c0nf.txt with 0x22,0x11,0x91,0xff (I think Nuikta strips Python docstrings during compilation so no worries about this comment making its way into the wrong hands)
x
y
image
direction
Square
canvas
create_image
img_flare_up
Snake
TAG
(0, 0)
('image', 'tag')
(0, 1)
squares
head
too many values to unpack (expected 2)
Direction
up
space
down
left
right
shift
img_flare_right
img_flare_left
img_flare_down
insert
snake
delete
2
reset
Food
gen_x
range
xs
gen_y
ys
self
random
randint
width
height
update
lbl_player_score
config
SCORE    {}
('text',)
('food',)
dump_index
(-1,)
speed
5
check_collisions
10000
check_snake_length
game_win
shame
length
game_over
wndw_root
after
next_turn
change snake direction
[1, None, None]
check snake.head for collisions
ALL
create_text
winfo_width
winfo_height
{'font': ('consolas', 70), 'text': 'GAME OVER', 'fill': 'red', 'tag': 'gameover'}
{'font': ('consolas', 24), 'text': 'NEW\nTOP\nPLAYER!', 'fill': 'green', 'tag': 'gamewin'}
open_new_top_player_window
lbl_top_player
TOP PLAYER
{}    {}
strval_email
get
update top player logo when submit button clicked
winfo_screenwidth
winfo_screenheight
int
geometry
+
scale Tkinter window
Toplevel
NEW TOP PLAYER
Label
{'text': 'ENTER EMAIL', 'font': ('consolas', 12)}
pack
set
e.g. <{}>
get_flag
xk
Entry
50
('consolas', 12)
('width', 'textvariable', 'font')
Button
Submit
btn_submit_clicked
('text', 'command')
scale_window
open new window for player to enter email; auto fill example email to show expected format
change_direction
__iter__
__getitem__
%s argument after * must be an iterable, not %s
__name__
keys
%s argument after ** must be a mapping, not %s
called
star_arg_dict
mapping_1__dict
%s got multiple values for keyword argument '%s'
args
star_arg_list
(None, None)
()
 object
__mro_entries__
bases
kw
'%s' object is not a mapping
__doc__
__file__
__cached__
__annotations__
os
tkinter
('*',)
dataclasses
('dataclass',)
dataclass
PIL
('Image', 'ImageTk')
Image
ImageTk
flag
__main__
__module__
__qualname__
500
200
20
body
FLAKE Ultimate Pro v10
#000000
background
#0096FF
wndw_bg
d3m0_c0nf.txt
()
[27, 186, 140, 27]
read_config
3
__init__
Square.__init__
Snake.__init__
Snake.update
Snake.shift
Snake.dump_index
property
Snake.length
Snake.head
Food.__init__
Food.reset
staticmethod
Food.gen_x
Food.gen_y
Tk
configure
('bg',)
StringVar
('consolas', 14)
('text', 'font')
Canvas
('bg', 'height', 'width')
{'text': '[ TOP PLAYER ]\nName                             Score\n0l1v3r_5hrub@flare-on.com........10000', 'font': ('consolas', 12)}
flare.png
img_flare
resize
((25, 25),)
PhotoImage
rotate
(90,)
(180,)
(270,)
bind
<Left>
<lambda>
<Right>
<Up>
<Down>
mainloop
flake.py
('event',)
<module>
('__class__',)
('self',)
('self', 'x', 'y', 'image')
('new_direction',)
('x', 'y', 'square')
('self', 'index')
('x', 'y', 'has_fed', 'food_square')
('wndw_top_player', 'lbl_email', 'entry_email', 'btn_submit')
('f_in', 'e_json', 'cxk', 'd_json', 'i', 'b', 'json_', 'e')
('self', 'xs', '_', 'x', 'ys', 'y', 'i')
('wndw', 'wndw_width', 'wndw_height', 'scrn_width', 'scrn_height', 'x', 'y')
('self', 'x', 'y', 'image_mapping')
('self', 'x', 'y')

------------------------------ [modulecode_flag] ------------------------------
0
dk
append
i
1
ARC4
new
decrypt
(b"\xbbh\xd5P\x88\xc3$\x1bM\xdc\xc2\x9d\x89\xaafGx\xa6\xdb\x82\x02\xc6V\xce\xbb\x95@\x7f'*`\xee\xc0i",)
decode
('utf-8',)
length
b'Z#^$Rlbod,oaoewl!rqkqgqpx.#jnv#moaoqekmc!qwesv#hdldpi.#mr"&`!`vp!kw$lwpp!grq`n#pig#bhlbh!q`ksg#sik`l!kp$$f"'
dm
b'\x01\x02\x03\x04'
4
print
__doc__
__file__
__spec__
origin
has_location
__cached__
Crypto.Cipher
('ARC4',)
(b'T\x00\xc6\x88g\xf9_nx}\x91]X\xb2^g[\xf40\x860\xe4D\x19\xea\x94\x136\x97m\xc9\xd8\xb9r?(\xe8\xea\r3\x92\x8e\xa9\x03\xef\xa8\x8e\x9d\xb7\x83',)
get_flag
check_snake_length
shame
flag.py
<module flag>
('snake', 'expected_length')
('xk', 'k', 'c', 'dk', 'i', 'b', 'p')
('actual', 'expected', 'xk', 'em', 'dm', 'i', 'b')


------------------------------ [modulecode_tkinter_preLoad] ------------------------------
__doc__
__file__
__spec__
origin
has_location
__cached__
os
join
__nuitka_binary_dir
tcl
environ
TCL_LIBRARY
tk
TK_LIBRARY
tkinter-preLoad.py
<module tkinter-preLoad>


